(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var bgAspect, bgScrollSpeed, bg, modeToOperation, localGridSize, localGridFidelity, cameraAspect, cameraFrustrumSize, prototype = Blitter.prototype, constructor = Blitter;
  bgAspect = 0.3125;
  bgScrollSpeed = 20;
  bg = new Image;
  bg.src = '/assets/bg.jpg';
  bg.onload = function(){
    return bgAspect = bg.width / bg.height;
  };
  modeToOperation = function(mode){
    switch (mode) {
    case MODE_NORMAL:
      return 'source-over';
    case MODE_COLOR:
      return 'hue';
    case MODE_ADD:
      return 'lighten';
    default:
      return 'source-over';
    }
  };
  localGridSize = 1000;
  localGridFidelity = 100;
  cameraAspect = 1.5;
  cameraFrustrumSize = [1000, 1000 * cameraAspect];
  function Blitter(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.setSize([window.innerWidth, window.innerHeight]);
  }
  prototype.setSize = function(size){
    if (size[0] > size[1]) {
      this.w = this.canvas.width = size[1] / cameraAspect;
      this.h = this.canvas.height = size[1];
    } else {
      this.w = this.canvas.width = size[0];
      this.h = this.canvas.height = size[0] * cameraAspect;
    }
    this.wf = this.w / cameraFrustrumSize[0];
    return this.hf = this.h / cameraFrustrumSize[1];
  };
  prototype.translatePos = function(arg$, z){
    var x, y;
    x = arg$[0], y = arg$[1];
    z == null && (z = gameState.cameraZoom);
    return [this.w / 2 + (x - gameState.cameraPos[0]) * this.wf * z, this.h / 2 - (y - gameState.cameraPos[1]) * this.hf * z];
  };
  prototype.translateSize = function(arg$, z){
    var w, h;
    w = arg$[0], h = arg$[1];
    z == null && (z = gameState.cameraZoom);
    return [w * this.wf * z, h * this.hf * z];
  };
  prototype.circle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype.strokeCircle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.rect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(x - w / 2, y - h / 2, w, h);
  };
  prototype.strokeRect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x - w / 2, y - w / 2);
    this.ctx.lineTo(x + w / 2, y - w / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x - w / 2, y - w / 2);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.line = function(start, end){
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this._line(this.ctx, start, end);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype._line = function(start, end){
    var ref$, x1, y1, x2, y2;
    ref$ = this.translatePos(start), x1 = ref$[0], y1 = ref$[1];
    ref$ = this.translatePos(end), x2 = ref$[0], y2 = ref$[1];
    this.ctx.moveTo(x1, y1);
    return this.ctx.lineTo(x2, y2);
  };
  prototype.uptri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._uptri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._uptri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x + 0, y - h / 2);
    return this.ctx.lineTo(x - w / 2, y + h / 2);
  };
  prototype.dntri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._dntri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._dntri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y - h / 2);
    this.ctx.lineTo(x + w / 2, y - h / 2);
    this.ctx.lineTo(x + 0, y + h / 2);
    return this.ctx.lineTo(x - w / 2, y - h / 2);
  };
  prototype.clear = function(t){
    var bgHeight, bgOffset;
    t == null && (t = 0);
    bgHeight = this.w / bgAspect;
    bgOffset = t * bgScrollSpeed % bgHeight;
    this.ctx.clearRect(0, 0, this.w, this.h);
    this.ctx.globalAlpha = 1;
    return this.ctx.globalCompositeOperation = modeToOperation(MODE_NORMAL);
  };
  prototype.drawOrigin = function(){
    var ref$, cx, cy;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    this.ctx.strokeStyle = '#0f0';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this._line([0, cy - 1000], [0, cy + 1000]);
    this._line([cx - 1000, 0], [cx + 1000, 0]);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.drawLocalGrid = function(){
    var ref$, cx, cy, nx, ny, lgsX, lgsY, i$, step$, to$, i;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    nx = cx - cx % localGridFidelity;
    ny = cy - cy % localGridFidelity;
    lgsX = cameraFrustrumSize[0] / gameState.cameraZoom;
    lgsY = cameraFrustrumSize[1] / gameState.cameraZoom;
    this.strokeRect(gameState.cameraPos, cameraFrustrumSize, {
      color: 'yellow'
    });
    this.ctx.strokeStyle = '#0f0';
    this.ctx.beginPath();
    this.ctx.globalAlpha = 0.4;
    for (i$ = nx - lgsX, to$ = nx + lgsX, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([i, cy - lgsY], [i, cy + lgsY]);
    }
    for (i$ = ny - lgsY, to$ = ny + lgsY, step$ = localGridFidelity; step$ < 0 ? i$ > to$ : i$ < to$; i$ += step$) {
      i = i$;
      this._line([cx - lgsX, i + localGridFidelity], [cx + lgsX, i + localGridFidelity]);
    }
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.sprite = function(arg$, pos, size){
    var width, height, image, index, ref$, x, y, w, h;
    width = arg$.width, height = arg$.height, image = arg$.image, index = arg$.index;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    return this.ctx.drawImage(image, index * width, 0, width, height, x - w / 2, y - h / 2, w, h);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Blitter;
}());



},{"std":20}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, Bullet, BlendBullet, SuperBullet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb;
out$.Bullet = Bullet = (function(){
  Bullet.displayName = 'Bullet';
  var prototype = Bullet.prototype, constructor = Bullet;
  function Bullet(pos, color){
    this.pos = [pos[0], pos[1]];
    this.vel = [0, 3000];
    this.size = [80, 220];
    this.life = 1;
    this.Δlife = 1;
    this.color = color;
    this.alpha = 1;
    this.radius = 20;
    this.power = 5;
  }
  prototype.draw = function(canvas){
    var topSize, btmSize, topPos, btmPos;
    topSize = [this.size[0], this.size[1] * 1 / 4];
    btmSize = [this.size[0], this.size[1] * 3 / 4];
    topPos = [this.pos[0], this.pos[1] + this.size[1] * 3 / 8 - this.size[1] * 1 / 4];
    btmPos = [this.pos[0], this.pos[1] - this.size[1] * 1 / 8 - this.size[1] * 1 / 4];
    canvas.uptri(topPos, topSize, {
      color: rgb(this.color),
      alpha: this.alpha * this.life,
      mode: MODE_ADD
    });
    return canvas.dntri(btmPos, btmSize, {
      color: rgb(this.color),
      alpha: this.alpha * this.life,
      mode: MODE_ADD
    });
  };
  prototype.update = function(Δt){
    this.pos[1] += this.vel[1] * Δt;
    this.life -= this.Δlife * Δt;
    return this.life > 0;
  };
  return Bullet;
}());
out$.BlendBullet = BlendBullet = (function(superclass){
  var separation, prototype = extend$((import$(BlendBullet, superclass).displayName = 'BlendBullet', BlendBullet), superclass).prototype, constructor = BlendBullet;
  separation = 20;
  function BlendBullet(){
    BlendBullet.superclass.apply(this, arguments);
    this.vel[1] = 2000;
    this.radius = 40;
    this.power = 20;
    this.life = 2;
    this.size = [120, 350];
  }
  return BlendBullet;
}(Bullet));
out$.SuperBullet = SuperBullet = (function(superclass){
  var prototype = extend$((import$(SuperBullet, superclass).displayName = 'SuperBullet', SuperBullet), superclass).prototype, constructor = SuperBullet;
  function SuperBullet(){
    SuperBullet.superclass.apply(this, arguments);
    this.vel[1] = 1000;
    this.radius = 60;
    this.power = 50;
    this.size = [160, 500];
    this.life = 3;
  }
  return SuperBullet;
}(Bullet));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":20}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, lerp, floor, tau, lerpColor, rotationToColor, rotationToSpriteIndex, diamond, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, lerp = ref$.lerp, floor = ref$.floor, tau = ref$.tau;
out$.lerpColor = lerpColor = function(t, start, end){
  return [lerp(t, start[0], end[0]), lerp(t, start[1], end[1]), lerp(t, start[2], end[2])];
};
out$.rotationToColor = rotationToColor = function(θ){
  if (0 < θ && θ < tau) {
    return floor((θ / tau) * colors.length);
  } else {
    return 0;
  }
};
out$.rotationToSpriteIndex = rotationToSpriteIndex = function(θ, frames){
  return floor(frames * (θ % (tau / 3)) / (tau / 3));
};
out$.diamond = diamond = function(arg$){
  var x, y;
  x = arg$[0], y = arg$[1];
  if (x === 0) {
    return [x, y];
  } else {
    return [x / 2, y / 2];
  }
};



},{"std":20}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, v2, Drawing, ColorWheel, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau, v2 = ref$.v2;
Drawing = require('./mixins').Drawing;
out$.ColorWheel = ColorWheel = (function(){
  ColorWheel.displayName = 'ColorWheel';
  var o, m, prototype = ColorWheel.prototype, constructor = ColorWheel;
  importAll$(prototype, arguments[0]);
  o = tau * 9 / 12;
  m = colors.length;
  function ColorWheel(ctx, r){
    this.ctx = ctx;
    this.r = r;
  }
  prototype.draw = function(pos, θ, playerColor){
    var i$, ref$, len$, i, color;
    for (i$ = 0, len$ = (ref$ = colors).length; i$ < len$; ++i$) {
      i = i$;
      color = ref$[i$];
      this.ctx.fillStyle = rgb(color);
      this.ctx.beginPath();
      this.ctx.moveTo(pos[0], pos[1]);
      this.ctx.arc(pos[0], pos[1], this.r, -θ + tau / m * i + o, -θ + tau / m * (i + 1) + o);
      this.ctx.closePath();
      this.ctx.fill();
    }
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this.ctx.moveTo(pos[0], pos[1]);
    this.ctx.lineTo(pos[0] + this.r * sin(0), pos[1] - this.r * cos(0));
    this.ctx.closePath();
    this.ctx.stroke();
    return this.boxAt(v2.add(pos, [0, -(this.r + 7)]), [8, 15], rgb(colors[playerColor]));
  };
  return ColorWheel;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"./mixins":8,"std":20}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Drawing, ControllerState, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
Drawing = require('./mixins').Drawing;
out$.ControllerState = ControllerState = (function(){
  ControllerState.displayName = 'ControllerState';
  var triggerSize, stateColor, prototype = ControllerState.prototype, constructor = ControllerState;
  importAll$(prototype, arguments[0]);
  triggerSize = [25, 65];
  stateColor = function(it){
    if (it) {
      return 'red';
    } else {
      return 'lightgrey';
    }
  };
  function ControllerState(ctx, size, flipflopper){
    this.ctx = ctx;
    this.size = size;
    this.flipflopper = flipflopper;
  }
  prototype.draw = function(arg$, arg1$){
    var x, y, inputState, ref$, flip, flop, inputVel, debugVel;
    x = arg$[0], y = arg$[1];
    inputState = arg1$.inputState;
    ref$ = this.flipflopper.triggerState, flip = ref$.flip, flop = ref$.flop;
    inputVel = [inputState.x, inputState.y];
    debugVel = [inputState.rawX, inputState.rawY];
    this.boxAt([x - 80, y - 20], triggerSize, 'grey');
    this.boxAt([x + 80, y - 20], triggerSize, 'grey');
    this.boxTop([x - 80, y - 52], [25, 65 * inputState.flip], 'white');
    this.boxTop([x + 80, y - 52], [25, 65 * inputState.flop], 'white');
    this.boxAt([x - 80, y + 35], [25, 25], stateColor(flip.ignore));
    this.boxAt([x + 80, y + 35], [25, 25], stateColor(flop.ignore));
    this.boxAt([x - 65, y + 70], [55, 25], inputState.fire ? 'yellow' : '#333');
    this.boxAt([x + 0, y + 70], [50, 25], inputState['super'] ? 'yellow' : '#333');
    this.boxAt([x + 65, y + 70], [55, 25], inputState.special ? 'yellow' : '#333');
    this.ctx.beginPath();
    this.ctx.arc(x, y, 50, tau / 2, tau);
    this.ctx.lineTo(x, y + 50);
    this.ctx.closePath();
    this.ctx.stroke();
    this.circle([x + 50 * inputVel[0], y - 50 * inputVel[1]], 6, 'red');
    this.circle([x + 50 * debugVel[0], y - 50 * debugVel[1]], 6, 'white');
    this.ctx.closePath();
    return this.ctx.fill();
  };
  return ControllerState;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"./mixins":8,"std":20}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, Drawing, EasingDemonstration, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
Drawing = require('./mixins').Drawing;
out$.EasingDemonstration = EasingDemonstration = (function(){
  EasingDemonstration.displayName = 'EasingDemonstration';
  var Ease, palette, prototype = EasingDemonstration.prototype, constructor = EasingDemonstration;
  importAll$(prototype, arguments[0]);
  Ease = require('../ease');
  palette = ['white', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue'];
  function EasingDemonstration(ctx, size){
    this.ctx = ctx;
    this.size = size;
  }
  prototype.draw = function(pos, n){
    var name, ref$, easeFn, lresult$, i$, to$, i, results$ = [];
    n == null && (n = 0);
    for (name in ref$ = Ease) {
      easeFn = ref$[name];
      lresult$ = [];
      this.ctx.fillStyle = palette[n++];
      for (i$ = 0, to$ = this.size[0]; i$ <= to$; i$ += 5) {
        i = i$;
        lresult$.push(this.boxAt([i, pos[1] - this.size[1] * easeFn(i / this.size[0])], [2, 2]));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  return EasingDemonstration;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"../ease":10,"./mixins":8,"std":20}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, rgb, sin, cos, v2, rotationToColor, ColorWheel, ControllerState, RotationHistory, EasingDemonstration, DebugVis, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, v2 = ref$.v2;
rotationToColor = require('../common').rotationToColor;
ColorWheel = require('./color-wheel').ColorWheel;
ControllerState = require('./controller-state').ControllerState;
RotationHistory = require('./rotation-history').RotationHistory;
EasingDemonstration = require('./easing-demonstration').EasingDemonstration;
out$.DebugVis = DebugVis = (function(){
  DebugVis.displayName = 'DebugVis';
  var height, width, center, prototype = DebugVis.prototype, constructor = DebugVis;
  height = window.innerHeight;
  width = window.innerHeight / 1.5;
  center = [width / 2, height / 2];
  function DebugVis(flipflopper){
    this.flipflopper = flipflopper;
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.w = this.canvas.width = width;
    this.h = this.canvas.height = height;
    this.cx = this.w / 2;
    this.cy = this.h / 2;
    this.colorWheel = new ColorWheel(this.ctx, height / 9);
    this.controller = new ControllerState(this.ctx, [300, 100], this.flipflopper);
    this.rotationHist = new RotationHistory(this.ctx, 200);
    this.easeDemo = new EasingDemonstration(this.ctx, [width, 100]);
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.w, this.h);
  };
  prototype.render = function(gameState, Δt, t){
    var player;
    player = gameState.player;
    this.colorWheel.draw([this.cx, height / 5], player.rotation, player.color);
    this.controller.draw(center, gameState);
    if (DEBUG_SHOW_EASING_TESTS) {
      return this.easeDemo.draw([0, height]);
    } else {
      return this.rotationHist.draw(width, height);
    }
  };
  prototype.pushRotationHistory = function(n){
    return this.rotationHist.push(n);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return DebugVis;
}());



},{"../common":3,"./color-wheel":4,"./controller-state":5,"./easing-demonstration":6,"./rotation-history":9,"std":20}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Drawing, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Drawing = Drawing = {
  boxAt: function(pos, size, color){
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(pos[0] - size[0] / 2, pos[1] - size[1] / 2, size[0], size[1]);
  },
  boxTop: function(pos, size, color){
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(pos[0] - size[0] / 2, pos[1], size[0], size[1]);
  },
  circle: function(pos, r, color){
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(pos[0], pos[1], r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  }
};



},{"std":20}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, rotationToColor, Drawing, RotationHistory, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
rotationToColor = require('../common').rotationToColor;
Drawing = require('./mixins').Drawing;
out$.RotationHistory = RotationHistory = (function(){
  RotationHistory.displayName = 'RotationHistory';
  var prototype = RotationHistory.prototype, constructor = RotationHistory;
  importAll$(prototype, arguments[0]);
  function RotationHistory(ctx, limit){
    this.ctx = ctx;
    this.limit = limit != null ? limit : 200;
    this.history = [];
  }
  prototype.push = function(n){
    this.history.push(n);
    if (this.history.length >= this.limit) {
      return this.history.shift();
    }
  };
  prototype.draw = function(width, height){
    var i$, ref$, len$, x, d, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.history).length; i$ < len$; ++i$) {
      x = i$;
      d = ref$[i$];
      results$.push(this.boxAt([x / this.limit * width, height - 10 - d * 10], [2, 2], rgb(colors[rotationToColor(d)])));
    }
    return results$;
  };
  return RotationHistory;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"../common":3,"./mixins":8,"std":20}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mixEase, Linear, Power2, Power3, Power4, PowerOut2, PowerOut3, PowerOut4, Swing2, Swing3, Swing4, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.mixEase = mixEase = function(In, Out){
  return function(n){
    if (n < 1 / 2) {
      return 1 / 2 * In(n * 2);
    } else {
      return 1 / 2 + 1 / 2 * Out((n - 1 / 2) * 2);
    }
  };
};
out$.Linear = Linear = function(n){
  return n;
};
out$.Power2 = Power2 = function(n){
  return n * n;
};
out$.Power3 = Power3 = function(n){
  return n * n * n;
};
out$.Power4 = Power4 = function(n){
  return n * n * n * n;
};
out$.PowerOut2 = PowerOut2 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m;
};
out$.PowerOut3 = PowerOut3 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m;
};
out$.PowerOut4 = PowerOut4 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m * m;
};
out$.Swing2 = Swing2 = mixEase(Power2, PowerOut2);
out$.Swing3 = Swing3 = mixEase(Power3, PowerOut3);
out$.Swing4 = Swing4 = mixEase(Power4, PowerOut4);



},{"std":20}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, abs, lerp, Tween, Ease, mixEase, Linear, LatchingFlipFlopper, EasyFlipFlopper, FlipFlopper, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, abs = ref$.abs, lerp = ref$.lerp;
Tween = require('./tween').Tween;
ref$ = Ease = require('./ease'), mixEase = ref$.mixEase, Linear = ref$.Linear;
out$.LatchingFlipFlopper = LatchingFlipFlopper = (function(){
  LatchingFlipFlopper.displayName = 'LatchingFlipFlopper';
  var MODE_IDLE, MODE_COCKING, MODE_COCKED, MODE_UNCOCKING, MODE_REVERSING, dSym, stageStep, stageToRotation, normaliseStage, normaliseRotation, prototype = LatchingFlipFlopper.prototype, constructor = LatchingFlipFlopper;
  MODE_IDLE = Symbol('idle');
  MODE_COCKING = Symbol('cocking');
  MODE_COCKED = Symbol('cocked');
  MODE_UNCOCKING = Symbol('uncocking');
  MODE_REVERSING = Symbol('reversing');
  dSym = function(n){
    return ['FLIP', 'IDLE', 'FLOP'][n + 1];
  };
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(θ){
    if (θ < 0) {
      return tau - -θ % tau;
    } else {
      return θ % tau;
    }
  };
  function LatchingFlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.θ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    this.reverseTrigger = 0;
    this.ignoredTrigger = 0;
    this.triggerState = {
      flip: {
        ingore: false
      },
      flop: {
        ingore: false
      }
    };
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    if (this.reverseTrigger === d) {
      if (p === 0) {
        this.reverseTrigger = 0;
        this.cockDirection = 0;
        log('revert-release:', dSym(d));
      } else {
        log('revert:', dSym(d));
      }
      return;
    }
    if (this.ignoredTrigger === d) {
      if (p === 0) {
        this.ignoredTrigger = 0;
        this.cockDirection = 0;
        log('ignore-release:', dSym(d));
      } else {
        log('ignore:', dSym(d));
      }
      return;
    }
    switch (this.mode) {
    case MODE_IDLE:
      this.mode = MODE_COCKING;
      this.cockDirection = d;
      return this.cock.apply(this, arguments);
    case MODE_COCKING:
      if (this.cockDirection === d) {
        return this.cock.apply(this, arguments);
      } else {
        this.cockDirection = d;
        this.ignoredTrigger = d * -1;
        return this.cock.apply(this, arguments);
      }
      break;
    case MODE_COCKED:
      if (this.cockDirection === d) {
        this.mode = MODE_UNCOCKING;
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_UNCOCKING:
      if (this.cockDirection === d) {
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_REVERSING:
      return this.reverse.apply(this, arguments);
    }
  };
  prototype.idle = function(d){
    this.stage = normaliseStage(this.stage + d);
    this.θ = stageToRotation(this.stage);
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    return this.ignoredTrigger = 0;
  };
  prototype.cock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    this.θ = lerp(Ease.PowerOut3(p) / 2, currentRotation, targetRotation);
    if (p === 1) {
      this.mode = MODE_COCKED;
    }
    if (p === 0) {
      return this.idle(0);
    }
  };
  prototype.uncock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    if (p === 0) {
      return this.idle(d);
    } else {
      return this.θ = lerp(0.5 + (1 - Ease.Power3(p)) / 2, currentRotation, targetRotation);
    }
  };
  prototype.reverse = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage);
    currentRotation = stageToRotation(this.stage - d / 2);
    this.θ = lerp(p, currentRotation, targetRotation);
    if (p === 1) {
      this.idle(0);
      this.reverseTrigger = d;
      return this.cockDirection = 0;
    }
  };
  return LatchingFlipFlopper;
}());
out$.EasyFlipFlopper = EasyFlipFlopper = (function(){
  EasyFlipFlopper.displayName = 'EasyFlipFlopper';
  var threshold, returnThreshold, stageStep, stageToRotation, triggerName, normaliseStage, normaliseRotation, MODE_IDLE, MODE_FLIP, MODE_FLOP, TRIGGER_FLIP, TRIGGER_FLOP, customEase, prototype = EasyFlipFlopper.prototype, constructor = EasyFlipFlopper;
  threshold = tau / 60;
  returnThreshold = 0.1;
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  triggerName = function(d){
    if (d === -1) {
      return TRIGGER_FLIP;
    } else {
      return TRIGGER_FLOP;
    }
  };
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(θ){
    if (θ < 0) {
      return tau - -θ % tau;
    } else {
      return θ % tau;
    }
  };
  MODE_IDLE = Symbol('idle');
  MODE_FLIP = Symbol('flip');
  MODE_FLOP = Symbol('flop');
  TRIGGER_FLIP = 'flip';
  TRIGGER_FLOP = 'flop';
  customEase = Ease.Power2;
  function EasyFlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.θ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.direction = 0;
    this.triggerState = (ref$ = {}, ref$[TRIGGER_FLIP + ""] = {
      ignore: false
    }, ref$[TRIGGER_FLOP + ""] = {
      ignore: false
    }, ref$);
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    var trigger, target, current;
    trigger = triggerName(d);
    if (this.triggerState[trigger].ignore) {
      if (p < returnThreshold) {
        return this.triggerState[trigger].ignore = false;
      }
    } else {
      target = stageToRotation(this.stage + d);
      current = stageToRotation(this.stage);
      this.θ = lerp(customEase(p), current, target);
      if (abs(this.θ - target) < threshold) {
        this.θ = target;
        this.stage += d;
        return this.triggerState[trigger].ignore = true;
      }
    }
  };
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  return EasyFlipFlopper;
}());
out$.FlipFlopper = FlipFlopper = LatchingFlipFlopper;



},{"./ease":10,"./tween":23,"std":20}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, floor, delay, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, floor = ref$.floor, delay = ref$.delay;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var tpsHistoryWindow, fpsHistoryWindow, SHOW_READOUT, RENDER_ON_TICK, prototype = FrameDriver.prototype, constructor = FrameDriver;
  tpsHistoryWindow = 20;
  fpsHistoryWindow = 20;
  SHOW_READOUT = true;
  RENDER_ON_TICK = false;
  function FrameDriver(){
    var ref$;
    this.tick = bind$(this, 'tick', prototype);
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      lastTickTime: 0,
      lastFrameTime: 0,
      frame: 0,
      running: false
    };
    this.callbacks = {
      tick: id,
      frame: id
    };
    this.tps = {
      value: 0,
      history: repeatArray$([0], tpsHistoryWindow)
    };
    this.fps = {
      value: 0,
      history: repeatArray$([0], fpsHistoryWindow)
    };
    if (SHOW_READOUT) {
      this.readout = document.createElement('pre');
      ref$ = this.readout.style;
      ref$.position = 'absolute';
      ref$.top = 0;
      ref$.right = 0;
      document.body.appendChild(this.readout);
    }
  }
  prototype.frame = function(){
    var now, Δt;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastFrameTime;
    this.pushFrameTime(Δt);
    this.state.lastFrameTime = now;
    this.state.frame += 1;
    return this.callbacks.frame(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
  };
  prototype.tick = function(){
    var now, Δt;
    if (this.state.running) {
      delay(0, this.tick);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastTickTime;
    if (SHOW_READOUT) {
      this.readout.textContent = this.fps.value + " | " + this.tps.value;
    }
    this.pushTickTime(Δt);
    this.state.lastTickTime = now;
    this.callbacks.tick(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
    if (RENDER_ON_TICK) {
      this.pushFrameTime(Δt);
      this.state.frame += 1;
      return this.callbacks.frame(this.state.frame);
    }
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.lastTickTime = 0;
    this.state.lastFrameTime = 0;
    this.state.running = true;
    this.tick();
    if (!RENDER_ON_TICK) {
      return this.frame();
    }
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  prototype.toggle = function(){
    if (this.state.running) {
      return this.stop();
    } else {
      return this.start();
    }
  };
  prototype.pushTickTime = function(Δt){
    this.tps.history.push(Δt);
    this.tps.history.shift();
    return this.tps.value = floor(1000 * tpsHistoryWindow / this.tps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.pushFrameTime = function(Δt){
    this.fps.history.push(Δt);
    this.fps.history.shift();
    return this.fps.value = floor(1000 * fpsHistoryWindow / this.fps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.onTick = function(λ){
    return this.callbacks.tick = λ;
  };
  prototype.onFrame = function(λ){
    return this.callbacks.frame = λ;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"std":20}],13:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.MODE_COLOR = Symbol('color');
global.MODE_NORMAL = Symbol('normal');
global.MODE_ADD = Symbol('add');
global.colors = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 0, 1], [1, 0, 0]];
global.FIRE_MODE_ALTERNATE = Symbol('alternate');
global.FIRE_MODE_BLEND = Symbol('blend');
global.INPUT_FIRE = Symbol('input-fire');
global.INPUT_FLIP = Symbol('input-flip');
global.INPUT_FLOP = Symbol('input-fire');
global.INPUT_SUPER = Symbol('input-super');
global.INPUT_PAUSE = Symbol('input-pause');
global.INPUT_X = Symbol('input-move-x');
global.INPUT_Y = Symbol('input-move-y');
global.INPUT_SPECIAL = Symbol('input-special');
global.INPUT_RAW_X = Symbol('input-raw-x');
global.INPUT_RAW_Y = Symbol('input-raw-y');
global.GAMEPAD_AXIS_DEADZONE = 0.2;
global.DEBUG_SHOW_EASING_TESTS = false;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, floor, abs, tau, sin, cos, div, v2, wrap, rgb, lerp, rnd, randomRange, FrameDriver, FlipFlopper, DebugVis, Blitter, Sprite, Input, Tween, Bullet, BlendBullet, SuperBullet, Target1, Target2, Target3, Ease, Timer, lerpColor, diamond, rotationToColor, rotationToSpriteIndex, autoTravelSpeed, maxSpeed, autoFireSpeed, dualFireSeparation, cameraDriftLimit, flipFlopTime, rotationHistoryLimit, hitRadius, mainCanvas, input, flipflopper, debugVis, shoot, superShoot, playerSprite, playerSpriteSize, render, update;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor, abs = ref$.abs, tau = ref$.tau, sin = ref$.sin, cos = ref$.cos, div = ref$.div, v2 = ref$.v2;
ref$ = require('std'), wrap = ref$.wrap, rgb = ref$.rgb, lerp = ref$.lerp, rnd = ref$.rnd, randomRange = ref$.randomRange;
require('./global');
FrameDriver = require('./frame-driver').FrameDriver;
FlipFlopper = require('./flipflopper').FlipFlopper;
DebugVis = require('./debug').DebugVis;
Blitter = require('./blitter').Blitter;
Sprite = require('./sprite').Sprite;
Input = require('./input').Input;
Tween = require('./tween').Tween;
ref$ = require('./bullet'), Bullet = ref$.Bullet, BlendBullet = ref$.BlendBullet, SuperBullet = ref$.SuperBullet;
ref$ = require('./target'), Target1 = ref$.Target1, Target2 = ref$.Target2, Target3 = ref$.Target3;
Ease = require('./ease');
Timer = require('./timer');
ref$ = require('./common'), lerpColor = ref$.lerpColor, diamond = ref$.diamond, rotationToColor = ref$.rotationToColor, rotationToSpriteIndex = ref$.rotationToSpriteIndex;
autoTravelSpeed = 500;
maxSpeed = 500;
autoFireSpeed = 0.04;
dualFireSeparation = 35;
cameraDriftLimit = 200;
flipFlopTime = 0.2;
rotationHistoryLimit = 200;
hitRadius = 25;
mainCanvas = new Blitter;
input = new Input;
flipflopper = new FlipFlopper({
  speed: 0.2
});
debugVis = new DebugVis(flipflopper);
shoot = function(){
  var mid, left, right;
  if (gameState.fireMode === FIRE_MODE_BLEND) {
    mid = v2.add(gameState.player.pos, [0, 170]);
    return gameState.playerBullets.push(new BlendBullet(mid, colors[gameState.player.color + 0]));
  } else {
    if (gameState.shootAlternate) {
      left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 50]);
      gameState.playerBullets.push(new Bullet(left, colors[gameState.player.color]));
    } else {
      right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 50]);
      gameState.playerBullets.push(new Bullet(right, colors[gameState.player.color]));
    }
    return gameState.shootAlternate = !gameState.shootAlternate;
  }
};
superShoot = function(){
  var mid;
  mid = v2.add(gameState.player.pos, [0, 170]);
  return gameState.playerBullets.push(new SuperBullet(mid, [1, 1, 1]));
};
global.gameState = {
  cameraZoom: 0.7,
  cameraPos: [0, 0],
  player: {
    pos: [0, 0],
    vel: [0, 0],
    flipping: false,
    flopping: false,
    color: 0,
    rotation: 0
  },
  timers: {
    autoFireTimer: Timer.create(autoFireSpeed),
    flipFlopTimer: Timer.create(flipFlopTime, {
      disabled: true
    })
  },
  fireMode: FIRE_MODE_ALTERNATE,
  shootAlternate: false,
  fireRenderAlternate: false,
  playerBullets: [],
  inputState: {
    up: false,
    down: false,
    left: false,
    right: false,
    fire: false,
    pause: false,
    flip: 0,
    flop: 0,
    x: 0,
    y: 0,
    rawX: 0,
    rawY: 0,
    mouseX: 0,
    mouseY: 0
  },
  targets: []
};
gameState.targets.push(new Target1([-300, 600], [1, 0, 0], 100));
gameState.targets.push(new Target2([-150, 550], [1, 1, 0], 100));
gameState.targets.push(new Target1([0, 500], [0, 1, 0], 100));
gameState.targets.push(new Target2([150, 550], [0, 1, 1], 100));
gameState.targets.push(new Target1([300, 600], [0, 0, 1], 100));
gameState.targets.push(new Target2([0, 750], [1, 0, 1], 100));
playerSprite = new Sprite('/assets/player-sprite.png', [100, 120], 24);
playerSpriteSize = [70, 80];
render = function(Δt, t){
  var p, playerColor, i$, ref$, len$, target, len, bullet;
  p = Timer.getProgress(this.timers.flipFlopTimer);
  playerColor = rgb(this.player.flipping
    ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color + 1)])
    : this.player.flopping
      ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color - 1)])
      : colors[this.player.color]);
  mainCanvas.clear(t);
  mainCanvas.drawOrigin();
  mainCanvas.drawLocalGrid();
  for (i$ = 0, len$ = (ref$ = this.targets).length; i$ < len$; ++i$) {
    target = ref$[i$];
    target.draw(mainCanvas);
  }
  len = randomRange(5, 50);
  mainCanvas.rect(v2.add(this.player.pos, [0, -500]), [3, 1000], {
    color: playerColor
  });
  mainCanvas.sprite(playerSprite, this.player.pos, playerSpriteSize);
  mainCanvas.dntri(v2.add(this.player.pos, [0, -28 - len / 2]), [20, len], {
    color: playerColor
  });
  for (i$ = 0, len$ = (ref$ = this.playerBullets).length; i$ < len$; ++i$) {
    bullet = ref$[i$];
    bullet.draw(mainCanvas);
    mainCanvas.strokeCircle(bullet.pos, bullet.radius, {
      color: 'white'
    });
  }
  debugVis.clear();
  return debugVis.render(gameState, flipflopper, Δt, t);
};
update = function(Δt, t){
  var event, type, value, inputVec, normalVec, θ, α, mag, playerVel, i$, ref$, len$, target, newFireMode, fireTimerFactor, colorSum, this$ = this;
  Tween.updateAll(Δt);
  Timer.updateAndCarry(this.timers.autoFireTimer, Δt);
  input.update(Δt, t);
  while (event = input.pendingEvents.shift()) {
    type = event[0], value = event[1];
    switch (type) {
    case INPUT_FIRE:
      if (this.inputState.fire !== value) {
        this.inputState.fire = value;
        if (value) {
          shoot();
          if (this.fireMode === FIRE_MODE_ALTERNATE) {
            Timer.reset(this.timers.autoFireTimer, autoFireSpeed * (this.fireMode === FIRE_MODE_ALTERNATE ? 1 : 2));
          }
        }
      }
      break;
    case INPUT_RAW_X:
      this.inputState.rawX = value;
      break;
    case INPUT_RAW_Y:
      this.inputState.rawY = value;
      break;
    case INPUT_PAUSE:
      if (value) {
        frameDriver.toggle();
      }
      break;
    case INPUT_SUPER:
      if (value) {
        superShoot();
      }
      break;
    case INPUT_FLIP:
      if (this.inputState.flip < value) {
        flipflopper.staticToStage(-1, value);
      } else if (this.inputState.flip > value) {
        flipflopper.staticToStage(-1, value);
      }
      this.inputState.flip = value;
      break;
    case INPUT_FLOP:
      if (this.inputState.flop < value) {
        flipflopper.staticToStage(1, value);
      } else if (this.inputState.flop > value) {
        flipflopper.staticToStage(1, value);
      }
      this.inputState.flop = value;
    }
  }
  inputVec = [this.inputState.rawX, this.inputState.rawY];
  normalVec = inputVec[1] > 0
    ? v2.norm(inputVec)
    : (θ = Math.atan2(-this.inputState.rawY, Math.abs(this.inputState.rawX)), α = tau / 2 - tau / 8, mag = sin(α) / sin(α - θ), v2.scale(v2.norm(inputVec), mag));
  this.inputState.x = normalVec[0];
  this.inputState.y = normalVec[1];
  playerVel = v2.scale(normalVec, maxSpeed);
  this.player.pos[0] += playerVel[0] * Δt;
  this.player.pos[1] += playerVel[1] * Δt;
  this.player.pos[1] += autoTravelSpeed * Δt;
  for (i$ = 0, len$ = (ref$ = this.targets).length; i$ < len$; ++i$) {
    target = ref$[i$];
    target.pos[1] += autoTravelSpeed * Δt;
  }
  this.player.rotation = flipflopper.rotation;
  this.player.color = rotationToColor(this.player.rotation);
  playerSprite.index = rotationToSpriteIndex(this.player.rotation, playerSprite.frames);
  debugVis.pushRotationHistory(this.player.rotation);
  if (gameState.player.color % 3 === 1) {
    newFireMode = FIRE_MODE_BLEND;
    fireTimerFactor = 2;
  } else {
    newFireMode = FIRE_MODE_ALTERNATE;
    fireTimerFactor = 1;
  }
  this.timers.autoFireTimer.target = autoFireSpeed * fireTimerFactor;
  if (newFireMode === FIRE_MODE_ALTERNATE) {
    if (this.timers.autoFireTimer.elapsed && this.inputState.fire) {
      shoot();
    }
  }
  if (this.fireMode !== newFireMode) {
    if (newFireMode === FIRE_MODE_ALTERNATE) {
      Timer.reset(this.timers.autoFireTimer);
    }
  }
  this.fireMode = newFireMode;
  this.playerBullets = this.playerBullets.filter(function(it){
    return it.update(Δt);
  });
  colorSum = function(color){
    return color[0] + color[1] + color[2];
  };
  this.targets = this.targets.filter(function(target, i){
    var i$, ref$, len$, bullet, dist, targetValue, bulletValue, additiveBonus, damageBonus, damage;
    for (i$ = 0, len$ = (ref$ = this$.playerBullets).length; i$ < len$; ++i$) {
      bullet = ref$[i$];
      dist = v2.dist(target.pos, bullet.pos);
      if (dist <= target.radius + bullet.radius) {
        targetValue = colorSum(target.color);
        bulletValue = colorSum(bullet.color);
        additiveBonus = colorSum([target.color[0] * bullet.color[0], target.color[1] * bullet.color[1], target.color[2] * bullet.color[2]]);
        damageBonus = additiveBonus / targetValue * bulletValue;
        damage = (1 + damageBonus) * bullet.power;
        target.damage(damage);
        bullet.life = 0;
      }
    }
    return target.health >= 0;
  });
  this.cameraPos[1] = this.player.pos[1] + 200;
  if (this.cameraPos[0] - this.player.pos[0] > cameraDriftLimit) {
    this.cameraPos[0] -= this.cameraPos[0] - this.player.pos[0] - cameraDriftLimit;
  }
  if (this.player.pos[0] - this.cameraPos[0] > cameraDriftLimit) {
    return this.cameraPos[0] += this.player.pos[0] - this.cameraPos[0] - cameraDriftLimit;
  }
};
global.frameDriver = new FrameDriver;
frameDriver.onFrame(render.bind(gameState));
frameDriver.onTick(update.bind(gameState));
frameDriver.start();
mainCanvas.install(document.body);
debugVis.install(document.body);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./blitter":1,"./bullet":2,"./common":3,"./debug":7,"./ease":10,"./flipflopper":11,"./frame-driver":12,"./global":13,"./input":17,"./sprite":19,"./target":21,"./timer":22,"./tween":23,"std":20}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, min, max, sin, cos, tau, AutomatedController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, min = ref$.min, max = ref$.max, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
out$.AutomatedController = AutomatedController = (function(){
  AutomatedController.displayName = 'AutomatedController';
  var radius, limit, prototype = AutomatedController.prototype, constructor = AutomatedController;
  radius = 1.5;
  limit = function(it){
    return max(-1.5, min(1.5, it));
  };
  function AutomatedController(callback){
    this.callback = callback != null ? callback : id;
    this.state = {
      buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      axes: [0, 0, 0, 0]
    };
  }
  prototype.proxyEvent = function(binding, value){
    return this.callback(binding, value);
  };
  prototype.update = function(Δt, t){
    t = 2 * t;
    this.proxyEvent(INPUT_X, limit(sin(t)));
    this.proxyEvent(INPUT_Y, limit(cos(t)));
    this.proxyEvent(INPUT_RAW_X, limit(sin(t) * radius));
    return this.proxyEvent(INPUT_RAW_Y, limit(cos(t) * radius));
  };
  return AutomatedController;
}());



},{"std":20}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, BUTTON_A, BUTTON_B, BUTTON_X, BUTTON_Y, LEFT_TRIGGER, RIGHT_TRIGGER, LEFT_BUMPER, RIGHT_BUMPER, BUTTON_SELECT, BUTTON_START, LEFT_STICK_CLICK, RIGHT_STICK_CLICK, DPAD_TOP, DPAD_BOTTOM, DPAD_LEFT, DPAD_RIGHT, LEFT_STICK_X, LEFT_STICK_Y, RIGHT_STICK_X, RIGHT_STICK_Y, x$, keyBindings, y$, axisBindings, GamepadController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
BUTTON_A = 0;
BUTTON_B = 1;
BUTTON_X = 2;
BUTTON_Y = 3;
LEFT_TRIGGER = 6;
RIGHT_TRIGGER = 7;
LEFT_BUMPER = 4;
RIGHT_BUMPER = 5;
BUTTON_SELECT = 8;
BUTTON_START = 9;
LEFT_STICK_CLICK = 10;
RIGHT_STICK_CLICK = 11;
DPAD_TOP = 12;
DPAD_BOTTOM = 13;
DPAD_LEFT = 14;
DPAD_RIGHT = 15;
LEFT_STICK_X = 0;
LEFT_STICK_Y = 1;
RIGHT_STICK_X = 2;
RIGHT_STICK_Y = 3;
x$ = keyBindings = new Map;
x$.set(BUTTON_B, INPUT_FIRE);
x$.set(BUTTON_A, INPUT_SUPER);
x$.set(BUTTON_Y, INPUT_SPECIAL);
x$.set(LEFT_TRIGGER, INPUT_FLIP);
x$.set(RIGHT_TRIGGER, INPUT_FLOP);
x$.set(BUTTON_START, INPUT_PAUSE);
y$ = axisBindings = new Map;
y$.set(LEFT_STICK_X, INPUT_X);
y$.set(LEFT_STICK_Y, INPUT_Y);
out$.GamepadController = GamepadController = (function(){
  GamepadController.displayName = 'GamepadController';
  var prototype = GamepadController.prototype, constructor = GamepadController;
  function GamepadController(callback){
    this.callback = callback != null ? callback : id;
    this.state = {
      buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      axes: [0, 0, 0, 0]
    };
  }
  prototype.proxyEvent = function(value, binding){
    return this.callback(binding, value);
  };
  prototype.update = function(Δt){
    var gamepad, i$, ref$, len$, which, button, raw, dead, value, results$ = [];
    gamepad = navigator.getGamepads()[0];
    if (gamepad) {
      for (i$ = 0, len$ = (ref$ = gamepad.buttons).length; i$ < len$; ++i$) {
        which = i$;
        button = ref$[i$];
        if (button.value !== this.state.buttons[which]) {
          log(which);
          log(keyBindings.get(which));
          this.proxyEvent(button.value, keyBindings.get(which));
          this.state.buttons[which] = button.value;
        }
      }
      for (i$ = 0, len$ = (ref$ = gamepad.axes).length; i$ < len$; ++i$) {
        which = i$;
        raw = ref$[i$];
        dead = -GAMEPAD_AXIS_DEADZONE < raw && raw < GAMEPAD_AXIS_DEADZONE;
        value = dead ? 0 : raw;
        value = which === LEFT_STICK_Y ? -value : value;
        if (value !== this.state.axes[which]) {
          this.proxyEvent(value, axisBindings.get(which));
          results$.push(this.state.axes[which] = value);
        }
      }
      return results$;
    }
  };
  return GamepadController;
}());



},{"std":20}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, GamepadController, KeyboardController, AutomatedController, Input, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
GamepadController = require('./gamepad').GamepadController;
KeyboardController = require('./keyboard').KeyboardController;
AutomatedController = require('./automated').AutomatedController;
out$.Input = Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.pushEvent = bind$(this, 'pushEvent', prototype);
    this.pendingEvents = [];
    this.keyboard = new KeyboardController(this.pushEvent);
    this.gamepad = new GamepadController(this.pushEvent);
    this.auto = new AutomatedController(this.pushEvent);
  }
  prototype.update = function(Δt, t){
    this.keyboard.update(Δt, t);
    return this.gamepad.update(Δt, t);
  };
  prototype.pushEvent = function(type, value){
    return this.pendingEvents.push([type, value]);
  };
  return Input;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"../timer":22,"./automated":15,"./gamepad":16,"./keyboard":18,"std":20}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, ENTER, SPACE, ESCAPE, KEY_A, KEY_C, KEY_D, KEY_E, KEY_Q, KEY_S, KEY_W, KEY_X, KEY_Z, LEFT, RIGHT, UP, DOWN, TRIGGER_DIR_STABLE, TRIGGER_DIR_PRESS, TRIGGER_DIR_RELEASE, KeyboardController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
ENTER = 13;
SPACE = 32;
ESCAPE = 27;
KEY_A = 65;
KEY_C = 67;
KEY_D = 68;
KEY_E = 69;
KEY_Q = 81;
KEY_S = 83;
KEY_W = 87;
KEY_X = 88;
KEY_Z = 90;
LEFT = 37;
RIGHT = 39;
UP = 38;
DOWN = 40;
TRIGGER_DIR_STABLE = Symbol('trigger-direction-stable');
TRIGGER_DIR_PRESS = Symbol('trigger-direction-press');
TRIGGER_DIR_RELEASE = Symbol('trigger-direction-release');
out$.KeyboardController = KeyboardController = (function(){
  KeyboardController.displayName = 'KeyboardController';
  var simulatedTravelTime, prototype = KeyboardController.prototype, constructor = KeyboardController;
  simulatedTravelTime = 0.05 * 2;
  function KeyboardController(callback){
    this.callback = callback != null ? callback : id;
    this.simTriggers = [
      {
        type: INPUT_FLIP,
        dir: TRIGGER_DIR_STABLE,
        value: 0,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }, {
        type: INPUT_FLOP,
        value: 0,
        dir: TRIGGER_DIR_STABLE,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }
    ];
    this.cursorState = {
      up: false,
      down: false,
      left: false,
      right: false
    };
    document.addEventListener('keydown', this.handleKey(true));
    document.addEventListener('keyup', this.handleKey(false));
  }
  prototype.proxyEvent = function(type, value){
    return this.callback(type, value);
  };
  prototype.update = function(Δt){
    var i$, ref$, len$, trigger, p, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.simTriggers).length; i$ < len$; ++i$) {
      trigger = ref$[i$];
      Timer.updateAndStop(trigger.timer, Δt);
      p = trigger.timer.current / simulatedTravelTime;
      if (trigger.value !== p) {
        if (trigger.dir === TRIGGER_DIR_RELEASE) {
          this.proxyEvent(trigger.type, trigger.timer.target / simulatedTravelTime - p);
        } else {
          this.proxyEvent(trigger.type, p);
        }
      }
      if (trigger.elapsed && trigger.dir === TRIGGER_DIR_RELEASE) {
        trigger.dir = TRIGGER_DIRECTION_STABLE;
      }
      results$.push(trigger.value = p);
    }
    return results$;
  };
  prototype.handleKey = function(dir){
    var this$ = this;
    return function(event){
      var which;
      which = event.which;
      if (event.shiftKey) {
        log(which);
      }
      if (!this$.dispatchKeyResponse(dir, which)) {
        return event;
      }
      event.preventDefault();
      return false;
    };
  };
  prototype.dispatchKeyResponse = function(dir, which){
    switch (which) {
    case KEY_Z:
      return this.simulateTrigger(0, dir, 1);
    case KEY_C:
      return this.simulateTrigger(1, dir, 1);
    case KEY_A:
      return this.simulateTrigger(0, dir, 0.5);
    case KEY_D:
      return this.simulateTrigger(1, dir, 0.5);
    case KEY_S:
      return this.proxyEvent(INPUT_FIRE, dir);
    case KEY_X:
      return this.proxyEvent(INPUT_FIRE, dir);
    case KEY_W:
      return this.proxyEvent(INPUT_SUPER, dir);
    case UP:
      return this.cursorVelocityY('up', dir);
    case DOWN:
      return this.cursorVelocityY('down', dir);
    case LEFT:
      return this.cursorVelocityX('left', dir);
    case RIGHT:
      return this.cursorVelocityX('right', dir);
    case ESCAPE:
      return this.proxyEvent(INPUT_PAUSE, dir ? frameDriver.toggle() : void 8);
    }
  };
  prototype.cursorVelocityX = function(key, dir){
    var value;
    this.cursorState[key] = dir;
    value = this.cursorState.right - this.cursorState.left;
    this.proxyEvent(INPUT_RAW_X, value);
    return this.proxyEvent(INPUT_X, value);
  };
  prototype.cursorVelocityY = function(key, dir){
    var value;
    this.cursorState[key] = dir;
    value = this.cursorState.up - this.cursorState.down;
    this.proxyEvent(INPUT_RAW_Y, value);
    return this.proxyEvent(INPUT_Y, value);
  };
  prototype.simulate = function(trigger, target, dir){
    var direction;
    direction = dir ? TRIGGER_DIR_PRESS : TRIGGER_DIR_RELEASE;
    trigger.timer.target = target;
    if (direction !== trigger.dir) {
      if (trigger.timer.active) {
        trigger.timer.current = trigger.timer.target - trigger.timer.current;
      } else {
        Timer.reset(trigger.timer);
      }
      return trigger.dir = direction;
    }
  };
  prototype.simulateTrigger = function(side, dir, mult){
    mult == null && (mult = 2);
    return this.simulate(this.simTriggers[side], simulatedTravelTime * mult, dir);
  };
  return KeyboardController;
}());



},{"../timer":22,"std":20}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Sprite = Sprite = (function(){
  Sprite.displayName = 'Sprite';
  var prototype = Sprite.prototype, constructor = Sprite;
  function Sprite(src, arg$, frames){
    var width, height, image;
    width = arg$[0], height = arg$[1];
    image = new Image;
    image.width = width * frames;
    image.height = height;
    image.src = src;
    this.index = 0;
    this.width = width;
    this.height = height;
    this.image = image;
    this.frames = frames;
  }
  prototype.blitTo = function(ctx){};
  return Sprite;
}());



},{"std":20}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, raf, lerp, floor, sqrt, abs, min, sin, cos, max, asin, v2, box, rnd, div, pi, tau, flip, delay, limit, wrap, randomFrom, randomRange, ids, idd, base64, padTwo, hex, rgb, ease, physics, dampen, colorLog, redLog, greenLog, sfx, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.raf = raf = window.requestAnimationFrame;
out$.lerp = lerp = function(a, t, b){
  return a + t * (b - a);
};
out$.floor = floor = Math.floor;
out$.sqrt = sqrt = Math.sqrt;
out$.abs = abs = Math.abs;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.max = max = Math.max;
out$.asin = asin = Math.asin;
out$.v2 = v2 = {
  hyp: function(v){
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  },
  norm: function(v){
    var d;
    d = v2.hyp(v);
    if (d === 0) {
      return [0, 0];
    } else {
      return [v[0] / d, v[1] / d];
    }
  },
  add: function(a, b){
    return [a[0] + b[0], a[1] + b[1]];
  },
  sub: function(a, b){
    return [a[0] - b[0], a[1] - b[1]];
  },
  scale: function(v, f){
    return [v[0] * f, v[1] * f];
  },
  dist: function(a, b){
    return sqrt(v2.dist2(a, b));
  },
  dist2: function(a, b){
    var x, y;
    x = [b[0] - a[0]];
    y = [b[1] - a[1]];
    return x * x + y * y;
  }
};
out$.box = box = function(n){
  return [n, n];
};
out$.rnd = rnd = function(n){
  return n * Math.random();
};
out$.div = div = function(a, b){
  return floor(a / b);
};
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.limit = limit = curry$(function(min, max, n){
  if (n < min) {
    return min;
  } else if (n > max) {
    return max;
  } else {
    return n;
  }
});
out$.wrap = wrap = curry$(function(min, max, n){
  if (n < min) {
    return max;
  } else if (n > max) {
    return min;
  } else {
    return n;
  }
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(Math.random() * xs.length)];
};
out$.randomRange = randomRange = function(a, b){
  return a + rnd(b - a);
};
out$.ids = ids = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it * it;
  }
};
out$.idd = idd = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it;
  }
};
out$.base64 = base64 = function(buffer, output){
  var bytes, i$, to$, i;
  output == null && (output = "");
  bytes = new Uint8Array(buffer);
  for (i$ = 0, to$ = bytes.byteLength; i$ <= to$; ++i$) {
    i = i$;
    output += String.fromCharCode(bytes[i]);
  }
  return window.btoa(output);
};
out$.padTwo = padTwo = function(str){
  if (str.length < 2) {
    return "0" + str;
  } else {
    return str;
  }
};
out$.hex = hex = function(decimal){
  return padTwo(floor(decimal).toString(16));
};
out$.rgb = rgb = function(arg$){
  var r, g, b;
  r = arg$[0], g = arg$[1], b = arg$[2];
  return "#" + hex(r * 255) + hex(g * 255) + hex(b * 255);
};
out$.lerp = lerp = function(t, a, b){
  return a + t * (b - a);
};
out$.ease = ease = function(t, a, b, λ){
  return a + λ(t) * (b - a);
};
out$.physics = physics = function(o, Δt){
  var f, that;
  f = (that = o.friction) ? that : 1;
  o.vel = v2.scale(v2.add(v2.scale(o.acc, Δt), o.vel), f);
  return o.pos = v2.add(v2.add(v2.scale(o.vel, Δt), o.pos), v2.scale(o.acc, 0.5 * Δt * Δt));
};
out$.dampen = dampen = function(o, damp, Δt){
  o.vel = v2.scale(o.vel, damp);
  return o.pos = v2.add(v2.scale(o.vel, Δt), o.pos);
};
colorLog = function(col){
  return function(text){
    var rest;
    rest = slice$.call(arguments, 1);
    return log.apply(null, ['%c' + text, "color: " + col].concat(slice$.call(rest)));
  };
};
redLog = colorLog('#e42');
greenLog = colorLog('#1d3');
out$.sfx = sfx = colorLog('#28e');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, Target1, Target2, Target3, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb;
out$.Target1 = Target1 = (function(){
  Target1.displayName = 'Target1';
  var prototype = Target1.prototype, constructor = Target1;
  function Target1(pos, color){
    this.pos = [pos[0], pos[1]];
    this.vel = [0, 0];
    this.size = [90, 90];
    this.health = 100;
    this.alive = true;
    this.color = color;
    this.radius = 30;
  }
  prototype.damage = function(amount){
    this.health -= amount;
    return this.alive = this.health <= 0;
  };
  prototype.draw = function(canvas){
    canvas.dntri(this.pos, this.size, {
      color: rgb(this.color)
    });
    return canvas.strokeCircle(this.pos, this.radius, {
      color: 'white'
    });
  };
  prototype.update = function(Δt){};
  return Target1;
}());
out$.Target2 = Target2 = (function(superclass){
  var prototype = extend$((import$(Target2, superclass).displayName = 'Target2', Target2), superclass).prototype, constructor = Target2;
  function Target2(pos, color){
    Target2.superclass.apply(this, arguments);
    this.size = [150, 150];
    this.health = 250;
    this.radius = 50;
  }
  return Target2;
}(Target1));
out$.Target3 = Target3 = (function(superclass){
  var prototype = extend$((import$(Target3, superclass).displayName = 'Target3', Target3), superclass).prototype, constructor = Target3;
  function Target3(pos, color){
    Target3.superclass.apply(this, arguments);
    this.size = [300, 300];
    this.health = 500;
    this.radius = 90;
  }
  return Target3;
}(Target1));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":20}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, create, updateAndStop, updateAndCarry, getProgress, reset, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.create = create = function(target, arg$){
  var disabled, ref$;
  disabled = (ref$ = (arg$ != null
    ? arg$
    : {}).disabled) != null ? ref$ : false;
  return {
    target: target,
    current: 0,
    elapsed: false,
    active: !disabled
  };
};
out$.updateAndStop = updateAndStop = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.current = timer.target;
      timer.elapsed = true;
      return timer.active = false;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  } else {
    return timer.elapsed = false;
  }
};
out$.updateAndCarry = updateAndCarry = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.elapsed = true;
      return timer.current = (timer.current + Δt) % timer.target;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  }
};
out$.getProgress = getProgress = function(timer){
  return timer.current / timer.target;
};
out$.reset = reset = function(timer, target){
  target == null && (target = 0);
  if (target) {
    timer.target = target;
  }
  timer.current = 0;
  timer.elapsed = false;
  return timer.active = true;
};



},{"std":20}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Tween, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Tween = Tween = (function(){
  Tween.displayName = 'Tween';
  var allTweens, prototype = Tween.prototype, constructor = Tween;
  allTweens = [];
  function Tween(arg$){
    var ref$;
    this.from = (ref$ = arg$.from) != null ? ref$ : 0, this.to = (ref$ = arg$.to) != null ? ref$ : 1, this['in'] = (ref$ = arg$['in']) != null ? ref$ : 1, this['with'] = (ref$ = arg$['with']) != null
      ? ref$
      : Ease.Linear;
    this.time = 0;
    this.range = this.to - this.from;
    this.elapsed = false;
    this.active = true;
    allTweens.push(this);
  }
  prototype.update = function(Δt){
    this.time += Δt;
    if (this.time >= this['in']) {
      this.time = this['in'];
      this.elapsed = true;
      this.active = false;
    }
    this.value = this.from + this.range * this['with'](this.time / this['in']);
    return !this.elapsed;
  };
  Tween.updateAll = function(Δt){
    return allTweens = allTweens.filter(function(it){
      return it.update(Δt);
    });
  };
  Tween.Null = {
    elapsed: false,
    active: false,
    value: 0
  };
  return Tween;
}());



},{"std":20}]},{},[14])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
