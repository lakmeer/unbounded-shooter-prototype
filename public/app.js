(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var modeToOperation, localGridSize, localGridFidelity, cameraFrustrumSize, cameraAspect, prototype = Blitter.prototype, constructor = Blitter;
  modeToOperation = function(mode){
    switch (mode) {
    case MODE_NORMAL:
      return 'source-over';
    case MODE_COLOR:
      return 'hue';
    case MODE_ADD:
      return 'lighten';
    default:
      return 'source-over';
    }
  };
  localGridSize = 500;
  localGridFidelity = 100;
  cameraFrustrumSize = [500, 750];
  cameraAspect = 1.5;
  function Blitter(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.setSize([window.innerWidth, window.innerHeight]);
  }
  prototype.setSize = function(size){
    if (size[0] > size[1]) {
      this.w = this.canvas.width = size[1] / cameraAspect;
      this.h = this.canvas.height = size[1];
    } else {
      this.w = this.canvas.width = size[0];
      this.h = this.canvas.height = size[0] * cameraAspect;
    }
    this.wf = this.w / cameraFrustrumSize[0];
    return this.hf = this.h / cameraFrustrumSize[1];
  };
  prototype.translatePos = function(arg$){
    var x, y;
    x = arg$[0], y = arg$[1];
    return [this.w / 2 + (x - gameState.cameraPos[0]) * this.wf, this.h / 2 - (y - gameState.cameraPos[1]) * this.hf];
  };
  prototype.translateSize = function(arg$){
    var w, h;
    w = arg$[0], h = arg$[1];
    return [w * this.wf, h * this.hf];
  };
  prototype.circle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype.rect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(x - w / 2, y - h / 2, w, h);
  };
  prototype.line = function(start, end){
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this._line(this.ctx, start, end);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype._line = function(start, end){
    var ref$, x1, y1, x2, y2;
    ref$ = this.translatePos(start), x1 = ref$[0], y1 = ref$[1];
    ref$ = this.translatePos(end), x2 = ref$[0], y2 = ref$[1];
    this.ctx.moveTo(x1, y1);
    return this.ctx.lineTo(x2, y2);
  };
  prototype.uptri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._uptri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._uptri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x + 0, y - h / 2);
    return this.ctx.lineTo(x - w / 2, y + h / 2);
  };
  prototype.dntri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._dntri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._dntri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y - h / 2);
    this.ctx.lineTo(x + w / 2, y - h / 2);
    this.ctx.lineTo(x + 0, y + h / 2);
    return this.ctx.lineTo(x - w / 2, y - h / 2);
  };
  prototype.clear = function(){
    this.ctx.clearRect(0, 0, this.w, this.h);
    this.ctx.globalAlpha = 1;
    return this.ctx.globalCompositeOperation = modeToOperation(MODE_NORMAL);
  };
  prototype.drawOrigin = function(){
    var ref$, cx, cy;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    this.ctx.strokeStyle = '#0f0';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this._line([0, cy - 1000], [0, cy + 1000]);
    this._line([cx - 1000, 0], [cx + 1000, 0]);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.drawLocalGrid = function(){
    var ref$, cx, cy, nx, ny, lgs, i$, step$, to$, i;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    nx = cx - cx % localGridFidelity;
    ny = cy - cy % localGridFidelity;
    lgs = localGridSize / 2;
    this.ctx.beginPath();
    this.ctx.globalAlpha = 0.4;
    for (i$ = nx - lgs, to$ = nx + lgs, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([i, cy - lgs], [i, cy + lgs]);
    }
    for (i$ = ny - lgs, to$ = ny + lgs, step$ = localGridFidelity; step$ < 0 ? i$ > to$ : i$ < to$; i$ += step$) {
      i = i$;
      this._line([cx - lgs, i + localGridFidelity], [cx + lgs, i + localGridFidelity]);
    }
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Blitter;
}());



},{"std":9}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var create, draw, out$ = typeof exports != 'undefined' && exports || this;
out$.create = create = function(pos, color){
  return {
    pos: [pos[0], pos[1]],
    vel: [0, 3000],
    size: [100, 300],
    life: 1,
    Δlife: 1,
    color: color,
    alpha: 1
  };
};
out$.draw = draw = function(canvas, arg$){
  var pos, size, alpha, color, life, topSize, btmSize, topPos, btmPos;
  pos = arg$.pos, size = arg$.size, alpha = arg$.alpha, color = arg$.color, life = arg$.life;
  topSize = [size[0], size[1] * 1 / 4];
  btmSize = [size[0], size[1] * 3 / 4];
  topPos = [pos[0], pos[1] + size[1] * 3 / 8];
  btmPos = [pos[0], pos[1] - size[1] * 1 / 8];
  canvas.uptri(topPos, topSize, {
    color: color,
    alpha: alpha * life,
    mode: MODE_COLOR
  });
  return canvas.dntri(btmPos, btmSize, {
    color: color,
    alpha: alpha * life,
    mode: MODE_COLOR
  });
};



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Linear, Power2, Power3, Power4, PowerOut2, PowerOut3, PowerOut4, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Linear = Linear = function(n){
  return n;
};
out$.Power2 = Power2 = function(n){
  return n * n;
};
out$.Power3 = Power3 = function(n){
  return n * n * n;
};
out$.Power4 = Power4 = function(n){
  return n * n * n * n;
};
out$.PowerOut2 = PowerOut2 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m;
};
out$.PowerOut3 = PowerOut3 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m;
};
out$.PowerOut4 = PowerOut4 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m * m;
};



},{"std":9}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, lerp, Tween, FlipFlopper, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, lerp = ref$.lerp;
Tween = require('./tween').Tween;
out$.FlipFlopper = FlipFlopper = (function(){
  FlipFlopper.displayName = 'FlipFlopper';
  var MODE_IDLE, MODE_COCKING, MODE_COCKED, MODE_UNCOCKING, MODE_REVERSING, dSym, stageStep, stageToRotation, normaliseStage, normaliseRotation, prototype = FlipFlopper.prototype, constructor = FlipFlopper;
  MODE_IDLE = Symbol('idle');
  MODE_COCKING = Symbol('cocking');
  MODE_COCKED = Symbol('cocked');
  MODE_UNCOCKING = Symbol('uncocking');
  MODE_REVERSING = Symbol('reversing');
  dSym = function(n){
    return ['FLIP', 'IDLE', 'FLOP'][n + 1];
  };
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(θ){
    if (θ < 0) {
      return tau - -θ % tau;
    } else {
      return θ % tau;
    }
  };
  function FlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.θ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    this.reverseTrigger = 0;
    this.ignoredTrigger = 0;
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    if (this.reverseTrigger === d) {
      if (p === 0) {
        this.reverseTrigger = 0;
        this.cockDirection = 0;
        log('revert-release:', dSym(d));
      } else {
        log('revert:', dSym(d));
      }
      return;
    }
    if (this.ignoredTrigger === d) {
      if (p === 0) {
        this.ignoredTrigger = 0;
        this.cockDirection = 0;
        log('ignore-release:', dSym(d));
      } else {
        log('ignore:', dSym(d));
      }
      return;
    }
    switch (this.mode) {
    case MODE_IDLE:
      this.mode = MODE_COCKING;
      this.cockDirection = d;
      return this.cock.apply(this, arguments);
    case MODE_COCKING:
      if (this.cockDirection === d) {
        return this.cock.apply(this, arguments);
      } else {
        this.cockDirection = d;
        this.ignoredTrigger = d * -1;
        return this.cock.apply(this, arguments);
      }
      break;
    case MODE_COCKED:
      if (this.cockDirection === d) {
        this.mode = MODE_UNCOCKING;
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_UNCOCKING:
      if (this.cockDirection === d) {
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_REVERSING:
      return this.reverse.apply(this, arguments);
    }
  };
  prototype.idle = function(d){
    this.stage = normaliseStage(this.stage + d);
    this.θ = stageToRotation(this.stage);
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    return this.ignoredTrigger = 0;
  };
  prototype.cock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    this.θ = lerp(p / 2, currentRotation, targetRotation);
    if (p === 1) {
      this.mode = MODE_COCKED;
    }
    if (p === 0) {
      return this.idle(0);
    }
  };
  prototype.uncock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    if (p === 0) {
      return this.idle(d);
    } else {
      return this.θ = lerp(0.5 + (1 - p) / 2, currentRotation, targetRotation);
    }
  };
  prototype.reverse = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage);
    currentRotation = stageToRotation(this.stage - d / 2);
    this.θ = lerp(p, currentRotation, targetRotation);
    if (p === 1) {
      this.idle(0);
      this.reverseTrigger = d;
      return this.cockDirection = 0;
    }
  };
  return FlipFlopper;
}());



},{"./tween":11,"std":9}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, floor, delay, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, floor = ref$.floor, delay = ref$.delay;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var tpsHistoryWindow, fpsHistoryWindow, SHOW_READOUT, RENDER_ON_TICK, prototype = FrameDriver.prototype, constructor = FrameDriver;
  tpsHistoryWindow = 20;
  fpsHistoryWindow = 20;
  SHOW_READOUT = true;
  RENDER_ON_TICK = false;
  function FrameDriver(){
    var ref$;
    this.tick = bind$(this, 'tick', prototype);
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      lastTickTime: 0,
      lastFrameTime: 0,
      frame: 0,
      running: false
    };
    this.callbacks = {
      tick: id,
      frame: id
    };
    this.tps = {
      value: 0,
      history: repeatArray$([0], tpsHistoryWindow)
    };
    this.fps = {
      value: 0,
      history: repeatArray$([0], fpsHistoryWindow)
    };
    if (SHOW_READOUT) {
      this.readout = document.createElement('pre');
      ref$ = this.readout.style;
      ref$.position = 'absolute';
      ref$.top = 0;
      ref$.right = 0;
      document.body.appendChild(this.readout);
    }
  }
  prototype.frame = function(){
    var now, Δt;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastFrameTime;
    this.pushFrameTime(Δt);
    this.state.lastFrameTime = now;
    this.state.frame += 1;
    return this.callbacks.frame(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
  };
  prototype.tick = function(){
    var now, Δt;
    if (this.state.running) {
      delay(0, this.tick);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastTickTime;
    if (SHOW_READOUT) {
      this.readout.textContent = this.fps.value + " | " + this.tps.value;
    }
    this.pushTickTime(Δt);
    this.state.lastTickTime = now;
    this.callbacks.tick(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
    if (RENDER_ON_TICK) {
      this.pushFrameTime(Δt);
      this.state.frame += 1;
      return this.callbacks.frame(this.state.frame);
    }
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.lastTickTime = 0;
    this.state.lastFrameTime = 0;
    this.state.running = true;
    this.tick();
    if (!RENDER_ON_TICK) {
      return this.frame();
    }
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  prototype.toggle = function(){
    if (this.state.running) {
      return this.stop();
    } else {
      return this.start();
    }
  };
  prototype.pushTickTime = function(Δt){
    this.tps.history.push(Δt);
    this.tps.history.shift();
    return this.tps.value = floor(1000 * tpsHistoryWindow / this.tps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.pushFrameTime = function(Δt){
    this.fps.history.push(Δt);
    this.fps.history.shift();
    return this.fps.value = floor(1000 * fpsHistoryWindow / this.fps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.onTick = function(λ){
    return this.callbacks.tick = λ;
  };
  prototype.onFrame = function(λ){
    return this.callbacks.frame = λ;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"std":9}],6:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.MODE_COLOR = Symbol('color');
global.MODE_NORMAL = Symbol('normal');
global.MODE_ADD = Symbol('add');
global.TRIGGER_DIRECTION_STABLE = Symbol('stable');
global.TRIGGER_DIRECTION_PRESS = Symbol('press');
global.TRIGGER_DIRECTION_RELEASE = Symbol('release');



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],7:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, floor, abs, tau, sin, cos, div, v2, wrap, rgb, lerp, FrameDriver, FlipFlopper, Blitter, Input, Tween, Ease, Timer, Bullet, Canvas, SHOW_EASING_TESTS, SHOW_TWEEN_BOXES, autoTravelSpeed, maxSpeed, autoFireSpeed, dualFireSeparation, cameraDriftLimit, flipFlopTime, rotationHistoryLimit, colors, flipflopper, lerpColor, rotationToColor, diamond, colorBarrel, shoot, rotationHistory, pushRotationHistory, mainCanvas, debugCanvas, input, render, update;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor, abs = ref$.abs, tau = ref$.tau, sin = ref$.sin, cos = ref$.cos, div = ref$.div, v2 = ref$.v2;
ref$ = require('std'), wrap = ref$.wrap, rgb = ref$.rgb, lerp = ref$.lerp;
require('./global');
FrameDriver = require('./frame-driver').FrameDriver;
FlipFlopper = require('./flipflopper').FlipFlopper;
Blitter = require('./blitter').Blitter;
Input = require('./input').Input;
Tween = require('./tween').Tween;
Ease = require('./ease');
Timer = require('./timer');
Bullet = require('./bullet');
Canvas = (function(){
  Canvas.displayName = 'Canvas';
  var prototype = Canvas.prototype, constructor = Canvas;
  function Canvas(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.canvas.height = window.innerHeight;
    this.canvas.width = window.innerHeight / 1.5;
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Canvas;
}());
SHOW_EASING_TESTS = false;
SHOW_TWEEN_BOXES = false;
autoTravelSpeed = 100;
maxSpeed = 500;
autoFireSpeed = 0.08;
dualFireSeparation = 35;
cameraDriftLimit = 200;
flipFlopTime = 0.2;
rotationHistoryLimit = 200;
colors = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 0, 1], [1, 0, 0]];
flipflopper = new FlipFlopper({
  speed: 0.2
});
lerpColor = function(t, start, end){
  return [lerp(t, start[0], end[0]), lerp(t, start[1], end[1]), lerp(t, start[2], end[2])];
};
rotationToColor = function(θ){
  if (0 < θ && θ < tau) {
    return floor((θ / tau) * colors.length);
  } else {
    return 0;
  }
};
diamond = function(arg$){
  var x, y;
  x = arg$[0], y = arg$[1];
  if (x === 0) {
    return [x, y];
  } else {
    return [x / 2, y / 2];
  }
};
colorBarrel = {
  draw: function(cnv, pos, θ, r, o, m){
    r == null && (r = 75);
    o == null && (o = tau * 9 / 12);
    m == null && (m = colors.length);
    return (function(){
      var i$, ref$, len$, i, color;
      for (i$ = 0, len$ = (ref$ = colors).length; i$ < len$; ++i$) {
        i = i$;
        color = ref$[i$];
        this.fillStyle = rgb(color);
        this.beginPath();
        this.moveTo(pos[0], pos[1]);
        this.arc(pos[0], pos[1], r, -θ + tau / m * i + o, -θ + tau / m * (i + 1) + o);
        this.closePath();
        this.fill();
      }
      this.strokeStyle = 'white';
      this.beginPath();
      this.moveTo(pos[0], pos[1]);
      this.lineTo(pos[0] + r * sin(0), pos[1] - r * cos(0));
      this.closePath();
      return this.stroke();
    }.call(cnv.ctx));
  }
};
shoot = function(){
  var left, right;
  if (gameState.shootAlternate) {
    left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 150]);
    gameState.playerBullets.push(Bullet.create(left, rgb(colors[gameState.player.color])));
  } else {
    right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 150]);
    gameState.playerBullets.push(Bullet.create(right, rgb(colors[gameState.player.color])));
  }
  return gameState.shootAlternate = !gameState.shootAlternate;
};
global.gameState = {
  cameraZoom: 1,
  cameraPos: [0, 0],
  player: {
    pos: [0, 0],
    vel: [0, 0],
    flipping: false,
    flopping: false,
    color: 0,
    rotation: 0
  },
  timers: {
    autoFireTimer: Timer.create(autoFireSpeed),
    flipFlopTimer: Timer.create(flipFlopTime, {
      disabled: true
    })
  },
  shootAlternate: false,
  targetPos: [0, 500],
  playerBullets: [],
  inputState: {
    up: false,
    down: false,
    left: false,
    right: false,
    fire: false,
    pause: false,
    flip: 0,
    flop: 0,
    flipTriggerDirection: TRIGGER_DIRECTION_STABLE,
    flopTriggerDirection: TRIGGER_DIRECTION_STABLE,
    mouseX: 0,
    mouseY: 0
  }
};
rotationHistory = [];
pushRotationHistory = function(n){
  rotationHistory.push(n);
  if (rotationHistory.length >= rotationHistoryLimit) {
    return rotationHistory.shift();
  }
};
mainCanvas = new Blitter;
debugCanvas = new Canvas;
input = new Input;
render = function(Δt, t){
  var p, playerColor, sigilPos, i$, ref$, len$, bullet;
  p = Timer.getProgress(this.timers.flipFlopTimer);
  playerColor = rgb(this.player.flipping
    ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color + 1)])
    : this.player.flopping
      ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color - 1)])
      : colors[this.player.color]);
  sigilPos = v2.add(this.player.pos, [0, -8]);
  mainCanvas.clear();
  mainCanvas.drawOrigin();
  mainCanvas.drawLocalGrid();
  mainCanvas.rect(this.targetPos, [90, 90], {
    color: 'blue'
  });
  mainCanvas.uptri(this.player.pos, [50, 50], {
    color: '#ccc'
  });
  mainCanvas.circle(sigilPos, 10, {
    color: playerColor
  });
  for (i$ = 0, len$ = (ref$ = this.playerBullets).length; i$ < len$; ++i$) {
    bullet = ref$[i$];
    Bullet.draw(mainCanvas, bullet);
  }
  return (function(){
    var ref$, width, height, i$, len$, x, d, i, box, this$ = this;
    ref$ = debugCanvas.canvas, width = ref$.width, height = ref$.height;
    debugCanvas.clear();
    colorBarrel.draw(debugCanvas, [width / 2, 100], gameState.player.rotation);
    this.fillStyle = rgb(colors[gameState.player.color]);
    this.fillRect(width / 2 - 2, 10, 4, 15);
    for (i$ = 0, len$ = (ref$ = rotationHistory).length; i$ < len$; ++i$) {
      x = i$;
      d = ref$[i$];
      this.fillStyle = rgb(colors[rotationToColor(d)]);
      this.fillRect(x / rotationHistoryLimit * width, height - 10 - d * 10, 2, 2);
    }
    this.fillStyle = 'grey';
    this.fillRect(20, height / 2, 20, 50);
    this.fillRect(50, height / 2, 20, 50);
    this.fillStyle = 'white';
    this.fillRect(20, height / 2, 20, 50 * gameState.inputState.flip);
    this.fillRect(50, height / 2, 20, 50 * gameState.inputState.flop);
    if (SHOW_EASING_TESTS) {
      this.fillStyle = 'white';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Linear(i / width), 2, 2);
      }
      this.fillStyle = 'red';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power2(i / width), 2, 2);
      }
      this.fillStyle = 'orange';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power3(i / width), 2, 2);
      }
      this.fillStyle = 'yellow';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power4(i / width), 2, 2);
      }
      this.fillStyle = 'green';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut2(i / width), 2, 2);
      }
      this.fillStyle = 'cyan';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut3(i / width), 2, 2);
      }
      this.fillStyle = 'blue';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut4(i / width), 2, 2);
      }
    }
    box = function(i, s){
      this$.fillStyle = s === 0
        ? 'lightgrey'
        : s < 0 ? 'red' : '#2c2';
      return this$.fillRect(width - 50, 20 + i * 40, 30, 30);
    };
    box(0, flipflopper.cockDirection);
    box(1, flipflopper.ignoredTrigger);
    return box(2, flipflopper.reverseTrigger);
  }.call(debugCanvas.ctx));
};
update = function(Δt, t){
  var event, type, value, leftToRightVel, frontToBackVel, inputVel, playerVel;
  Tween.updateAll(Δt);
  Timer.updateAndCarry(this.timers.autoFireTimer, Δt);
  input.update(Δt);
  while (event = input.pendingEvents.shift()) {
    type = event[0], value = event[1];
    switch (type) {
    case BUTTON_FIRE:
      if (this.inputState.fire !== value) {
        this.inputState.fire = value;
        if (value === true) {
          Timer.reset(this.timers.autoFireTimer);
          shoot();
        }
      }
      break;
    case BUTTON_UP:
      this.inputState.up = value;
      break;
    case BUTTON_DOWN:
      this.inputState.down = value;
      break;
    case BUTTON_LEFT:
      this.inputState.left = value;
      break;
    case BUTTON_RIGHT:
      this.inputState.right = value;
      break;
    case TRIGGER_FLIP:
      if (this.inputState.flip < value) {
        flipflopper.staticToStage(-1, value);
      } else if (this.inputState.flip > value) {
        flipflopper.staticToStage(-1, value);
      }
      this.inputState.flip = value;
      break;
    case TRIGGER_FLOP:
      if (this.inputState.flop < value) {
        flipflopper.staticToStage(1, value);
      } else if (this.inputState.flop > value) {
        flipflopper.staticToStage(1, value);
      }
      this.inputState.flop = value;
    }
  }
  if (this.timers.autoFireTimer.elapsed && this.inputState.fire) {
    shoot();
  }
  this.playerBullets = this.playerBullets.filter(function(bullet){
    bullet.pos[1] += bullet.vel[1] * Δt;
    bullet.life -= bullet.Δlife * Δt;
    return bullet.life > 0;
  });
  this.player.pos[1] += autoTravelSpeed * Δt;
  this.targetPos[1] += autoTravelSpeed * Δt;
  leftToRightVel = this.inputState.left
    ? -1
    : this.inputState.right ? 1 : 0;
  frontToBackVel = this.inputState.down
    ? -1
    : this.inputState.up ? 1 : 0;
  inputVel = [leftToRightVel, frontToBackVel];
  if (inputVel[1] >= 0) {
    playerVel = v2.scale(v2.norm(inputVel), maxSpeed);
  } else {
    playerVel = v2.scale(diamond(inputVel), maxSpeed);
  }
  this.player.pos[0] += playerVel[0] * Δt;
  this.player.pos[1] += playerVel[1] * Δt;
  if (this.inputState.flipOn) {
    flipflopper.tweenToStage(-1);
    this.player.flipping = true;
    this.player.flopping = false;
    this.inputState.flipOn = false;
  }
  if (this.inputState.flopOn) {
    flipflopper.tweenToStage(+1);
    this.player.flipping = false;
    this.player.flopping = true;
    this.inputState.flopOn = false;
  }
  if (this.inputState.flopOff) {
    this.inputState.flopOff = false;
  }
  this.player.rotation = flipflopper.rotation;
  this.player.color = rotationToColor(this.player.rotation);
  pushRotationHistory(this.player.rotation);
  this.cameraPos[1] = this.player.pos[1] + 200;
  if (this.cameraPos[0] - this.player.pos[0] > cameraDriftLimit) {
    this.cameraPos[0] -= this.cameraPos[0] - this.player.pos[0] - cameraDriftLimit;
  }
  if (this.player.pos[0] - this.cameraPos[0] > cameraDriftLimit) {
    return this.cameraPos[0] += this.player.pos[0] - this.cameraPos[0] - cameraDriftLimit;
  }
};
global.frameDriver = new FrameDriver;
frameDriver.onFrame(render.bind(gameState));
frameDriver.onTick(update.bind(gameState));
frameDriver.start();
mainCanvas.install(document.body);
debugCanvas.install(document.body);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./blitter":1,"./bullet":2,"./ease":3,"./flipflopper":4,"./frame-driver":5,"./global":6,"./input":8,"./timer":10,"./tween":11,"std":9}],8:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, Input, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('./timer');
out$.Input = Input = (function(){
  Input.displayName = 'Input';
  var ENTER, SPACE, ESCAPE, KEY_Z, KEY_X, KEY_C, LEFT, RIGHT, UP, DOWN, TRIGGER_DIR_PRESS, TRIGGER_DIR_RELEASE, simulatedTravelTime, prototype = Input.prototype, constructor = Input;
  ENTER = 13;
  SPACE = 32;
  ESCAPE = 27;
  KEY_Z = 90;
  KEY_X = 88;
  KEY_C = 67;
  LEFT = 37;
  RIGHT = 39;
  UP = 38;
  DOWN = 40;
  TRIGGER_DIR_PRESS = Symbol('press');
  TRIGGER_DIR_RELEASE = Symbol('release');
  global.BUTTON_PAUSE = Symbol('button-pause');
  global.BUTTON_FIRE = Symbol('button-fire');
  global.BUTTON_UP = Symbol('button-up');
  global.BUTTON_LEFT = Symbol('button-left');
  global.BUTTON_DOWN = Symbol('button-down');
  global.BUTTON_RIGHT = Symbol('button-right');
  global.TRIGGER_FLIP = Symbol('trigger-flip');
  global.TRIGGER_FLOP = Symbol('trigger-flop');
  global.MOUSE_MOVE = Symbol('mouse-move');
  simulatedTravelTime = 0.05 * 10;
  function Input(){
    this.handleMouse = bind$(this, 'handleMouse', prototype);
    this.pendingEvents = [];
    this.simTriggers = [
      {
        type: TRIGGER_FLIP,
        value: 0,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        }),
        dir: TRIGGER_DIRECTION_STABLE
      }, {
        type: TRIGGER_FLOP,
        value: 0,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        }),
        dir: TRIGGER_DIRECTION_STABLE
      }
    ];
    document.addEventListener('mousemove', this.handleMouse);
    document.addEventListener('keydown', this.handleKey(true));
    document.addEventListener('keyup', this.handleKey(false));
  }
  prototype.update = function(Δt){
    var i$, ref$, len$, trigger, p, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.simTriggers).length; i$ < len$; ++i$) {
      trigger = ref$[i$];
      Timer.updateAndStop(trigger.timer, Δt);
      p = Timer.getProgress(trigger.timer);
      if (trigger.value !== p) {
        if (trigger.dir === TRIGGER_DIR_RELEASE) {
          this.pushEvent(trigger.type, 1 - p);
        } else {
          this.pushEvent(trigger.type, p);
        }
      }
      if (trigger.elapsed && trigger.dir === TRIGGER_DIR_RELEASE) {
        trigger.target = simulatedTravelTime;
        trigger.dir = TRIGGER_DIRECTION_STABLE;
      }
      results$.push(trigger.value = p);
    }
    return results$;
  };
  prototype.pushEvent = function(type, arg){
    return this.pendingEvents.push([type, arg]);
  };
  prototype.simulateTriggerMotion = function(side, dir){
    var trigger, direction;
    trigger = this.simTriggers[side];
    direction = dir ? TRIGGER_DIR_PRESS : TRIGGER_DIR_RELEASE;
    if (direction !== trigger.dir) {
      if (trigger.timer.active) {
        trigger.timer.current = trigger.timer.target - trigger.timer.current;
      } else {
        Timer.reset(trigger.timer);
      }
      return trigger.dir = direction;
    }
  };
  prototype.handleKey = function(dir){
    var this$ = this;
    return function(event){
      var which;
      which = event.which;
      if (event.shiftKey) {
        log(which);
      }
      if (!this$.dispatchKeyResponse(dir, which)) {
        return event;
      }
      event.preventDefault();
      return false;
    };
  };
  prototype.handleMouse = function(arg$){
    var pageX, pageY;
    pageX = arg$.pageX, pageY = arg$.pageY;
    return this.pushEvent(MOUSE_MOVE, [pageX / window.innerWidth, pageY / window.innerHeight]);
  };
  prototype.dispatchKeyResponse = function(dir, which){
    switch (which) {
    case KEY_Z:
      return this.simulateTriggerMotion(0, dir);
    case KEY_C:
      return this.simulateTriggerMotion(1, dir);
    case KEY_X:
      return this.pushEvent(BUTTON_FIRE, dir);
    case UP:
      return this.pushEvent(BUTTON_UP, dir);
    case LEFT:
      return this.pushEvent(BUTTON_LEFT, dir);
    case DOWN:
      return this.pushEvent(BUTTON_DOWN, dir);
    case RIGHT:
      return this.pushEvent(BUTTON_RIGHT, dir);
    case ESCAPE:
      if (dir) {
        return frameDriver.toggle();
      }
      break;
    default:
      return false;
    }
  };
  return Input;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./timer":10,"std":9}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, raf, lerp, floor, sqrt, abs, min, sin, cos, max, asin, v2, box, rnd, div, pi, tau, flip, delay, limit, wrap, z, rgb, randomFrom, randomRange, ids, idd, base64, padTwo, hex, ease, physics, dampen, colorLog, redLog, greenLog, sfx, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.raf = raf = window.requestAnimationFrame;
out$.lerp = lerp = function(a, t, b){
  return a + t * (b - a);
};
out$.floor = floor = Math.floor;
out$.sqrt = sqrt = Math.sqrt;
out$.abs = abs = Math.abs;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.max = max = Math.max;
out$.asin = asin = Math.asin;
out$.v2 = v2 = {
  hyp: function(v){
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  },
  norm: function(v){
    var d;
    d = v2.hyp(v);
    if (d === 0) {
      return [0, 0];
    } else {
      return [v[0] / d, v[1] / d];
    }
  },
  add: function(a, b){
    return [a[0] + b[0], a[1] + b[1]];
  },
  sub: function(a, b){
    return [a[0] - b[0], a[1] - b[1]];
  },
  scale: function(v, f){
    return [v[0] * f, v[1] * f];
  },
  dist: function(a, b){
    var x, y;
    x = [b[0] - a[0]];
    y = [b[1] - a[1]];
    return sqrt(x * x + y * y);
  }
};
out$.box = box = function(n){
  return [n, n];
};
out$.rnd = rnd = function(n){
  return n * Math.random();
};
out$.div = div = function(a, b){
  return floor(a / b);
};
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.limit = limit = curry$(function(min, max, n){
  if (n < min) {
    return min;
  } else if (n > max) {
    return max;
  } else {
    return n;
  }
});
out$.wrap = wrap = curry$(function(min, max, n){
  if (n < min) {
    return max;
  } else if (n > max) {
    return min;
  } else {
    return n;
  }
});
out$.z = z = function(it){
  return floor(it * 255);
};
out$.rgb = rgb = function(r, g, b){
  return "rgb(" + z(r) + "," + z(g) + "," + z(b) + ")";
};
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(Math.random() * xs.length)];
};
out$.randomRange = randomRange = function(a, b){
  return a + rnd(b - a);
};
out$.ids = ids = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it * it;
  }
};
out$.idd = idd = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it;
  }
};
out$.base64 = base64 = function(buffer, output){
  var bytes, i$, to$, i;
  output == null && (output = "");
  bytes = new Uint8Array(buffer);
  for (i$ = 0, to$ = bytes.byteLength; i$ <= to$; ++i$) {
    i = i$;
    output += String.fromCharCode(bytes[i]);
  }
  return window.btoa(output);
};
out$.padTwo = padTwo = function(str){
  if (str.length < 2) {
    return "0" + str;
  } else {
    return str;
  }
};
out$.hex = hex = function(decimal){
  return padTwo(floor(decimal).toString(16));
};
out$.rgb = rgb = function(arg$){
  var r, g, b;
  r = arg$[0], g = arg$[1], b = arg$[2];
  return "#" + hex(r * 255) + hex(g * 255) + hex(b * 255);
};
out$.lerp = lerp = function(t, a, b){
  return a + t * (b - a);
};
out$.ease = ease = function(t, a, b, λ){
  return a + λ(t) * (b - a);
};
out$.physics = physics = function(o, Δt){
  var f, that;
  f = (that = o.friction) ? that : 1;
  o.vel = v2.scale(v2.add(v2.scale(o.acc, Δt), o.vel), f);
  return o.pos = v2.add(v2.add(v2.scale(o.vel, Δt), o.pos), v2.scale(o.acc, 0.5 * Δt * Δt));
};
out$.dampen = dampen = function(o, damp, Δt){
  o.vel = v2.scale(o.vel, damp);
  return o.pos = v2.add(v2.scale(o.vel, Δt), o.pos);
};
colorLog = function(col){
  return function(text){
    var rest;
    rest = slice$.call(arguments, 1);
    return log.apply(null, ['%c' + text, "color: " + col].concat(slice$.call(rest)));
  };
};
redLog = colorLog('#e42');
greenLog = colorLog('#1d3');
out$.sfx = sfx = colorLog('#28e');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, create, updateAndStop, updateAndCarry, getProgress, reset, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.create = create = function(target, arg$){
  var disabled, ref$;
  disabled = (ref$ = (arg$ != null
    ? arg$
    : {}).disabled) != null ? ref$ : false;
  return {
    target: target,
    current: 0,
    elapsed: false,
    active: !disabled
  };
};
out$.updateAndStop = updateAndStop = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.current = timer.target;
      timer.elapsed = true;
      return timer.active = false;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  }
};
out$.updateAndCarry = updateAndCarry = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.elapsed = true;
      return timer.current = (timer.current + Δt) % timer.target;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  }
};
out$.getProgress = getProgress = function(timer){
  return timer.current / timer.target;
};
out$.reset = reset = function(timer){
  timer.current = 0;
  timer.elapsed = false;
  return timer.active = true;
};



},{"std":9}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Tween, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Tween = Tween = (function(){
  Tween.displayName = 'Tween';
  var allTweens, prototype = Tween.prototype, constructor = Tween;
  allTweens = [];
  function Tween(arg$){
    var ref$;
    this.from = (ref$ = arg$.from) != null ? ref$ : 0, this.to = (ref$ = arg$.to) != null ? ref$ : 1, this['in'] = (ref$ = arg$['in']) != null ? ref$ : 1, this['with'] = (ref$ = arg$['with']) != null
      ? ref$
      : Ease.Linear;
    this.time = 0;
    this.range = this.to - this.from;
    this.elapsed = false;
    this.active = true;
    allTweens.push(this);
  }
  prototype.update = function(Δt){
    this.time += Δt;
    if (this.time >= this['in']) {
      this.time = this['in'];
      this.elapsed = true;
      this.active = false;
    }
    this.value = this.from + this.range * this['with'](this.time / this['in']);
    return !this.elapsed;
  };
  Tween.updateAll = function(Δt){
    return allTweens = allTweens.filter(function(it){
      return it.update(Δt);
    });
  };
  Tween.Null = {
    elapsed: false,
    active: false,
    value: 0
  };
  return Tween;
}());



},{"std":9}]},{},[7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
