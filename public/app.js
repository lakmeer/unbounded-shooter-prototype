(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var modeToOperation, localGridSize, localGridFidelity, cameraFrustrumSize, cameraAspect, prototype = Blitter.prototype, constructor = Blitter;
  modeToOperation = function(mode){
    switch (mode) {
    case MODE_NORMAL:
      return 'source-over';
    case MODE_COLOR:
      return 'hue';
    case MODE_ADD:
      return 'lighten';
    default:
      return 'source-over';
    }
  };
  localGridSize = 500;
  localGridFidelity = 100;
  cameraFrustrumSize = [500, 750];
  cameraAspect = 1.5;
  function Blitter(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.setSize([window.innerWidth, window.innerHeight]);
  }
  prototype.setSize = function(size){
    if (size[0] > size[1]) {
      this.w = this.canvas.width = size[1] / cameraAspect;
      this.h = this.canvas.height = size[1];
    } else {
      this.w = this.canvas.width = size[0];
      this.h = this.canvas.height = size[0] * cameraAspect;
    }
    this.wf = this.w / cameraFrustrumSize[0];
    return this.hf = this.h / cameraFrustrumSize[1];
  };
  prototype.translatePos = function(arg$){
    var x, y;
    x = arg$[0], y = arg$[1];
    return [this.w / 2 + (x - gameState.cameraPos[0]) * this.wf, this.h / 2 - (y - gameState.cameraPos[1]) * this.hf];
  };
  prototype.translateSize = function(arg$){
    var w, h;
    w = arg$[0], h = arg$[1];
    return [w * this.wf, h * this.hf];
  };
  prototype.circle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype.rect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(x - w / 2, y - h / 2, w, h);
  };
  prototype.line = function(start, end){
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this._line(this.ctx, start, end);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype._line = function(start, end){
    var ref$, x1, y1, x2, y2;
    ref$ = this.translatePos(start), x1 = ref$[0], y1 = ref$[1];
    ref$ = this.translatePos(end), x2 = ref$[0], y2 = ref$[1];
    this.ctx.moveTo(x1, y1);
    return this.ctx.lineTo(x2, y2);
  };
  prototype.uptri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._uptri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._uptri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x + 0, y - h / 2);
    return this.ctx.lineTo(x - w / 2, y + h / 2);
  };
  prototype.dntri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._dntri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._dntri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y - h / 2);
    this.ctx.lineTo(x + w / 2, y - h / 2);
    this.ctx.lineTo(x + 0, y + h / 2);
    return this.ctx.lineTo(x - w / 2, y - h / 2);
  };
  prototype.clear = function(){
    this.ctx.clearRect(0, 0, this.w, this.h);
    this.ctx.globalAlpha = 1;
    return this.ctx.globalCompositeOperation = modeToOperation(MODE_NORMAL);
  };
  prototype.drawOrigin = function(){
    var ref$, cx, cy;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    this.ctx.strokeStyle = '#0f0';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this._line([0, cy - 1000], [0, cy + 1000]);
    this._line([cx - 1000, 0], [cx + 1000, 0]);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.drawLocalGrid = function(){
    var ref$, cx, cy, nx, ny, lgs, i$, step$, to$, i;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    nx = cx - cx % localGridFidelity;
    ny = cy - cy % localGridFidelity;
    lgs = localGridSize / 2;
    this.ctx.beginPath();
    this.ctx.globalAlpha = 0.4;
    for (i$ = nx - lgs, to$ = nx + lgs, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([i, cy - lgs], [i, cy + lgs]);
    }
    for (i$ = ny - lgs, to$ = ny + lgs, step$ = localGridFidelity; step$ < 0 ? i$ > to$ : i$ < to$; i$ += step$) {
      i = i$;
      this._line([cx - lgs, i + localGridFidelity], [cx + lgs, i + localGridFidelity]);
    }
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.sprite = function(arg$, pos, size){
    var width, height, image, index, ref$, x, y, w, h;
    width = arg$.width, height = arg$.height, image = arg$.image, index = arg$.index;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    return this.ctx.drawImage(image, index * width, 0, width, height, x - w / 2, y - h / 2, w, h);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Blitter;
}());



},{"std":11}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var create, draw, out$ = typeof exports != 'undefined' && exports || this;
out$.create = create = function(pos, vel, color){
  return {
    pos: [pos[0], pos[1]],
    vel: [0, vel],
    size: [100, 300],
    life: 1,
    Î”life: 1,
    color: color,
    alpha: 1
  };
};
out$.draw = draw = function(canvas, arg$){
  var pos, size, alpha, color, life, topSize, btmSize, topPos, btmPos;
  pos = arg$.pos, size = arg$.size, alpha = arg$.alpha, color = arg$.color, life = arg$.life;
  topSize = [size[0], size[1] * 1 / 4];
  btmSize = [size[0], size[1] * 3 / 4];
  topPos = [pos[0], pos[1] + size[1] * 3 / 8];
  btmPos = [pos[0], pos[1] - size[1] * 1 / 8];
  canvas.uptri(topPos, topSize, {
    color: color,
    alpha: alpha * life,
    mode: MODE_ADD
  });
  return canvas.dntri(btmPos, btmSize, {
    color: color,
    alpha: alpha * life,
    mode: MODE_ADD
  });
};



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mixEase, Linear, Power2, Power3, Power4, PowerOut2, PowerOut3, PowerOut4, Swing2, Swing3, Swing4, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.mixEase = mixEase = function(In, Out){
  return function(n){
    if (n < 1 / 2) {
      return 1 / 2 * In(n * 2);
    } else {
      return 1 / 2 + 1 / 2 * Out((n - 1 / 2) * 2);
    }
  };
};
out$.Linear = Linear = function(n){
  return n;
};
out$.Power2 = Power2 = function(n){
  return n * n;
};
out$.Power3 = Power3 = function(n){
  return n * n * n;
};
out$.Power4 = Power4 = function(n){
  return n * n * n * n;
};
out$.PowerOut2 = PowerOut2 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m;
};
out$.PowerOut3 = PowerOut3 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m;
};
out$.PowerOut4 = PowerOut4 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m * m;
};
out$.Swing2 = Swing2 = mixEase(Power2, PowerOut2);
out$.Swing3 = Swing3 = mixEase(Power3, PowerOut3);
out$.Swing4 = Swing4 = mixEase(Power4, PowerOut4);



},{"std":11}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, abs, lerp, Tween, Ease, mixEase, Linear, FlipFlopper, EasyFlipFlopper, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, abs = ref$.abs, lerp = ref$.lerp;
Tween = require('./tween').Tween;
ref$ = Ease = require('./ease'), mixEase = ref$.mixEase, Linear = ref$.Linear;
out$.FlipFlopper = FlipFlopper = (function(){
  FlipFlopper.displayName = 'FlipFlopper';
  var MODE_IDLE, MODE_COCKING, MODE_COCKED, MODE_UNCOCKING, MODE_REVERSING, dSym, stageStep, stageToRotation, normaliseStage, normaliseRotation, prototype = FlipFlopper.prototype, constructor = FlipFlopper;
  MODE_IDLE = Symbol('idle');
  MODE_COCKING = Symbol('cocking');
  MODE_COCKED = Symbol('cocked');
  MODE_UNCOCKING = Symbol('uncocking');
  MODE_REVERSING = Symbol('reversing');
  dSym = function(n){
    return ['FLIP', 'IDLE', 'FLOP'][n + 1];
  };
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(Î¸){
    if (Î¸ < 0) {
      return tau - -Î¸ % tau;
    } else {
      return Î¸ % tau;
    }
  };
  function FlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.Î¸ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    this.reverseTrigger = 0;
    this.ignoredTrigger = 0;
    this.triggerState = {
      flip: {
        ingore: false
      },
      flop: {
        ingore: false
      }
    };
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.Î¸);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    if (this.reverseTrigger === d) {
      if (p === 0) {
        this.reverseTrigger = 0;
        this.cockDirection = 0;
        log('revert-release:', dSym(d));
      } else {
        log('revert:', dSym(d));
      }
      return;
    }
    if (this.ignoredTrigger === d) {
      if (p === 0) {
        this.ignoredTrigger = 0;
        this.cockDirection = 0;
        log('ignore-release:', dSym(d));
      } else {
        log('ignore:', dSym(d));
      }
      return;
    }
    switch (this.mode) {
    case MODE_IDLE:
      this.mode = MODE_COCKING;
      this.cockDirection = d;
      return this.cock.apply(this, arguments);
    case MODE_COCKING:
      if (this.cockDirection === d) {
        return this.cock.apply(this, arguments);
      } else {
        this.cockDirection = d;
        this.ignoredTrigger = d * -1;
        return this.cock.apply(this, arguments);
      }
      break;
    case MODE_COCKED:
      if (this.cockDirection === d) {
        this.mode = MODE_UNCOCKING;
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_UNCOCKING:
      if (this.cockDirection === d) {
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_REVERSING:
      return this.reverse.apply(this, arguments);
    }
  };
  prototype.idle = function(d){
    this.stage = normaliseStage(this.stage + d);
    this.Î¸ = stageToRotation(this.stage);
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    return this.ignoredTrigger = 0;
  };
  prototype.cock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    this.Î¸ = lerp(Ease.PowerOut3(p) / 2, currentRotation, targetRotation);
    if (p === 1) {
      this.mode = MODE_COCKED;
    }
    if (p === 0) {
      return this.idle(0);
    }
  };
  prototype.uncock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    if (p === 0) {
      return this.idle(d);
    } else {
      return this.Î¸ = lerp(0.5 + (1 - Ease.Power3(p)) / 2, currentRotation, targetRotation);
    }
  };
  prototype.reverse = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage);
    currentRotation = stageToRotation(this.stage - d / 2);
    this.Î¸ = lerp(p, currentRotation, targetRotation);
    if (p === 1) {
      this.idle(0);
      this.reverseTrigger = d;
      return this.cockDirection = 0;
    }
  };
  return FlipFlopper;
}());
out$.EasyFlipFlopper = EasyFlipFlopper = (function(){
  EasyFlipFlopper.displayName = 'EasyFlipFlopper';
  var threshold, returnThreshold, stageStep, stageToRotation, triggerName, normaliseStage, normaliseRotation, MODE_IDLE, MODE_FLIP, MODE_FLOP, TRIGGER_FLIP, TRIGGER_FLOP, customEase, prototype = EasyFlipFlopper.prototype, constructor = EasyFlipFlopper;
  threshold = tau / 60;
  returnThreshold = 0.1;
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  triggerName = function(d){
    if (d === -1) {
      return TRIGGER_FLIP;
    } else {
      return TRIGGER_FLOP;
    }
  };
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(Î¸){
    if (Î¸ < 0) {
      return tau - -Î¸ % tau;
    } else {
      return Î¸ % tau;
    }
  };
  MODE_IDLE = Symbol('idle');
  MODE_FLIP = Symbol('flip');
  MODE_FLOP = Symbol('flop');
  TRIGGER_FLIP = 'flip';
  TRIGGER_FLOP = 'flop';
  customEase = Ease.Power2;
  function EasyFlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.Î¸ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.direction = 0;
    this.triggerState = (ref$ = {}, ref$[TRIGGER_FLIP + ""] = {
      ignore: false
    }, ref$[TRIGGER_FLOP + ""] = {
      ignore: false
    }, ref$);
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.Î¸);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    var trigger, target, current;
    trigger = triggerName(d);
    if (this.triggerState[trigger].ignore) {
      if (p < returnThreshold) {
        return this.triggerState[trigger].ignore = false;
      }
    } else {
      target = stageToRotation(this.stage + d);
      current = stageToRotation(this.stage);
      this.Î¸ = lerp(customEase(p), current, target);
      if (abs(this.Î¸ - target) < threshold) {
        this.Î¸ = target;
        this.stage += d;
        return this.triggerState[trigger].ignore = true;
      }
    }
  };
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.Î¸);
    },
    configurable: true,
    enumerable: true
  });
  return EasyFlipFlopper;
}());



},{"./ease":3,"./tween":13,"std":11}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, floor, delay, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, floor = ref$.floor, delay = ref$.delay;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var tpsHistoryWindow, fpsHistoryWindow, SHOW_READOUT, RENDER_ON_TICK, prototype = FrameDriver.prototype, constructor = FrameDriver;
  tpsHistoryWindow = 20;
  fpsHistoryWindow = 20;
  SHOW_READOUT = true;
  RENDER_ON_TICK = false;
  function FrameDriver(){
    var ref$;
    this.tick = bind$(this, 'tick', prototype);
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      lastTickTime: 0,
      lastFrameTime: 0,
      frame: 0,
      running: false
    };
    this.callbacks = {
      tick: id,
      frame: id
    };
    this.tps = {
      value: 0,
      history: repeatArray$([0], tpsHistoryWindow)
    };
    this.fps = {
      value: 0,
      history: repeatArray$([0], fpsHistoryWindow)
    };
    if (SHOW_READOUT) {
      this.readout = document.createElement('pre');
      ref$ = this.readout.style;
      ref$.position = 'absolute';
      ref$.top = 0;
      ref$.right = 0;
      document.body.appendChild(this.readout);
    }
  }
  prototype.frame = function(){
    var now, Î”t;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Î”t = now - this.state.lastFrameTime;
    this.pushFrameTime(Î”t);
    this.state.lastFrameTime = now;
    this.state.frame += 1;
    return this.callbacks.frame(Î”t / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
  };
  prototype.tick = function(){
    var now, Î”t;
    if (this.state.running) {
      delay(0, this.tick);
    }
    now = Date.now() - this.state.zero;
    Î”t = now - this.state.lastTickTime;
    if (SHOW_READOUT) {
      this.readout.textContent = this.fps.value + " | " + this.tps.value;
    }
    this.pushTickTime(Î”t);
    this.state.lastTickTime = now;
    this.callbacks.tick(Î”t / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
    if (RENDER_ON_TICK) {
      this.pushFrameTime(Î”t);
      this.state.frame += 1;
      return this.callbacks.frame(this.state.frame);
    }
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.lastTickTime = 0;
    this.state.lastFrameTime = 0;
    this.state.running = true;
    this.tick();
    if (!RENDER_ON_TICK) {
      return this.frame();
    }
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  prototype.toggle = function(){
    if (this.state.running) {
      return this.stop();
    } else {
      return this.start();
    }
  };
  prototype.pushTickTime = function(Î”t){
    this.tps.history.push(Î”t);
    this.tps.history.shift();
    return this.tps.value = floor(1000 * tpsHistoryWindow / this.tps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.pushFrameTime = function(Î”t){
    this.fps.history.push(Î”t);
    this.fps.history.shift();
    return this.fps.value = floor(1000 * fpsHistoryWindow / this.fps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.onTick = function(Î»){
    return this.callbacks.tick = Î»;
  };
  prototype.onFrame = function(Î»){
    return this.callbacks.frame = Î»;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"std":11}],6:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.MODE_COLOR = Symbol('color');
global.MODE_NORMAL = Symbol('normal');
global.MODE_ADD = Symbol('add');
global.INPUT_FIRE = Symbol('input-fire');
global.INPUT_FLIP = Symbol('input-flip');
global.INPUT_FLOP = Symbol('input-fire');
global.INPUT_SUPER = Symbol('input-super');
global.INPUT_PAUSE = Symbol('input-pause');
global.INPUT_X = Symbol('input-move-x');
global.INPUT_Y = Symbol('input-move-y');
global.INPUT_SPECIAL = Symbol('input-special');
global.GAMEPAD_AXIS_DEADZONE = 0.2;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],7:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, floor, abs, tau, sin, cos, div, v2, wrap, rgb, lerp, rnd, FrameDriver, FlipFlopper, Blitter, Input, Tween, Ease, Timer, Bullet, FIRE_MODE_ALTERNATE, FIRE_MODE_BLEND, Canvas, SHOW_EASING_TESTS, SHOW_TWEEN_BOXES, autoTravelSpeed, maxSpeed, autoFireSpeed, dualFireSeparation, cameraDriftLimit, flipFlopTime, rotationHistoryLimit, colors, flipflopper, lerpColor, rotationToColor, rotationToSpriteIndex, diamond, colorBarrel, shoot, rotationHistory, pushRotationHistory, mainCanvas, debugCanvas, input, Sprite, playerSprite, playerSpriteSize, render, update;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor, abs = ref$.abs, tau = ref$.tau, sin = ref$.sin, cos = ref$.cos, div = ref$.div, v2 = ref$.v2;
ref$ = require('std'), wrap = ref$.wrap, rgb = ref$.rgb, lerp = ref$.lerp, rnd = ref$.rnd;
require('./global');
FrameDriver = require('./frame-driver').FrameDriver;
FlipFlopper = require('./flipflopper').FlipFlopper;
Blitter = require('./blitter').Blitter;
Input = require('./input').Input;
Tween = require('./tween').Tween;
Ease = require('./ease');
Timer = require('./timer');
Bullet = require('./bullet');
FIRE_MODE_ALTERNATE = Symbol('alternate');
FIRE_MODE_BLEND = Symbol('blend');
Canvas = (function(){
  Canvas.displayName = 'Canvas';
  var prototype = Canvas.prototype, constructor = Canvas;
  function Canvas(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.canvas.height = window.innerHeight;
    this.canvas.width = window.innerHeight / 1.5;
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Canvas;
}());
SHOW_EASING_TESTS = false;
SHOW_TWEEN_BOXES = false;
autoTravelSpeed = 500;
maxSpeed = 500;
autoFireSpeed = 0.04;
dualFireSeparation = 35;
cameraDriftLimit = 200;
flipFlopTime = 0.2;
rotationHistoryLimit = 200;
colors = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 0, 1], [1, 0, 0]];
flipflopper = new FlipFlopper({
  speed: 0.2
});
lerpColor = function(t, start, end){
  return [lerp(t, start[0], end[0]), lerp(t, start[1], end[1]), lerp(t, start[2], end[2])];
};
rotationToColor = function(Î¸){
  if (0 < Î¸ && Î¸ < tau) {
    return floor((Î¸ / tau) * colors.length);
  } else {
    return 0;
  }
};
rotationToSpriteIndex = function(Î¸, frames){
  return floor(frames * (Î¸ % (tau / 3)) / (tau / 3));
};
diamond = function(arg$){
  var x, y;
  x = arg$[0], y = arg$[1];
  if (x === 0) {
    return [x, y];
  } else {
    return [x / 2, y / 2];
  }
};
colorBarrel = {
  draw: function(cnv, pos, Î¸, r, o, m){
    r == null && (r = 75);
    o == null && (o = tau * 9 / 12);
    m == null && (m = colors.length);
    return (function(){
      var i$, ref$, len$, i, color;
      for (i$ = 0, len$ = (ref$ = colors).length; i$ < len$; ++i$) {
        i = i$;
        color = ref$[i$];
        this.fillStyle = rgb(color);
        this.beginPath();
        this.moveTo(pos[0], pos[1]);
        this.arc(pos[0], pos[1], r, -Î¸ + tau / m * i + o, -Î¸ + tau / m * (i + 1) + o);
        this.closePath();
        this.fill();
      }
      this.strokeStyle = 'white';
      this.beginPath();
      this.moveTo(pos[0], pos[1]);
      this.lineTo(pos[0] + r * sin(0), pos[1] - r * cos(0));
      this.closePath();
      return this.stroke();
    }.call(cnv.ctx));
  }
};
shoot = function(){
  var left, mid, right;
  if (gameState.fireMode === FIRE_MODE_BLEND) {
    left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 150]);
    mid = v2.add(gameState.player.pos, [0, 170]);
    right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 150]);
    gameState.playerBullets.push(Bullet.create(left, 2000, rgb(colors[gameState.player.color - 1])));
    gameState.playerBullets.push(Bullet.create(mid, 2000, rgb(colors[gameState.player.color + 0])));
    return gameState.playerBullets.push(Bullet.create(right, 2000, rgb(colors[gameState.player.color + 1])));
  } else {
    if (gameState.shootAlternate) {
      left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 150]);
      gameState.playerBullets.push(Bullet.create(left, 3000, rgb(colors[gameState.player.color])));
    } else {
      right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 150]);
      gameState.playerBullets.push(Bullet.create(right, 3000, rgb(colors[gameState.player.color])));
    }
    return gameState.shootAlternate = !gameState.shootAlternate;
  }
};
global.gameState = {
  cameraZoom: 1,
  cameraPos: [0, 0],
  player: {
    pos: [0, 0],
    vel: [0, 0],
    flipping: false,
    flopping: false,
    color: 0,
    rotation: 0
  },
  timers: {
    autoFireTimer: Timer.create(autoFireSpeed),
    flipFlopTimer: Timer.create(flipFlopTime, {
      disabled: true
    })
  },
  fireMode: FIRE_MODE_ALTERNATE,
  shootAlternate: false,
  fireRenderAlternate: false,
  targetPos: [0, 500],
  playerBullets: [],
  inputState: {
    up: false,
    down: false,
    left: false,
    right: false,
    fire: false,
    pause: false,
    flip: 0,
    flop: 0,
    x: 0,
    y: 0,
    mouseX: 0,
    mouseY: 0
  }
};
rotationHistory = [];
pushRotationHistory = function(n){
  rotationHistory.push(n);
  if (rotationHistory.length >= rotationHistoryLimit) {
    return rotationHistory.shift();
  }
};
mainCanvas = new Blitter;
debugCanvas = new Canvas;
input = new Input;
Sprite = function(src, arg$, frames){
  var width, height, image;
  width = arg$[0], height = arg$[1];
  image = new Image;
  image.width = width * frames;
  image.height = height;
  image.src = src;
  return {
    index: 0,
    width: width,
    height: height,
    image: image,
    frames: frames
  };
};
playerSprite = Sprite('/assets/player-sprite.png', [100, 120], 24);
playerSpriteSize = [70, 80];
render = function(Î”t, t){
  var p, playerColor, sigilPos, len, i$, ref$, len$, bullet;
  p = Timer.getProgress(this.timers.flipFlopTimer);
  playerColor = rgb(this.player.flipping
    ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color + 1)])
    : this.player.flopping
      ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color - 1)])
      : colors[this.player.color]);
  sigilPos = v2.add(this.player.pos, [0, -8]);
  mainCanvas.clear();
  mainCanvas.drawOrigin();
  mainCanvas.drawLocalGrid();
  mainCanvas.rect(this.targetPos, [90, 90], {
    color: 'blue'
  });
  mainCanvas.sprite(playerSprite, this.player.pos, playerSpriteSize);
  len = 5 + rnd(50);
  mainCanvas.dntri(v2.add(this.player.pos, [0, -28 - len / 2]), [20, len], {
    color: playerColor
  });
  for (i$ = 0, len$ = (ref$ = this.playerBullets).length; i$ < len$; ++i$) {
    bullet = ref$[i$];
    Bullet.draw(mainCanvas, bullet);
  }
  return (function(){
    var ref$, width, height, i$, len$, x, d, i, box, this$ = this;
    ref$ = debugCanvas.canvas, width = ref$.width, height = ref$.height;
    debugCanvas.clear();
    colorBarrel.draw(debugCanvas, [width / 2, 100], gameState.player.rotation);
    this.fillStyle = rgb(colors[gameState.player.color]);
    this.fillRect(width / 2 - 2, 10, 4, 15);
    for (i$ = 0, len$ = (ref$ = rotationHistory).length; i$ < len$; ++i$) {
      x = i$;
      d = ref$[i$];
      this.fillStyle = rgb(colors[rotationToColor(d)]);
      this.fillRect(x / rotationHistoryLimit * width, height - 10 - d * 10, 2, 2);
    }
    this.fillStyle = 'grey';
    this.fillRect(20, height / 2, 20, 50);
    this.fillRect(50, height / 2, 20, 50);
    this.fillStyle = 'white';
    this.fillRect(20, height / 2, 20, 50 * gameState.inputState.flip);
    this.fillRect(50, height / 2, 20, 50 * gameState.inputState.flop);
    if (SHOW_EASING_TESTS) {
      this.fillStyle = 'white';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Linear(i / width), 2, 2);
      }
      this.fillStyle = 'red';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power2(i / width), 2, 2);
      }
      this.fillStyle = 'orange';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power3(i / width), 2, 2);
      }
      this.fillStyle = 'yellow';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.Power4(i / width), 2, 2);
      }
      this.fillStyle = 'green';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut2(i / width), 2, 2);
      }
      this.fillStyle = 'cyan';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut3(i / width), 2, 2);
      }
      this.fillStyle = 'blue';
      for (i$ = 0; i$ <= width; i$ += 5) {
        i = i$;
        this.fillRect(i, height - 150 - 100 * Ease.PowerOut4(i / width), 2, 2);
      }
    }
    box = function(i, s){
      this$.fillStyle = !s ? 'lightgrey' : 'red';
      return this$.fillRect(width - 50, 40 + i * 40, 30, 30);
    };
    box(0, flipflopper.triggerState.flip.ignore);
    return box(1, flipflopper.triggerState.flop.ignore);
  }.call(debugCanvas.ctx));
};
update = function(Î”t, t){
  var event, type, value, leftToRightVel, frontToBackVel, inputVel, playerVel, newFireMode, fireTimerFactor;
  Tween.updateAll(Î”t);
  Timer.updateAndCarry(this.timers.autoFireTimer, Î”t);
  input.update(Î”t);
  while (event = input.pendingEvents.shift()) {
    type = event[0], value = event[1];
    switch (type) {
    case INPUT_FIRE:
      if (this.inputState.fire !== value) {
        this.inputState.fire = value;
        if (value) {
          shoot();
          if (this.fireMode === FIRE_MODE_ALTERNATE) {
            Timer.reset(this.timers.autoFireTimer, autoFireSpeed * (this.fireMode === FIRE_MODE_ALTERNATE ? 1 : 2));
          }
        }
      }
      break;
    case INPUT_X:
      this.inputState.x = value;
      break;
    case INPUT_Y:
      this.inputState.y = value;
      break;
    case INPUT_PAUSE:
      if (value) {
        frameDriver.toggle();
      }
      break;
    case INPUT_FLIP:
      if (this.inputState.flip < value) {
        flipflopper.staticToStage(-1, value);
      } else if (this.inputState.flip > value) {
        flipflopper.staticToStage(-1, value);
      }
      this.inputState.flip = value;
      break;
    case INPUT_FLOP:
      if (this.inputState.flop < value) {
        flipflopper.staticToStage(1, value);
      } else if (this.inputState.flop > value) {
        flipflopper.staticToStage(1, value);
      }
      this.inputState.flop = value;
    }
  }
  this.player.pos[1] += autoTravelSpeed * Î”t;
  this.targetPos[1] += autoTravelSpeed * Î”t;
  leftToRightVel = this.inputState.left
    ? -1
    : this.inputState.right ? 1 : 0;
  frontToBackVel = this.inputState.down
    ? -1
    : this.inputState.up ? 1 : 0;
  inputVel = [this.inputState.x, this.inputState.y];
  playerVel = v2.scale(inputVel, maxSpeed);
  this.player.pos[0] += playerVel[0] * Î”t;
  this.player.pos[1] += playerVel[1] * Î”t;
  this.player.rotation = flipflopper.rotation;
  this.player.color = rotationToColor(this.player.rotation);
  playerSprite.index = rotationToSpriteIndex(this.player.rotation, playerSprite.frames);
  pushRotationHistory(this.player.rotation);
  if (gameState.player.color % 3 === 1) {
    newFireMode = FIRE_MODE_BLEND;
    fireTimerFactor = 2;
  } else {
    newFireMode = FIRE_MODE_ALTERNATE;
    fireTimerFactor = 1;
  }
  this.timers.autoFireTimer.target = autoFireSpeed * fireTimerFactor;
  if (newFireMode === FIRE_MODE_ALTERNATE) {
    if (this.timers.autoFireTimer.elapsed && this.inputState.fire) {
      shoot();
    }
  }
  if (this.fireMode !== newFireMode) {
    if (newFireMode === FIRE_MODE_ALTERNATE) {
      Timer.reset(this.timers.autoFireTimer);
    }
  }
  this.fireMode = newFireMode;
  this.playerBullets = this.playerBullets.filter(function(bullet){
    bullet.pos[1] += bullet.vel[1] * Î”t;
    bullet.life -= bullet.Î”life * Î”t;
    return bullet.life > 0;
  });
  this.cameraPos[1] = this.player.pos[1] + 200;
  if (this.cameraPos[0] - this.player.pos[0] > cameraDriftLimit) {
    this.cameraPos[0] -= this.cameraPos[0] - this.player.pos[0] - cameraDriftLimit;
  }
  if (this.player.pos[0] - this.cameraPos[0] > cameraDriftLimit) {
    return this.cameraPos[0] += this.player.pos[0] - this.cameraPos[0] - cameraDriftLimit;
  }
};
global.frameDriver = new FrameDriver;
frameDriver.onFrame(render.bind(gameState));
frameDriver.onTick(update.bind(gameState));
frameDriver.start();
mainCanvas.install(document.body);
debugCanvas.install(document.body);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./blitter":1,"./bullet":2,"./ease":3,"./flipflopper":4,"./frame-driver":5,"./global":6,"./input":9,"./timer":12,"./tween":13,"std":11}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, BUTTON_A, BUTTON_B, BUTTON_X, BUTTON_Y, LEFT_TRIGGER, RIGHT_TRIGGER, LEFT_BUMPER, RIGHT_BUMPER, BUTTON_SELECT, BUTTON_START, LEFT_STICK_CLICK, RIGHT_STICK_CLICK, DPAD_TOP, DPAD_BOTTOM, DPAD_LEFT, DPAD_RIGHT, LEFT_STICK_X, LEFT_STICK_Y, RIGHT_STICK_X, RIGHT_STICK_Y, x$, keyBindings, y$, axisBindings, GamepadController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
BUTTON_A = 0;
BUTTON_B = 1;
BUTTON_X = 2;
BUTTON_Y = 3;
LEFT_TRIGGER = 6;
RIGHT_TRIGGER = 7;
LEFT_BUMPER = 4;
RIGHT_BUMPER = 5;
BUTTON_SELECT = 8;
BUTTON_START = 9;
LEFT_STICK_CLICK = 10;
RIGHT_STICK_CLICK = 11;
DPAD_TOP = 12;
DPAD_BOTTOM = 13;
DPAD_LEFT = 14;
DPAD_RIGHT = 15;
LEFT_STICK_X = 0;
LEFT_STICK_Y = 1;
RIGHT_STICK_X = 2;
RIGHT_STICK_Y = 3;
x$ = keyBindings = new Map;
x$.set(BUTTON_B, INPUT_FIRE);
x$.set(BUTTON_A, INPUT_SUPER);
x$.set(BUTTON_Y, INPUT_SPECIAL);
x$.set(LEFT_TRIGGER, INPUT_FLIP);
x$.set(RIGHT_TRIGGER, INPUT_FLOP);
x$.set(BUTTON_START, INPUT_PAUSE);
y$ = axisBindings = new Map;
y$.set(LEFT_STICK_X, INPUT_X);
y$.set(LEFT_STICK_Y, INPUT_Y);
out$.GamepadController = GamepadController = (function(){
  GamepadController.displayName = 'GamepadController';
  var prototype = GamepadController.prototype, constructor = GamepadController;
  function GamepadController(callback){
    this.callback = callback != null ? callback : id;
    this.state = {
      buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      axes: [0, 0, 0, 0]
    };
  }
  prototype.proxyEvent = function(value, binding){
    return this.callback(binding, value);
  };
  prototype.update = function(Î”t){
    var gamepad, i$, ref$, len$, which, button, raw, dead, value, results$ = [];
    gamepad = navigator.getGamepads()[0];
    if (gamepad) {
      for (i$ = 0, len$ = (ref$ = gamepad.buttons).length; i$ < len$; ++i$) {
        which = i$;
        button = ref$[i$];
        if (button.value !== this.state.buttons[which]) {
          log(which);
          log(keyBindings.get(which));
          this.proxyEvent(button.value, keyBindings.get(which));
          this.state.buttons[which] = button.value;
        }
      }
      for (i$ = 0, len$ = (ref$ = gamepad.axes).length; i$ < len$; ++i$) {
        which = i$;
        raw = ref$[i$];
        dead = -GAMEPAD_AXIS_DEADZONE < raw && raw < GAMEPAD_AXIS_DEADZONE;
        value = dead ? 0 : raw;
        if (value !== this.state.axes[which]) {
          this.proxyEvent(value, axisBindings.get(which));
          results$.push(this.state.axes[which] = value);
        }
      }
      return results$;
    }
  };
  return GamepadController;
}());



},{"std":11}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, KeyboardController, GamepadController, Input, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
KeyboardController = require('./keyboard').KeyboardController;
GamepadController = require('./gamepad').GamepadController;
out$.Input = Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.pushEvent = bind$(this, 'pushEvent', prototype);
    this.pendingEvents = [];
    this.keyboard = new KeyboardController(this.pushEvent);
    this.gamepad = new GamepadController(this.pushEvent);
  }
  prototype.update = function(Î”t){
    this.keyboard.update(Î”t);
    return this.gamepad.update(Î”t);
  };
  prototype.pushEvent = function(type, value){
    return this.pendingEvents.push([type, value]);
  };
  return Input;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"../timer":12,"./gamepad":8,"./keyboard":10,"std":11}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, ENTER, SPACE, ESCAPE, KEY_A, KEY_C, KEY_D, KEY_E, KEY_Q, KEY_S, KEY_W, KEY_X, KEY_Z, LEFT, RIGHT, UP, DOWN, TRIGGER_DIR_STABLE, TRIGGER_DIR_PRESS, TRIGGER_DIR_RELEASE, KeyboardController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
ENTER = 13;
SPACE = 32;
ESCAPE = 27;
KEY_A = 65;
KEY_C = 67;
KEY_D = 68;
KEY_E = 69;
KEY_Q = 81;
KEY_S = 83;
KEY_W = 87;
KEY_X = 88;
KEY_Z = 90;
LEFT = 37;
RIGHT = 39;
UP = 38;
DOWN = 40;
TRIGGER_DIR_STABLE = Symbol('trigger-direction-stable');
TRIGGER_DIR_PRESS = Symbol('trigger-direction-press');
TRIGGER_DIR_RELEASE = Symbol('trigger-direction-release');
out$.KeyboardController = KeyboardController = (function(){
  KeyboardController.displayName = 'KeyboardController';
  var simulatedTravelTime, prototype = KeyboardController.prototype, constructor = KeyboardController;
  simulatedTravelTime = 0.05 * 2;
  function KeyboardController(callback){
    this.callback = callback != null ? callback : id;
    this.simTriggers = [
      {
        type: INPUT_FLIP,
        dir: TRIGGER_DIR_STABLE,
        value: 0,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }, {
        type: INPUT_FLOP,
        value: 0,
        dir: TRIGGER_DIR_STABLE,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }
    ];
    this.cursorState = {
      up: false,
      down: false,
      left: false,
      right: false
    };
    document.addEventListener('keydown', this.handleKey(true));
    document.addEventListener('keyup', this.handleKey(false));
  }
  prototype.proxyEvent = function(type, value){
    return this.callback(type, value);
  };
  prototype.update = function(Î”t){
    var i$, ref$, len$, trigger, p, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.simTriggers).length; i$ < len$; ++i$) {
      trigger = ref$[i$];
      Timer.updateAndStop(trigger.timer, Î”t);
      p = trigger.timer.current / simulatedTravelTime;
      if (trigger.value !== p) {
        if (trigger.dir === TRIGGER_DIR_RELEASE) {
          this.proxyEvent(trigger.type, trigger.timer.target / simulatedTravelTime - p);
        } else {
          this.proxyEvent(trigger.type, p);
        }
      }
      if (trigger.elapsed && trigger.dir === TRIGGER_DIR_RELEASE) {
        trigger.dir = TRIGGER_DIRECTION_STABLE;
      }
      results$.push(trigger.value = p);
    }
    return results$;
  };
  prototype.handleKey = function(dir){
    var this$ = this;
    return function(event){
      var which;
      which = event.which;
      if (event.shiftKey) {
        log(which);
      }
      if (!this$.dispatchKeyResponse(dir, which)) {
        return event;
      }
      event.preventDefault();
      return false;
    };
  };
  prototype.dispatchKeyResponse = function(dir, which){
    switch (which) {
    case KEY_Z:
      return this.simulateTrigger(0, dir, 1);
    case KEY_C:
      return this.simulateTrigger(1, dir, 1);
    case KEY_A:
      return this.simulateTrigger(0, dir, 0.5);
    case KEY_D:
      return this.simulateTrigger(1, dir, 0.5);
    case KEY_S:
      return this.proxyEvent(INPUT_FIRE, dir);
    case KEY_X:
      return this.proxyEvent(INPUT_FIRE, dir);
    case UP:
      return this.cursorVelocityY('up', dir);
    case DOWN:
      return this.cursorVelocityY('down', dir);
    case LEFT:
      return this.cursorVelocityX('left', dir);
    case RIGHT:
      return this.cursorVelocityX('right', dir);
    case ESCAPE:
      return this.proxyEvent(INPUT_PAUSE, dir ? frameDriver.toggle() : void 8);
    }
  };
  prototype.cursorVelocityX = function(key, dir){
    this.cursorState[key] = dir;
    return this.proxyEvent(INPUT_X, this.cursorState.right - this.cursorState.left);
  };
  prototype.cursorVelocityY = function(key, dir){
    this.cursorState[key] = dir;
    return this.proxyEvent(INPUT_Y, this.cursorState.up - this.cursorState.down);
  };
  prototype.simulate = function(trigger, target, dir){
    var direction;
    direction = dir ? TRIGGER_DIR_PRESS : TRIGGER_DIR_RELEASE;
    trigger.timer.target = target;
    if (direction !== trigger.dir) {
      if (trigger.timer.active) {
        trigger.timer.current = trigger.timer.target - trigger.timer.current;
      } else {
        Timer.reset(trigger.timer);
      }
      return trigger.dir = direction;
    }
  };
  prototype.simulateTrigger = function(side, dir, mult){
    mult == null && (mult = 2);
    return this.simulate(this.simTriggers[side], simulatedTravelTime * mult, dir);
  };
  return KeyboardController;
}());



},{"../timer":12,"std":11}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, raf, lerp, floor, sqrt, abs, min, sin, cos, max, asin, v2, box, rnd, div, pi, tau, flip, delay, limit, wrap, z, rgb, randomFrom, randomRange, ids, idd, base64, padTwo, hex, ease, physics, dampen, colorLog, redLog, greenLog, sfx, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.raf = raf = window.requestAnimationFrame;
out$.lerp = lerp = function(a, t, b){
  return a + t * (b - a);
};
out$.floor = floor = Math.floor;
out$.sqrt = sqrt = Math.sqrt;
out$.abs = abs = Math.abs;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.max = max = Math.max;
out$.asin = asin = Math.asin;
out$.v2 = v2 = {
  hyp: function(v){
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  },
  norm: function(v){
    var d;
    d = v2.hyp(v);
    if (d === 0) {
      return [0, 0];
    } else {
      return [v[0] / d, v[1] / d];
    }
  },
  add: function(a, b){
    return [a[0] + b[0], a[1] + b[1]];
  },
  sub: function(a, b){
    return [a[0] - b[0], a[1] - b[1]];
  },
  scale: function(v, f){
    return [v[0] * f, v[1] * f];
  },
  dist: function(a, b){
    var x, y;
    x = [b[0] - a[0]];
    y = [b[1] - a[1]];
    return sqrt(x * x + y * y);
  }
};
out$.box = box = function(n){
  return [n, n];
};
out$.rnd = rnd = function(n){
  return n * Math.random();
};
out$.div = div = function(a, b){
  return floor(a / b);
};
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.flip = flip = function(Î»){
  return function(a, b){
    return Î»(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.limit = limit = curry$(function(min, max, n){
  if (n < min) {
    return min;
  } else if (n > max) {
    return max;
  } else {
    return n;
  }
});
out$.wrap = wrap = curry$(function(min, max, n){
  if (n < min) {
    return max;
  } else if (n > max) {
    return min;
  } else {
    return n;
  }
});
out$.z = z = function(it){
  return floor(it * 255);
};
out$.rgb = rgb = function(r, g, b){
  return "rgb(" + z(r) + "," + z(g) + "," + z(b) + ")";
};
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(Math.random() * xs.length)];
};
out$.randomRange = randomRange = function(a, b){
  return a + rnd(b - a);
};
out$.ids = ids = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it * it;
  }
};
out$.idd = idd = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it;
  }
};
out$.base64 = base64 = function(buffer, output){
  var bytes, i$, to$, i;
  output == null && (output = "");
  bytes = new Uint8Array(buffer);
  for (i$ = 0, to$ = bytes.byteLength; i$ <= to$; ++i$) {
    i = i$;
    output += String.fromCharCode(bytes[i]);
  }
  return window.btoa(output);
};
out$.padTwo = padTwo = function(str){
  if (str.length < 2) {
    return "0" + str;
  } else {
    return str;
  }
};
out$.hex = hex = function(decimal){
  return padTwo(floor(decimal).toString(16));
};
out$.rgb = rgb = function(arg$){
  var r, g, b;
  r = arg$[0], g = arg$[1], b = arg$[2];
  return "#" + hex(r * 255) + hex(g * 255) + hex(b * 255);
};
out$.lerp = lerp = function(t, a, b){
  return a + t * (b - a);
};
out$.ease = ease = function(t, a, b, Î»){
  return a + Î»(t) * (b - a);
};
out$.physics = physics = function(o, Î”t){
  var f, that;
  f = (that = o.friction) ? that : 1;
  o.vel = v2.scale(v2.add(v2.scale(o.acc, Î”t), o.vel), f);
  return o.pos = v2.add(v2.add(v2.scale(o.vel, Î”t), o.pos), v2.scale(o.acc, 0.5 * Î”t * Î”t));
};
out$.dampen = dampen = function(o, damp, Î”t){
  o.vel = v2.scale(o.vel, damp);
  return o.pos = v2.add(v2.scale(o.vel, Î”t), o.pos);
};
colorLog = function(col){
  return function(text){
    var rest;
    rest = slice$.call(arguments, 1);
    return log.apply(null, ['%c' + text, "color: " + col].concat(slice$.call(rest)));
  };
};
redLog = colorLog('#e42');
greenLog = colorLog('#1d3');
out$.sfx = sfx = colorLog('#28e');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, create, updateAndStop, updateAndCarry, getProgress, reset, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.create = create = function(target, arg$){
  var disabled, ref$;
  disabled = (ref$ = (arg$ != null
    ? arg$
    : {}).disabled) != null ? ref$ : false;
  return {
    target: target,
    current: 0,
    elapsed: false,
    active: !disabled
  };
};
out$.updateAndStop = updateAndStop = function(timer, Î”t){
  if (timer.active) {
    if (timer.current + Î”t >= timer.target) {
      timer.current = timer.target;
      timer.elapsed = true;
      return timer.active = false;
    } else {
      timer.current += Î”t;
      return timer.elapsed = false;
    }
  } else {
    return timer.elapsed = false;
  }
};
out$.updateAndCarry = updateAndCarry = function(timer, Î”t){
  if (timer.active) {
    if (timer.current + Î”t >= timer.target) {
      timer.elapsed = true;
      return timer.current = (timer.current + Î”t) % timer.target;
    } else {
      timer.current += Î”t;
      return timer.elapsed = false;
    }
  }
};
out$.getProgress = getProgress = function(timer){
  return timer.current / timer.target;
};
out$.reset = reset = function(timer, target){
  target == null && (target = 0);
  if (target) {
    timer.target = target;
  }
  timer.current = 0;
  timer.elapsed = false;
  return timer.active = true;
};



},{"std":11}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Tween, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Tween = Tween = (function(){
  Tween.displayName = 'Tween';
  var allTweens, prototype = Tween.prototype, constructor = Tween;
  allTweens = [];
  function Tween(arg$){
    var ref$;
    this.from = (ref$ = arg$.from) != null ? ref$ : 0, this.to = (ref$ = arg$.to) != null ? ref$ : 1, this['in'] = (ref$ = arg$['in']) != null ? ref$ : 1, this['with'] = (ref$ = arg$['with']) != null
      ? ref$
      : Ease.Linear;
    this.time = 0;
    this.range = this.to - this.from;
    this.elapsed = false;
    this.active = true;
    allTweens.push(this);
  }
  prototype.update = function(Î”t){
    this.time += Î”t;
    if (this.time >= this['in']) {
      this.time = this['in'];
      this.elapsed = true;
      this.active = false;
    }
    this.value = this.from + this.range * this['with'](this.time / this['in']);
    return !this.elapsed;
  };
  Tween.updateAll = function(Î”t){
    return allTweens = allTweens.filter(function(it){
      return it.update(Î”t);
    });
  };
  Tween.Null = {
    elapsed: false,
    active: false,
    value: 0
  };
  return Tween;
}());



},{"std":11}]},{},[7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2JsaXR0ZXIubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2J1bGxldC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZWFzZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZmxpcGZsb3BwZXIubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2ZyYW1lLWRyaXZlci5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZ2xvYmFsLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9pbmRleC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvaW5wdXQvZ2FtZXBhZC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvaW5wdXQvaW5kZXgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2lucHV0L2tleWJvYXJkLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9zdGQvaW5kZXgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3RpbWVyLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy90d2Vlbi5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDR0EsSUFBQSxHQUFtQixPQUFuQixDQUEyQixLQUFBLENBQTNCLEVBQUUsRUFBZSxDQUFBLENBQUEsQ0FBakIsSUFBQSxDQUFFLEVBQUYsRUFBTSxHQUFXLENBQUEsQ0FBQSxDQUFqQixJQUFBLENBQU0sR0FBTixFQUFXLEdBQU0sQ0FBQSxDQUFBLENBQWpCLElBQUEsQ0FBVztlQU9FLFdBQU4sUUFBQSxDQUFBOzs7RUFFTCxlQUFrQixDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsSUFBQTtJQUNsQixRQUFPLElBQVA7QUFBQSxJQUNFLEtBQUEsV0FBQTtBQUFBLGFBQWU7SUFDZixLQUFBLFVBQUE7QUFBQSxhQUFlO0lBQ2YsS0FBQSxRQUFBO0FBQUEsYUFBZTs7YUFDRDs7O0VBRWxCLGFBQXFCLENBQUEsQ0FBQSxDQUFFO0VBQ3ZCLGlCQUFxQixDQUFBLENBQUEsQ0FBRTtFQUN2QixrQkFBcUIsQ0FBQSxDQUFBLENBQUUsQ0FBRSxLQUFLLEdBQVA7RUFDdkIsWUFBcUIsQ0FBQSxDQUFBLENBQUU7RUFFdkIsUUFBQSxDQUFBLE9BQUEsQ0FBQTtJQUNFLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFLFFBQVEsQ0FBQyxjQUFlLFFBQUE7SUFDbEMsSUFBQyxDQUFBLEdBQUksQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFZLElBQUE7SUFDM0IsSUFBQyxDQUFBLFFBQVMsQ0FBRSxNQUFNLENBQUMsWUFBYSxNQUFNLENBQUMsV0FBN0IsQ0FBQTs7WUFFWixVQUFVLFFBQUEsQ0FBQSxJQUFBO0lBQ1IsSUFBRyxJQUFJLENBQUMsQ0FBRCxDQUFHLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFELENBQWhCO01BQ0UsSUFBQyxDQUFBLENB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QUMsQ0FBQSxNQUFBLENBQUgsQ0FBUSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxJQUFDLENBQUEsSUFBQSxDQUFQO0lBQ2hDLE1BQUEsQ0FBTyxDQUFJLElBQUMsQ0FBQSxPQUFaOztFQUVGLEtBQUMsQ0FBQSxTQUFXLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxFQUFBO1dBQ1osU0FBVyxDQUFBLENBQUEsQ0FBRyxTQUFVLENBQUMsT0FBUSxRQUFBLENBQUEsRUFBQTthQUFBLEVBQUEsQ0FBQyxPQUFPLEVBQUE7S0FBVDs7RUFFbEMsS0FBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQ0o7SUFBQSxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87RUFGUCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHRhdSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiNcbiMgQmxpdHRlclxuI1xuXG5leHBvcnQgY2xhc3MgQmxpdHRlclxuXG4gIG1vZGUtdG8tb3BlcmF0aW9uID0gKG1vZGUpIC0+XG4gICAgc3dpdGNoIG1vZGVcbiAgICB8IE1PREVfTk9STUFMID0+IFxcc291cmNlLW92ZXJcbiAgICB8IE1PREVfQ09MT1IgID0+IFxcaHVlXG4gICAgfCBNT0RFX0FERCAgICA9PiBcXGxpZ2h0ZW5cbiAgICB8IG90aGVyd2lzZSAgPT4gXFxzb3VyY2Utb3ZlclxuXG4gIGxvY2FsLWdyaWQtc2l6ZSAgICAgID0gNTAwXG4gIGxvY2FsLWdyaWQtZmlkZWxpdHkgID0gMTAwXG4gIGNhbWVyYS1mcnVzdHJ1bS1zaXplID0gWyA1MDAsIDc1MCBdXG4gIGNhbWVyYS1hc3BlY3QgICAgICAgID0gMS41XG5cbiAgLT5cbiAgICBAY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlLWVsZW1lbnQgXFxjYW52YXNcbiAgICBAY3R4ID0gQGNhbnZhcy5nZXQtY29udGV4dCBcXDJkXG4gICAgQHNldC1zaXplIFsgd2luZG93LmlubmVyLXdpZHRoLCB3aW5kb3cuaW5uZXItaGVpZ2h0IF1cblxuICBzZXQtc2l6ZTogKHNpemUpIC0+XG4gICAgaWYgc2l6ZS4wID4gc2l6ZS4xXG4gICAgICBAdyA9IEBjYW52YXMud2lkdGggID0gc2l6ZS4xIC8gY2FtZXJhLWFzcGVjdFxuICAgICAgQGggPSBAY2FudmFzLmhlaWdodCA9IHNpemUuMVxuICAgIGVsc2VcbiAgICAgIEB3ID0gQGNhbnZhcy53aWR0aCAgPSBzaXplLjBcbiAgICAgIEBoID0gQGNhbnZhcy5oZWlnaHQgPSBzaXplLjAgKiBjYW1lcmEtYXNwZWN0XG5cbiAgICAjbG9nIHdpbmRvdy5pbm5lci13aWR0aCwgd2luZG93LmlubmVyLWhlaWdodCwgQHcsIEBoXG5cbiAgICBAd2YgPSBAdyAvIGNhbWVyYS1mcnVzdHJ1bS1zaXplLjBcbiAgICBAaGYgPSBAaCAvIGNhbWVyYS1mcnVzdHJ1bS1zaXplLjFcblxuICB0cmFuc2xhdGUtcG9zOiAoW3gsIHldKSAtPlxuICAgIFsgQHcvMiArICh4IC0gZ2FtZS1zdGF0ZS5jYW1lcmEtcG9zLjApICogQHdmLFxuICAgICAgQGgvMiAtICh5IC0gZ2FtZS1zdGF0ZS5jYW1lcmEtcG9zLjEpICogQGhmIF1cblxuICB0cmFuc2xhdGUtc2l6ZTogKFt3LCBoXSkgLT5cbiAgICBbIHcgKiBAd2YsIGggKiBAaGYgXVxuXG4gIGNpcmNsZTogKHBvcywgcmFkaXVzLCB7IGNvbG9yPVxcd2hpdGUsIGFscGhhPTEsIG1vZGU9TU9ERV9OT1JNQUwgfSkgLT5cbiAgICBbeCwgeV0gPSBAdHJhbnNsYXRlLXBvcyBwb3NcbiAgICBbIHIgXSAgPSBAdHJhbnNsYXRlLXNpemUgWyByYWRpdXMgXSAgIyBUT0RPOiBUaGlzLCBidXQgYmV0dGVyXG4gICAgQGN0eC5nbG9iYWwtY29tcG9zaXRlLW9wZXJhdGlvbiA9IG1vZGUtdG8tb3BlcmF0aW9uIG1vZGVcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IGFscGhhXG4gICAgQGN0eC5maWxsLXN0eWxlID0gY29sb3JcbiAgICBAY3R4LmJlZ2luLXBhdGghXG4gICAgQGN0eC5hcmMgeCwgeSwgciwgMCwgdGF1XG4gICAgQGN0eC5jbG9zZS1wYXRoIVxuICAgIEBjdHguZmlsbCFcblxuICByZWN0OiAocG9zLCBzaXplLCB7IGNvbG9yPVxcd2hpdGUsIGFscGhhPTEsIG1vZGU9TU9ERV9OT1JNQUwgfSkgLT5cbiAgICBbeCwgeV0gPSBAdHJhbnNsYXRlLXBvcyBwb3NcbiAgICBbdywgaF0gPSBAdHJhbnNsYXRlLXNpemUgc2l6ZVxuICAgIEBjdHguZ2xvYmFsLWNvbXBvc2l0ZS1vcGVyYXRpb24gPSBtb2RlLXRvLW9wZXJhdGlvbiBtb2RlXG4gICAgQGN0eC5nbG9iYWwtYWxwaGEgPSBhbHBoYVxuICAgIEBjdHguZmlsbC1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5maWxsLXJlY3QgeCAtIHcvMiwgeSAtIGgvMiwgdywgaFxuXG4gIGxpbmU6IChzdGFydCwgZW5kKSAtPlxuICAgIEBjdHguc3Ryb2tlLXN0eWxlID0gXFx3aGl0ZVxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAX2xpbmUgQGN0eCwgc3RhcnQsIGVuZFxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LnN0cm9rZSFcblxuICBfbGluZTogKHN0YXJ0LCBlbmQpIC0+XG4gICAgW3gxLCB5MV0gPSBAdHJhbnNsYXRlLXBvcyBzdGFydFxuICAgIFt4MiwgeTJdID0gQHRyYW5zbGF0ZS1wb3MgZW5kXG4gICAgQGN0eC5tb3ZlLXRvIHgxLCB5MVxuICAgIEBjdHgubGluZS10byB4MiwgeTJcblxuICB1cHRyaTogKHBvcywgc2l6ZSwgeyBjb2xvcj1cXHdoaXRlLCBhbHBoYT0xLCBtb2RlPU1PREVfTk9STUFMIH0pIC0+XG4gICAgQGN0eC5nbG9iYWwtY29tcG9zaXRlLW9wZXJhdGlvbiA9IG1vZGUtdG8tb3BlcmF0aW9uIG1vZGVcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IGFscGhhXG4gICAgQGN0eC5maWxsLXN0eWxlID0gY29sb3JcbiAgICBAY3R4LmJlZ2luLXBhdGghXG4gICAgQF91cHRyaSBwb3MsIHNpemVcbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5maWxsIVxuXG4gIF91cHRyaTogKHBvcywgc2l6ZSkgLT5cbiAgICBbeCwgeV0gPSBAdHJhbnNsYXRlLXBvcyBwb3NcbiAgICBbdywgaF0gPSBAdHJhbnNsYXRlLXNpemUgc2l6ZVxuICAgIEBjdHgubW92ZS10byB4IC0gdy8yLCB5ICsgaC8yXG4gICAgQGN0eC5saW5lLXRvIHggKyB3LzIsIHkgKyBoLzJcbiAgICBAY3R4LmxpbmUtdG8geCArICAwLCAgeSAtIGgvMlxuICAgIEBjdHgubGluZS10byB4IC0gdy8yLCB5ICsgaC8yXG5cbiAgZG50cmk6IChwb3MsIHNpemUsIHsgY29sb3IgPSBcXHdoaXRlLCBhbHBoYSA9IDEsIG1vZGUgPSBNT0RFX05PUk1BTCB9KSAtPlxuICAgIEBjdHguZ2xvYmFsLWNvbXBvc2l0ZS1vcGVyYXRpb24gPSBtb2RlLXRvLW9wZXJhdGlvbiBtb2RlXG4gICAgQGN0eC5nbG9iYWwtYWxwaGEgPSBhbHBoYVxuICAgIEBjdHguZmlsbC1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBfZG50cmkgcG9zLCBzaXplXG4gICAgQGN0eC5jbG9zZS1wYXRoIVxuICAgIEBjdHguZmlsbCFcblxuICBfZG50cmk6IChwb3MsIHNpemUpIC0+XG4gICAgW3gsIHldID0gQHRyYW5zbGF0ZS1wb3MgcG9zXG4gICAgW3csIGhdID0gQHRyYW5zbGF0ZS1zaXplIHNpemVcbiAgICBAY3R4Lm1vdmUtdG8geCAtIHcvMiwgeSAtIGgvMlxuICAgIEBjdHgubGluZS10byB4ICsgdy8yLCB5IC0gaC8yXG4gICAgQGN0eC5saW5lLXRvIHggKyAgMCwgIHkgKyBoLzJcbiAgICBAY3R4LmxpbmUtdG8geCAtIHcvMiwgeSAtIGgvMlxuXG4gIGNsZWFyOiAtPlxuICAgIEBjdHguY2xlYXItcmVjdCAwLCAwLCBAdywgQGhcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IDFcbiAgICBAY3R4Lmdsb2JhbC1jb21wb3NpdGUtb3BlcmF0aW9uID0gbW9kZS10by1vcGVyYXRpb24gTU9ERV9OT1JNQUxcblxuICBkcmF3LW9yaWdpbjogLT5cbiAgICBbY3gsIGN5XSA9IGdhbWUtc3RhdGUuY2FtZXJhLXBvc1xuICAgIEBjdHguc3Ryb2tlLXN0eWxlID0gXFwjMGYwXG4gICAgQGN0eC5saW5lLXdpZHRoID0gMlxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAX2xpbmUgWzAsIGN5IC0gMTAwMF0sIFswLCBjeSArIDEwMDBdXG4gICAgQF9saW5lIFtjeCAtIDEwMDAsIDBdLCBbY3ggKyAxMDAwLCAwXVxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LnN0cm9rZSFcblxuICBkcmF3LWxvY2FsLWdyaWQ6IC0+XG4gICAgW2N4LCBjeV0gPSBnYW1lLXN0YXRlLmNhbWVyYS1wb3NcbiAgICBueCA9IGN4IC0gY3ggJSBsb2NhbC1ncmlkLWZpZGVsaXR5XG4gICAgbnkgPSBjeSAtIGN5ICUgbG9jYWwtZ3JpZC1maWRlbGl0eVxuICAgIGxncyA9IGxvY2FsLWdyaWQtc2l6ZS8yXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gMC40XG4gICAgZm9yIGkgZnJvbSBueCAtIGxncyB0byBueCArIGxncyBieSBsb2NhbC1ncmlkLWZpZGVsaXR5XG4gICAgICBAX2xpbmUgW2ksIGN5IC0gbGdzXSwgW2ksIGN5ICsgbGdzXVxuICAgIGZvciBpIGZyb20gbnkgLSBsZ3MgdGlsIG55ICsgbGdzIGJ5IGxvY2FsLWdyaWQtZmlkZWxpdHlcbiAgICAgIEBfbGluZSBbY3ggLSBsZ3MsIGkgKyBsb2NhbC1ncmlkLWZpZGVsaXR5XSwgW2N4ICsgbGdzLCBpICsgbG9jYWwtZ3JpZC1maWRlbGl0eV1cbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5zdHJva2UhXG5cbiAgc3ByaXRlOiAoeyB3aWR0aCwgaGVpZ2h0LCBpbWFnZSwgaW5kZXggfSwgcG9zLCBzaXplKSAtPlxuICAgIFt4LCB5XSA9IEB0cmFuc2xhdGUtcG9zIHBvc1xuICAgIFt3LCBoXSA9IEB0cmFuc2xhdGUtc2l6ZSBzaXplXG4gICAgQGN0eC5kcmF3LWltYWdlIGltYWdlLCBpbmRleCAqIHdpZHRoLCAwLCB3aWR0aCwgaGVpZ2h0LCB4IC0gdy8yLCB5IC0gaC8yLCB3LCBoXG5cbiAgaW5zdGFsbDogKGhvc3QpIC0+XG4gICAgaG9zdC5hcHBlbmQtY2hpbGQgQGNhbnZhc1xuXG4iLCJcbiNcbiMgQnVsbGV0XG4jXG5cbmV4cG9ydCBjcmVhdGUgPSAocG9zLCB2ZWwsIGNvbG9yKSAtPlxuICBwb3M6ICBbIHBvcy4wLCBwb3MuMSBdXG4gIHZlbDogIFsgMCB2ZWwgXVxuICBzaXplOiBbIDEwMCAzMDAgXVxuICBsaWZlOiAxXG4gIM6UbGlmZTogMVxuICBjb2xvcjogY29sb3JcbiAgYWxwaGE6IDEgIy42XG5cbmV4cG9ydCBkcmF3ID0gKGNhbnZhcywgeyBwb3MsIHNpemUsIGFscGhhLCBjb2xvciwgbGlmZSB9KSAtPlxuICB0b3Atc2l6ZSA9IFsgc2l6ZS4wLCBzaXplLjEgKiAxLzQgXVxuICBidG0tc2l6ZSA9IFsgc2l6ZS4wLCBzaXplLjEgKiAzLzQgXVxuICB0b3AtcG9zICA9IFsgcG9zLjAsIHBvcy4xICsgc2l6ZS4xICogMy84IF1cbiAgYnRtLXBvcyAgPSBbIHBvcy4wLCBwb3MuMSAtIHNpemUuMSAqIDEvOCBdXG4gIGNhbnZhcy51cHRyaSB0b3AtcG9zLCB0b3Atc2l6ZSwgY29sb3I6IGNvbG9yLCBhbHBoYTogYWxwaGEgKiBsaWZlLCBtb2RlOiBNT0RFX0FERFxuICBjYW52YXMuZG50cmkgYnRtLXBvcywgYnRtLXNpemUsIGNvbG9yOiBjb2xvciwgYWxwaGE6IGFscGhhICogbGlmZSwgbW9kZTogTU9ERV9BRERcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBFYXNpbmcgZnVuY3Rpb25zXG4jXG5cbiMgSGVscGVyc1xuXG5leHBvcnQgbWl4LWVhc2UgPSAoSW4sIE91dCkgLT4gKG4pIC0+XG4gIGlmIG4gPCAxLzJcbiAgICAxLzIgKiBJbiBuICogMlxuICBlbHNlXG4gICAgMS8yICsgMS8yICogT3V0IChuIC0gMS8yKSAqIDJcblxuXG4jIEluLWZ1bmN0aW9uc1xuXG5leHBvcnQgTGluZWFyICAgID0gKG4pIC0+IG5cblxuZXhwb3J0IFBvd2VyMiAgICA9IChuKSAtPiBuICogblxuXG5leHBvcnQgUG93ZXIzICAgID0gKG4pIC0+IG4gKiBuICogblxuXG5leHBvcnQgUG93ZXI0ICAgID0gKG4pIC0+IG4gKiBuICogbiAqIG5cblxuXG4jIE91dC1mdW5jdGlvbnNcblxuZXhwb3J0IFBvd2VyT3V0MiA9IChuLCBtID0gMSAtIG4pIC0+IDEgLSBtICogbVxuXG5leHBvcnQgUG93ZXJPdXQzID0gKG4sIG0gPSAxIC0gbikgLT4gMSAtIG0gKiBtICogbVxuXG5leHBvcnQgUG93ZXJPdXQ0ID0gKG4sIG0gPSAxIC0gbikgLT4gMSAtIG0gKiBtICogbSAqIG1cblxuXG4jIE1peGVkIGZ1bmN0aW9uc1xuXG5leHBvcnQgU3dpbmcyID0gbWl4LWVhc2UgUG93ZXIyLCBQb3dlck91dDJcblxuZXhwb3J0IFN3aW5nMyA9IG1peC1lYXNlIFBvd2VyMywgUG93ZXJPdXQzXG5cbmV4cG9ydCBTd2luZzQgPSBtaXgtZWFzZSBQb3dlcjQsIFBvd2VyT3V0NFxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHRhdSwgYWJzLCBsZXJwIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgVHdlZW4gfSA9IHJlcXVpcmUgXFwuL3R3ZWVuXG5cbnsgbWl4LWVhc2UsIExpbmVhciB9ID0gRWFzZSA9IHJlcXVpcmUgXFwuL2Vhc2VcblxuXG4jXG4jIEZsaXBmbG9wcGVyXG4jXG5cbmV4cG9ydCBjbGFzcyBGbGlwRmxvcHBlclxuXG4gIE1PREVfSURMRSAgICAgID0gU3ltYm9sIFxcaWRsZVxuICBNT0RFX0NPQ0tJTkcgICA9IFN5bWJvbCBcXGNvY2tpbmdcbiAgTU9ERV9DT0NLRUQgICAgPSBTeW1ib2wgXFxjb2NrZWRcbiAgTU9ERV9VTkNPQ0tJTkcgPSBTeW1ib2wgXFx1bmNvY2tpbmdcbiAgTU9ERV9SRVZFUlNJTkcgPSBTeW1ib2wgXFxyZXZlcnNpbmdcblxuICBkLXN5bSA9IChuKSAtPiA8WyBGTElQIElETEUgRkxPUCBdPltuICsgMV1cbiAgc3RhZ2Utc3RlcCA9IHRhdS8zXG4gIHN0YWdlLXRvLXJvdGF0aW9uID0gKCogc3RhZ2Utc3RlcClcblxuICBub3JtYWxpc2Utc3RhZ2UgPSAocykgLT5cbiAgICBpZiBzIDwgMCB0aGVuIDMgLSAoLXMgJSAzKSBlbHNlIHMgJSAzXG5cbiAgbm9ybWFsaXNlLXJvdGF0aW9uID0gKM64KSAtPlxuICAgIGlmIM64IDwgMCB0aGVuIHRhdSAtICgtzrggJSB0YXUpIGVsc2UgzrggJSB0YXVcblxuXG4gICh7IEBzcGVlZD0xIH09e30pIC0+XG4gICAgQM64ICAgICA9IDBcbiAgICBAc3RhZ2UgPSAwXG4gICAgQG1vZGUgID0gTU9ERV9JRExFXG4gICAgQGNvY2stZGlyZWN0aW9uID0gMFxuICAgIEByZXZlcnNlLXRyaWdnZXIgPSAwXG4gICAgQGlnbm9yZWQtdHJpZ2dlciA9IDBcblxuICAgIEB0cmlnZ2VyLXN0YXRlID1cbiAgICAgIGZsaXA6XG4gICAgICAgIGluZ29yZTogbm9cbiAgICAgIGZsb3A6XG4gICAgICAgIGluZ29yZTogbm9cblxuICByb3RhdGlvbjp+IC0+XG4gICAgbm9ybWFsaXNlLXJvdGF0aW9uIEDOuFxuXG4gIHN0YXRpYy10by1zdGFnZTogKGQsIHApIC0+XG4gICAgaWYgQHJldmVyc2UtdHJpZ2dlciBpcyBkXG4gICAgICBpZiBwIGlzIDBcbiAgICAgICAgQHJldmVyc2UtdHJpZ2dlciA9IDBcbiAgICAgICAgQGNvY2stZGlyZWN0aW9uID0gMFxuICAgICAgICBsb2cgXFxyZXZlcnQtcmVsZWFzZTogZC1zeW0gZFxuICAgICAgZWxzZSBsb2cgXFxyZXZlcnQ6IGQtc3ltIGRcbiAgICAgIHJldHVyblxuXG4gICAgaWYgQGlnbm9yZWQtdHJpZ2dlciBpcyBkXG4gICAgICBpZiBwIGlzIDBcbiAgICAgICAgQGlnbm9yZWQtdHJpZ2dlciA9IDBcbiAgICAgICAgQGNvY2stZGlyZWN0aW9uID0gMFxuICAgICAgICBsb2cgXFxpZ25vcmUtcmVsZWFzZTogZC1zeW0gZFxuICAgICAgZWxzZSBsb2cgXFxpZ25vcmU6IGQtc3ltIGRcbiAgICAgIHJldHVyblxuXG4gICAgc3dpdGNoIEBtb2RlXG4gICAgfCBNT0RFX0lETEUgPT5cbiAgICAgIEBtb2RlID0gTU9ERV9DT0NLSU5HXG4gICAgICBAY29jay1kaXJlY3Rpb24gPSBkXG4gICAgICBAY29jayAuLi5cblxuICAgIHwgTU9ERV9DT0NLSU5HID0+XG4gICAgICBpZiBAY29jay1kaXJlY3Rpb24gaXMgZFxuICAgICAgICBAY29jayAuLi5cbiAgICAgIGVsc2VcbiAgICAgICAgQGNvY2stZGlyZWN0aW9uID0gZFxuICAgICAgICBAaWdub3JlZC10cmlnZ2VyID0gZCAqIC0xXG4gICAgICAgIEBjb2NrIC4uLlxuXG4gICAgfCBNT0RFX0NPQ0tFRCA9PlxuICAgICAgaWYgQGNvY2stZGlyZWN0aW9uIGlzIGRcbiAgICAgICAgQG1vZGUgPSBNT0RFX1VOQ09DS0lOR1xuICAgICAgICBAdW5jb2NrIC4uLlxuICAgICAgZWxzZVxuICAgICAgICBAbW9kZSA9IE1PREVfUkVWRVJTSU5HXG4gICAgICAgIEBpZ25vcmVkLXRyaWdnZXIgPSBkICogLTFcbiAgICAgICAgQHJldmVyc2UgLi4uXG5cbiAgICB8IE1PREVfVU5DT0NLSU5HID0+XG4gICAgICBpZiBAY29jay1kaXJlY3Rpb24gaXMgZFxuICAgICAgICBAdW5jb2NrIC4uLlxuICAgICAgZWxzZVxuICAgICAgICBAbW9kZSA9IE1PREVfUkVWRVJTSU5HXG4gICAgICAgIEBpZ25vcmVkLXRyaWdnZXIgPSBkICogLTFcbiAgICAgICAgQHJldmVyc2UgLi4uXG5cbiAgICB8IE1PREVfUkVWRVJTSU5HID0+XG4gICAgICBAcmV2ZXJzZSAuLi5cblxuICBpZGxlOiAoZCkgLT5cbiAgICBAc3RhZ2UgPSBub3JtYWxpc2Utc3RhZ2UgQHN0YWdlICsgZFxuICAgIEDOuCAgICAgPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2VcbiAgICBAbW9kZSAgPSBNT0RFX0lETEVcbiAgICBAY29jay1kaXJlY3Rpb24gPSAwXG4gICAgQGlnbm9yZWQtdHJpZ2dlciA9IDBcblxuICBjb2NrOiAoZCwgcCkgLT5cbiAgICB0YXJnZXQtcm90YXRpb24gID0gc3RhZ2UtdG8tcm90YXRpb24gQHN0YWdlICsgZFxuICAgIGN1cnJlbnQtcm90YXRpb24gPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2VcblxuICAgIEDOuCA9IGxlcnAgKEVhc2UuUG93ZXJPdXQzIHApLzIsIGN1cnJlbnQtcm90YXRpb24sIHRhcmdldC1yb3RhdGlvblxuICAgIGlmIHAgaXMgMSB0aGVuIEBtb2RlID0gTU9ERV9DT0NLRURcbiAgICBpZiBwIGlzIDAgdGhlbiBAaWRsZSAwXG5cbiAgdW5jb2NrOiAoZCwgcCkgLT5cbiAgICB0YXJnZXQtcm90YXRpb24gID0gc3RhZ2UtdG8tcm90YXRpb24gQHN0YWdlICsgZFxuICAgIGN1cnJlbnQtcm90YXRpb24gPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2VcblxuICAgIGlmIHAgaXMgMFxuICAgICAgQGlkbGUgZFxuICAgIGVsc2VcbiAgICAgIEDOuCA9IGxlcnAgMC41ICsgKDEgLSAoRWFzZS5Qb3dlcjMgcCkpLzIsIGN1cnJlbnQtcm90YXRpb24sIHRhcmdldC1yb3RhdGlvblxuXG4gIHJldmVyc2U6IChkLCBwKSAtPlxuICAgIHRhcmdldC1yb3RhdGlvbiAgPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2VcbiAgICBjdXJyZW50LXJvdGF0aW9uID0gc3RhZ2UtdG8tcm90YXRpb24gQHN0YWdlIC0gZC8yXG4gICAgQM64ID0gbGVycCBwLCBjdXJyZW50LXJvdGF0aW9uLCB0YXJnZXQtcm90YXRpb25cblxuICAgIGlmIHAgaXMgMVxuICAgICAgQGlkbGUgMFxuICAgICAgQHJldmVyc2UtdHJpZ2dlciA9IGRcbiAgICAgIEBjb2NrLWRpcmVjdGlvbiA9IDBcblxuXG5cbmV4cG9ydCBjbGFzcyBFYXN5RmxpcEZsb3BwZXJcblxuICB0aHJlc2hvbGQgICAgICAgICAgPSB0YXUvNjBcbiAgcmV0dXJuLXRocmVzaG9sZCAgID0gMC4xXG4gIHN0YWdlLXN0ZXAgICAgICAgICA9IHRhdS8zXG4gIHN0YWdlLXRvLXJvdGF0aW9uICA9ICgqIHN0YWdlLXN0ZXApXG4gIHRyaWdnZXItbmFtZSAgICAgICA9IChkKSAtPiBpZiBkIGlzIC0xIHRoZW4gVFJJR0dFUl9GTElQIGVsc2UgVFJJR0dFUl9GTE9QXG4gIG5vcm1hbGlzZS1zdGFnZSAgICA9IChzKSAtPiBpZiBzIDwgMCB0aGVuIDMgLSAoLXMgJSAzKSBlbHNlIHMgJSAzXG4gIG5vcm1hbGlzZS1yb3RhdGlvbiA9ICjOuCkgLT4gaWYgzrggPCAwIHRoZW4gdGF1IC0gKC3OuCAlIHRhdSkgZWxzZSDOuCAlIHRhdVxuXG4gIE1PREVfSURMRSA9IFN5bWJvbCBcXGlkbGVcbiAgTU9ERV9GTElQID0gU3ltYm9sIFxcZmxpcFxuICBNT0RFX0ZMT1AgPSBTeW1ib2wgXFxmbG9wXG5cbiAgVFJJR0dFUl9GTElQID0gXFxmbGlwXG4gIFRSSUdHRVJfRkxPUCA9IFxcZmxvcFxuXG4gIGN1c3RvbS1lYXNlID0gRWFzZS5Qb3dlcjIgI21peC1lYXNlIFBvd2VyMiwgUG93ZXJPdXQ0XG5cbiAgKHsgQHNwZWVkPTEgfT17fSkgLT5cbiAgICBAzrggICAgID0gMFxuICAgIEBzdGFnZSA9IDBcbiAgICBAbW9kZSAgPSBNT0RFX0lETEVcbiAgICBAZGlyZWN0aW9uID0gMFxuXG4gICAgQHRyaWdnZXItc3RhdGUgPVxuICAgICAgXCIjVFJJR0dFUl9GTElQXCI6IGlnbm9yZTogbm9cbiAgICAgIFwiI1RSSUdHRVJfRkxPUFwiOiBpZ25vcmU6IG5vXG5cbiAgcm90YXRpb246fiAtPlxuICAgIG5vcm1hbGlzZS1yb3RhdGlvbiBAzrhcblxuICBzdGF0aWMtdG8tc3RhZ2U6IChkLCBwKSAtPlxuICAgIHRyaWdnZXIgPSB0cmlnZ2VyLW5hbWUgZFxuXG4gICAgaWYgQHRyaWdnZXItc3RhdGVbdHJpZ2dlcl0uaWdub3JlXG4gICAgICBpZiBwIDwgcmV0dXJuLXRocmVzaG9sZFxuICAgICAgICBAdHJpZ2dlci1zdGF0ZVt0cmlnZ2VyXS5pZ25vcmUgPSBub1xuXG4gICAgZWxzZVxuICAgICAgdGFyZ2V0ICA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZSArIGRcbiAgICAgIGN1cnJlbnQgPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2VcblxuICAgICAgQM64ID0gbGVycCAoY3VzdG9tLWVhc2UgcCksIGN1cnJlbnQsIHRhcmdldFxuXG4gICAgICBpZiAoYWJzIEDOuCAtIHRhcmdldCkgPCB0aHJlc2hvbGRcbiAgICAgICAgQM64ID0gdGFyZ2V0XG4gICAgICAgIEBzdGFnZSArPSBkXG4gICAgICAgIEB0cmlnZ2VyLXN0YXRlW3RyaWdnZXJdLmlnbm9yZSA9IHllc1xuXG4gIHJvdGF0aW9uOn4gLT5cbiAgICBub3JtYWxpc2Utcm90YXRpb24gQM64XG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgcmFmLCBmbG9vciwgZGVsYXkgfSA9IHJlcXVpcmUgXFxzdGRcblxuXG4jXG4jIEZyYW1lIERyaXZlclxuI1xuIyBTbWFsbCBlbmdpbmUgdGhhdCBjcmVhdGVzIGEgZnJhbWUgbG9vcFxuI1xuXG5leHBvcnQgY2xhc3MgRnJhbWVEcml2ZXJcblxuICB0cHMtaGlzdG9yeS13aW5kb3cgPSAyMFxuICBmcHMtaGlzdG9yeS13aW5kb3cgPSAyMFxuXG4gIFNIT1dfUkVBRE9VVCA9IHllc1xuICBSRU5ERVJfT05fVElDSyA9IG5vXG5cbiAgLT5cbiAgICBsb2cgXCJGcmFtZURyaXZlcjo6bmV3XCJcblxuICAgIEBzdGF0ZSA9XG4gICAgICB6ZXJvOiAwXG4gICAgICBsYXN0LXRpY2stdGltZTogMFxuICAgICAgbGFzdC1mcmFtZS10aW1lOiAwXG4gICAgICBmcmFtZTogMFxuICAgICAgcnVubmluZzogbm9cblxuICAgIEBjYWxsYmFja3MgPVxuICAgICAgdGljazogaWRcbiAgICAgIGZyYW1lOiBpZFxuXG4gICAgQHRwcyA9XG4gICAgICB2YWx1ZTogMFxuICAgICAgaGlzdG9yeTogWyAwIF0gKiB0cHMtaGlzdG9yeS13aW5kb3dcblxuICAgIEBmcHMgPVxuICAgICAgdmFsdWU6IDBcbiAgICAgIGhpc3Rvcnk6IFsgMCBdICogZnBzLWhpc3Rvcnktd2luZG93XG5cbiAgICBpZiBTSE9XX1JFQURPVVRcbiAgICAgIEByZWFkb3V0ID0gZG9jdW1lbnQuY3JlYXRlLWVsZW1lbnQgXFxwcmVcbiAgICAgIEByZWFkb3V0LnN0eWxlIDw8PCB7IHBvc2l0aW9uOiBcXGFic29sdXRlLCB0b3A6IDAsIHJpZ2h0OiAwIH1cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kLWNoaWxkIEByZWFkb3V0XG5cblxuICBmcmFtZTogfj5cbiAgICBpZiBAc3RhdGUucnVubmluZyB0aGVuIHJhZiBAZnJhbWVcblxuICAgIG5vdyA9IERhdGUubm93ISAtIEBzdGF0ZS56ZXJvXG4gICAgzpR0ICA9IG5vdyAtIEBzdGF0ZS5sYXN0LWZyYW1lLXRpbWVcblxuICAgIEBwdXNoLWZyYW1lLXRpbWUgzpR0XG5cbiAgICBAc3RhdGUubGFzdC1mcmFtZS10aW1lID0gbm93XG4gICAgQHN0YXRlLmZyYW1lICs9IDFcbiAgICBAY2FsbGJhY2tzLmZyYW1lIM6UdC8xMDAwLCBAc3RhdGUubGFzdC10aWNrLXRpbWUvMTAwMCwgQHN0YXRlLmZyYW1lLCBAZnBzXG5cbiAgdGljazogfj5cbiAgICBpZiBAc3RhdGUucnVubmluZyB0aGVuIGRlbGF5IDAsIEB0aWNrXG5cbiAgICBub3cgPSBEYXRlLm5vdyEgLSBAc3RhdGUuemVyb1xuICAgIM6UdCAgPSBub3cgLSBAc3RhdGUubGFzdC10aWNrLXRpbWVcblxuICAgIGlmIFNIT1dfUkVBRE9VVFxuICAgICAgQHJlYWRvdXQudGV4dC1jb250ZW50ID0gQGZwcy52YWx1ZSArIFwiIHwgXCIgKyBAdHBzLnZhbHVlXG5cbiAgICBAcHVzaC10aWNrLXRpbWUgzpR0XG4gICAgQHN0YXRlLmxhc3QtdGljay10aW1lID0gbm93XG4gICAgQGNhbGxiYWNrcy50aWNrIM6UdC8xMDAwLCBAc3RhdGUubGFzdC10aWNrLXRpbWUvMTAwMCwgQHN0YXRlLmZyYW1lLCBAZnBzXG5cbiAgICBpZiBSRU5ERVJfT05fVElDS1xuICAgICAgQHB1c2gtZnJhbWUtdGltZSDOlHRcbiAgICAgIEBzdGF0ZS5mcmFtZSArPSAxXG4gICAgICBAY2FsbGJhY2tzLmZyYW1lIEBzdGF0ZS5mcmFtZVxuXG4gIHN0YXJ0OiAtPlxuICAgIGlmIEBzdGF0ZS5ydW5uaW5nIGlzIHllcyB0aGVuIHJldHVyblxuICAgIGxvZyBcIkZyYW1lRHJpdmVyOjpTdGFydCAtIHN0YXJ0aW5nXCJcbiAgICBAc3RhdGUuemVybyA9IERhdGUubm93IVxuICAgIEBzdGF0ZS5sYXN0LXRpY2stdGltZSA9IDBcbiAgICBAc3RhdGUubGFzdC1mcmFtZS10aW1lID0gMFxuICAgIEBzdGF0ZS5ydW5uaW5nID0geWVzXG4gICAgQHRpY2shXG4gICAgQGZyYW1lISB1bmxlc3MgUkVOREVSX09OX1RJQ0tcblxuICBzdG9wOiAtPlxuICAgIGlmIEBzdGF0ZS5ydW5uaW5nIGlzIG5vIHRoZW4gcmV0dXJuXG4gICAgbG9nIFwiRnJhbWVEcml2ZXI6OlN0b3AgLSBzdG9wcGluZ1wiXG4gICAgQHN0YXRlLnJ1bm5pbmcgPSBub1xuXG4gIHRvZ2dsZTogLT5cbiAgICBpZiBAc3RhdGUucnVubmluZ1xuICAgICAgQHN0b3AhXG4gICAgZWxzZVxuICAgICAgQHN0YXJ0IVxuXG4gIHB1c2gtdGljay10aW1lOiAozpR0KSAtPlxuICAgIEB0cHMuaGlzdG9yeS5wdXNoIM6UdFxuICAgIEB0cHMuaGlzdG9yeS5zaGlmdCFcbiAgICBAdHBzLnZhbHVlID0gZmxvb3IgMTAwMCAqIHRwcy1oaXN0b3J5LXdpbmRvdyAvIEB0cHMuaGlzdG9yeS5yZWR1Y2UgKCspLCAwXG5cbiAgcHVzaC1mcmFtZS10aW1lOiAozpR0KSAtPlxuICAgIEBmcHMuaGlzdG9yeS5wdXNoIM6UdFxuICAgIEBmcHMuaGlzdG9yeS5zaGlmdCFcbiAgICBAZnBzLnZhbHVlID0gZmxvb3IgMTAwMCAqIGZwcy1oaXN0b3J5LXdpbmRvdyAvIEBmcHMuaGlzdG9yeS5yZWR1Y2UgKCspLCAwXG5cbiAgb24tdGljazogKM67KSAtPlxuICAgIEBjYWxsYmFja3MudGljayA9IM67XG5cbiAgb24tZnJhbWU6ICjOuykgLT5cbiAgICBAY2FsbGJhY2tzLmZyYW1lID0gzrtcblxuIiwiXG4jXG4jIEdsb2JhbCBDb25zdGFudHNcbiNcblxuIyBSZW5kZXJpbmcgbW9kZXNcbmdsb2JhbC5NT0RFX0NPTE9SICA9IFN5bWJvbCBcXGNvbG9yXG5nbG9iYWwuTU9ERV9OT1JNQUwgPSBTeW1ib2wgXFxub3JtYWxcbmdsb2JhbC5NT0RFX0FERCAgICA9IFN5bWJvbCBcXGFkZFxuXG4jIENvbnRyb2xsZXIgaW5wdXQgc2lnbmFsc1xuZ2xvYmFsLklOUFVUX0ZJUkUgICAgPSBTeW1ib2wgXFxpbnB1dC1maXJlXG5nbG9iYWwuSU5QVVRfRkxJUCAgICA9IFN5bWJvbCBcXGlucHV0LWZsaXBcbmdsb2JhbC5JTlBVVF9GTE9QICAgID0gU3ltYm9sIFxcaW5wdXQtZmlyZVxuZ2xvYmFsLklOUFVUX1NVUEVSICAgPSBTeW1ib2wgXFxpbnB1dC1zdXBlclxuZ2xvYmFsLklOUFVUX1BBVVNFICAgPSBTeW1ib2wgXFxpbnB1dC1wYXVzZVxuZ2xvYmFsLklOUFVUX1ggICAgICAgPSBTeW1ib2wgXFxpbnB1dC1tb3ZlLXhcbmdsb2JhbC5JTlBVVF9ZICAgICAgID0gU3ltYm9sIFxcaW5wdXQtbW92ZS15XG5nbG9iYWwuSU5QVVRfU1BFQ0lBTCA9IFN5bWJvbCBcXGlucHV0LXNwZWNpYWxcblxuXG4jXG4jIEdsb2JhbCBvcHRpb25zXG4jXG5cbmdsb2JhbC5HQU1FUEFEX0FYSVNfREVBRFpPTkUgPSAwLjJcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nLCBmbG9vciwgYWJzLCB0YXUsIHNpbiwgY29zLCBkaXYsIHYyIH0gPSByZXF1aXJlIFxcc3RkXG57IHdyYXAsIHJnYiwgbGVycCwgcm5kIH0gPSByZXF1aXJlIFxcc3RkXG5cbnJlcXVpcmUgXFwuL2dsb2JhbFxuXG57IEZyYW1lRHJpdmVyIH0gPSByZXF1aXJlIFxcLi9mcmFtZS1kcml2ZXJcbnsgRmxpcEZsb3BwZXIgfSA9IHJlcXVpcmUgXFwuL2ZsaXBmbG9wcGVyXG57IEJsaXR0ZXIgfSAgICAgPSByZXF1aXJlIFxcLi9ibGl0dGVyXG57IElucHV0IH0gICAgICAgPSByZXF1aXJlIFxcLi9pbnB1dFxueyBUd2VlbiB9ICAgICAgID0gcmVxdWlyZSBcXC4vdHdlZW5cblxuRWFzZSAgID0gcmVxdWlyZSBcXC4vZWFzZVxuVGltZXIgID0gcmVxdWlyZSBcXC4vdGltZXJcbkJ1bGxldCA9IHJlcXVpcmUgXFwuL2J1bGxldFxuXG5GSVJFX01PREVfQUxURVJOQVRFID0gU3ltYm9sIFxcYWx0ZXJuYXRlXG5GSVJFX01PREVfQkxFTkQgICAgID0gU3ltYm9sIFxcYmxlbmRcblxuXG4jIEhlbHBlciBjbGFzc2VzXG5cbmNsYXNzIENhbnZhc1xuXG4gIC0+XG4gICAgQGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZS1lbGVtZW50IFxcY2FudmFzXG4gICAgQGN0eCA9IEBjYW52YXMuZ2V0LWNvbnRleHQgXFwyZFxuICAgIEBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVyLWhlaWdodFxuICAgIEBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXItaGVpZ2h0IC8gMS41XG5cbiAgY2xlYXI6IC0+XG4gICAgQGN0eC5jbGVhci1yZWN0IDAsIDAsIEBjYW52YXMud2lkdGgsIEBjYW52YXMuaGVpZ2h0XG5cbiAgaW5zdGFsbDogKGhvc3QpIC0+XG4gICAgaG9zdC5hcHBlbmQtY2hpbGQgQGNhbnZhc1xuXG5cblxuIyBEZWJ1Z1xuXG5TSE9XX0VBU0lOR19URVNUUyA9IG5vXG5TSE9XX1RXRUVOX0JPWEVTICA9IG5vXG5cblxuIyBDb25maWdcblxuYXV0by10cmF2ZWwtc3BlZWQgICAgICA9IDUwMFxubWF4LXNwZWVkICAgICAgICAgICAgICA9IDUwMFxuYXV0by1maXJlLXNwZWVkICAgICAgICA9IDAuMDRcbmR1YWwtZmlyZS1zZXBhcmF0aW9uICAgPSAzNVxuY2FtZXJhLWRyaWZ0LWxpbWl0ICAgICA9IDIwMCAgICMgVE9ETzogTWFrZSBjYW1lcmEgc2VlayBjZW50ZXIgZ3JhZHVhbGx5XG5mbGlwLWZsb3AtdGltZSAgICAgICAgID0gMC4yXG5yb3RhdGlvbi1oaXN0b3J5LWxpbWl0ID0gMjAwXG5cbmNvbG9ycyA9XG4gIFsxIDAgMF0gWzEgMSAwXSBbMCAxIDBdXG4gIFswIDEgMF0gWzAgMSAxXSBbMCAwIDFdXG4gIFswIDAgMV0gWzEgMCAxXSBbMSAwIDBdXG5cbmZsaXBmbG9wcGVyID0gbmV3IEZsaXBGbG9wcGVyIHNwZWVkOiAwLjJcblxuXG4jIE1pc2MgZnVuY3Rpb25zXG5cbmxlcnAtY29sb3IgPSAodCwgc3RhcnQsIGVuZCkgLT5cbiAgWyAobGVycCB0LCBzdGFydC4wLCBlbmQuMCksXG4gICAgKGxlcnAgdCwgc3RhcnQuMSwgZW5kLjEpLFxuICAgIChsZXJwIHQsIHN0YXJ0LjIsIGVuZC4yKSBdXG5cbnJvdGF0aW9uLXRvLWNvbG9yID0gKM64KSAtPlxuICBpZiAwIDwgzrggPCB0YXVcbiAgICBmbG9vciAozrgvdGF1KSAqIGNvbG9ycy5sZW5ndGhcbiAgZWxzZVxuICAgIDBcblxucm90YXRpb24tdG8tc3ByaXRlLWluZGV4ID0gKM64LCBmcmFtZXMpIC0+XG4gIGZsb29yIGZyYW1lcyAqICjOuCAlICh0YXUvMykpIC8gKHRhdS8zKVxuXG5kaWFtb25kID0gKFt4LCB5XSkgLT5cbiAgaWYgeCA9PSAwXG4gICAgW3gsIHldXG4gIGVsc2VcbiAgICBbeC8yLCB5LzJdXG5cbmNvbG9yLWJhcnJlbCA9XG4gIGRyYXc6IChjbnYsIHBvcywgzrgsIHIgPSA3NSwgbyA9IHRhdSAqIDkvMTIsIG0gPSBjb2xvcnMubGVuZ3RoKSAtPlxuICAgIGxldCB0aGlzID0gY252LmN0eFxuICAgICAgZm9yIGNvbG9yLCBpIGluIGNvbG9yc1xuICAgICAgICBAZmlsbC1zdHlsZSA9IHJnYiBjb2xvclxuICAgICAgICBAYmVnaW4tcGF0aCFcbiAgICAgICAgQG1vdmUtdG8gcG9zLjAsIHBvcy4xXG4gICAgICAgIEBhcmMgcG9zLjAsIHBvcy4xLCByLCAtzrggKyB0YXUvbSppICsgbywgLc64ICsgdGF1L20qKGkrMSkgKyBvXG4gICAgICAgIEBjbG9zZS1wYXRoIVxuICAgICAgICBAZmlsbCFcbiAgICAgIEBzdHJva2Utc3R5bGUgPSBcXHdoaXRlXG4gICAgICBAYmVnaW4tcGF0aCFcbiAgICAgIEBtb3ZlLXRvIHBvcy4wLCBwb3MuMVxuICAgICAgQGxpbmUtdG8gcG9zLjAgKyByKnNpbigwKSwgcG9zLjEgLSByKmNvcygwKVxuICAgICAgQGNsb3NlLXBhdGghXG4gICAgICBAc3Ryb2tlIVxuXG5cbnNob290ID0gLT5cbiAgaWYgZ2FtZS1zdGF0ZS5maXJlLW1vZGUgaXMgRklSRV9NT0RFX0JMRU5EXG4gICAgbGVmdCAgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLy0yIDE1MF1cbiAgICBtaWQgICA9IGdhbWUtc3RhdGUucGxheWVyLnBvcyBgdjIuYWRkYCBbMCAxNzBdXG4gICAgcmlnaHQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLysyIDE1MF1cbiAgICBnYW1lLXN0YXRlLnBsYXllci1idWxsZXRzLnB1c2ggQnVsbGV0LmNyZWF0ZSBsZWZ0LCAgMjAwMCwgcmdiIGNvbG9yc1tnYW1lLXN0YXRlLnBsYXllci5jb2xvciAtIDFdXG4gICAgZ2FtZS1zdGF0ZS5wbGF5ZXItYnVsbGV0cy5wdXNoIEJ1bGxldC5jcmVhdGUgbWlkLCAgIDIwMDAsIHJnYiBjb2xvcnNbZ2FtZS1zdGF0ZS5wbGF5ZXIuY29sb3IgKyAwXVxuICAgIGdhbWUtc3RhdGUucGxheWVyLWJ1bGxldHMucHVzaCBCdWxsZXQuY3JlYXRlIHJpZ2h0LCAyMDAwLCByZ2IgY29sb3JzW2dhbWUtc3RhdGUucGxheWVyLmNvbG9yICsgMV1cblxuICBlbHNlXG4gICAgaWYgZ2FtZS1zdGF0ZS5zaG9vdC1hbHRlcm5hdGVcbiAgICAgIGxlZnQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLy0yIDE1MF1cbiAgICAgIGdhbWUtc3RhdGUucGxheWVyLWJ1bGxldHMucHVzaCBCdWxsZXQuY3JlYXRlIGxlZnQsIDMwMDAsIHJnYiBjb2xvcnNbZ2FtZS1zdGF0ZS5wbGF5ZXIuY29sb3JdXG4gICAgZWxzZVxuICAgICAgcmlnaHQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLysyIDE1MF1cbiAgICAgIGdhbWUtc3RhdGUucGxheWVyLWJ1bGxldHMucHVzaCBCdWxsZXQuY3JlYXRlIHJpZ2h0LCAzMDAwLCByZ2IgY29sb3JzW2dhbWUtc3RhdGUucGxheWVyLmNvbG9yXVxuICAgIGdhbWUtc3RhdGUuc2hvb3QtYWx0ZXJuYXRlID0gbm90IGdhbWUtc3RhdGUuc2hvb3QtYWx0ZXJuYXRlXG5cblxuXG4jIFNoYXJlZCBHYW1lc3RhdGVcblxuZ2xvYmFsLmdhbWUtc3RhdGUgPVxuICBjYW1lcmEtem9vbTogMVxuICBjYW1lcmEtcG9zOiBbMCAwXVxuXG4gIHBsYXllcjpcbiAgICBwb3M6IFswIDBdXG4gICAgdmVsOiBbMCAwXVxuICAgIGZsaXBwaW5nOiBub1xuICAgIGZsb3BwaW5nOiBub1xuICAgIGNvbG9yOiAwXG4gICAgcm90YXRpb246IDBcblxuICB0aW1lcnM6XG4gICAgYXV0by1maXJlLXRpbWVyOiBUaW1lci5jcmVhdGUgYXV0by1maXJlLXNwZWVkXG4gICAgZmxpcC1mbG9wLXRpbWVyOiBUaW1lci5jcmVhdGUgZmxpcC1mbG9wLXRpbWUsIGRpc2FibGVkOiB0cnVlXG5cbiAgZmlyZS1tb2RlOiBGSVJFX01PREVfQUxURVJOQVRFXG4gIHNob290LWFsdGVybmF0ZTogbm9cbiAgZmlyZS1yZW5kZXItYWx0ZXJuYXRlOiBub1xuICB0YXJnZXQtcG9zOiBbMCA1MDBdXG4gIHBsYXllci1idWxsZXRzOiBbXVxuXG4gIGlucHV0LXN0YXRlOlxuICAgIHVwOiAgICBvZmYgICAgIyBCVVRUT05TXG4gICAgZG93bjogIG9mZlxuICAgIGxlZnQ6ICBvZmZcbiAgICByaWdodDogb2ZmXG4gICAgZmlyZTogIG9mZlxuICAgIHBhdXNlOiBvZmZcblxuICAgIGZsaXA6IDAgICAgICAgIyBUUklHR0VSU1xuICAgIGZsb3A6IDBcblxuICAgIHg6IDAgICAgICAgICAgIyBKT1lTVElDS1NcbiAgICB5OiAwXG5cbiAgICBtb3VzZS14OiAwICAgICMgUE9JTlRFUlNcbiAgICBtb3VzZS15OiAwXG5cblxuIyBEZWJ1ZyBzdGF0ZVxuXG5yb3RhdGlvbi1oaXN0b3J5ID0gW11cblxucHVzaC1yb3RhdGlvbi1oaXN0b3J5ID0gKG4pIC0+XG4gIHJvdGF0aW9uLWhpc3RvcnkucHVzaCBuXG4gIGlmIHJvdGF0aW9uLWhpc3RvcnkubGVuZ3RoID49IHJvdGF0aW9uLWhpc3RvcnktbGltaXRcbiAgICByb3RhdGlvbi1oaXN0b3J5LnNoaWZ0IVxuXG5cbiNcbiMgSU5JVFxuI1xuXG5tYWluLWNhbnZhcyAgPSBuZXcgQmxpdHRlclxuZGVidWctY2FudmFzID0gbmV3IENhbnZhc1xuaW5wdXQgICAgICAgID0gbmV3IElucHV0XG5cblxuI1xuIyBSRU5ERVJcbiNcblxuU3ByaXRlID0gKHNyYywgWyB3aWR0aCwgaGVpZ2h0IF0sIGZyYW1lcykgLT5cbiAgaW1hZ2UgPSBuZXcgSW1hZ2VcbiAgaW1hZ2Uud2lkdGggID0gd2lkdGggKiBmcmFtZXNcbiAgaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0XG4gIGltYWdlLnNyYyAgICA9IHNyY1xuICBpbmRleDogMFxuICB3aWR0aDogd2lkdGhcbiAgaGVpZ2h0OiBoZWlnaHRcbiAgaW1hZ2U6IGltYWdlXG4gIGZyYW1lczogZnJhbWVzXG5cbnBsYXllci1zcHJpdGUgPSBTcHJpdGUgXFwvYXNzZXRzL3BsYXllci1zcHJpdGUucG5nLCBbIDEwMCwgMTIwIF0sIDI0XG5wbGF5ZXItc3ByaXRlLXNpemUgPSBbIDcwIDgwIF1cblxucmVuZGVyID0gKM6UdCwgdCkgLT5cbiAgcCA9IFRpbWVyLmdldC1wcm9ncmVzcyBAdGltZXJzLmZsaXAtZmxvcC10aW1lclxuXG4gIHBsYXllci1jb2xvciA9IHJnYiBkb1xuICAgIGlmIEBwbGF5ZXIuZmxpcHBpbmdcbiAgICAgIGxlcnAtY29sb3IgcCwgY29sb3JzW0BwbGF5ZXIuY29sb3JdLCBjb2xvcnNbd3JhcCAwLCBjb2xvcnMubGVuZ3RoIC0gMSwgQHBsYXllci5jb2xvciArIDFdXG4gICAgZWxzZSBpZiBAcGxheWVyLmZsb3BwaW5nXG4gICAgICBsZXJwLWNvbG9yIHAsIGNvbG9yc1tAcGxheWVyLmNvbG9yXSwgY29sb3JzW3dyYXAgMCwgY29sb3JzLmxlbmd0aCAtIDEsIEBwbGF5ZXIuY29sb3IgLSAxXVxuICAgIGVsc2VcbiAgICAgIGNvbG9yc1tAcGxheWVyLmNvbG9yXVxuXG4gIHNpZ2lsLXBvcyA9IEBwbGF5ZXIucG9zIGB2Mi5hZGRgIFsgMCAtOCBdXG5cbiAgbWFpbi1jYW52YXMuY2xlYXIhXG4gIG1haW4tY2FudmFzLmRyYXctb3JpZ2luIVxuICBtYWluLWNhbnZhcy5kcmF3LWxvY2FsLWdyaWQhXG5cbiAgbWFpbi1jYW52YXMucmVjdCAgIEB0YXJnZXQtcG9zLCBbOTAgOTBdLCBjb2xvcjogXFxibHVlXG5cbiAgbWFpbi1jYW52YXMuc3ByaXRlIHBsYXllci1zcHJpdGUsIEBwbGF5ZXIucG9zLCBwbGF5ZXItc3ByaXRlLXNpemVcbiAgbGVuID0gNSArIHJuZCA1MFxuICBtYWluLWNhbnZhcy5kbnRyaSBAcGxheWVyLnBvcyBgdjIuYWRkYCBbMCAtMjggLSBsZW4vMl0sIFsyMCBsZW5dLCBjb2xvcjogcGxheWVyLWNvbG9yXG5cbiAgZm9yIGJ1bGxldCBpbiBAcGxheWVyLWJ1bGxldHNcbiAgICBCdWxsZXQuZHJhdyBtYWluLWNhbnZhcywgYnVsbGV0XG5cblxuICAjIERlYnVnIHJlbmRlcmluZ1xuXG4gIGxldCB0aGlzID0gZGVidWctY2FudmFzLmN0eFxuXG4gICAgeyB3aWR0aCwgaGVpZ2h0IH0gPSBkZWJ1Zy1jYW52YXMuY2FudmFzXG5cbiAgICBkZWJ1Zy1jYW52YXMuY2xlYXIhXG4gICAgY29sb3ItYmFycmVsLmRyYXcgZGVidWctY2FudmFzLCBbd2lkdGgvMiwgMTAwXSwgZ2FtZS1zdGF0ZS5wbGF5ZXIucm90YXRpb25cbiAgICBAZmlsbC1zdHlsZSA9IHJnYiBjb2xvcnNbZ2FtZS1zdGF0ZS5wbGF5ZXIuY29sb3JdXG4gICAgQGZpbGwtcmVjdCB3aWR0aC8yIC0gMiwgMTAsIDQsIDE1XG5cbiAgICBmb3IgZCwgeCBpbiByb3RhdGlvbi1oaXN0b3J5XG4gICAgICBAZmlsbC1zdHlsZSA9IHJnYiBjb2xvcnNbIHJvdGF0aW9uLXRvLWNvbG9yIGQgXVxuICAgICAgQGZpbGwtcmVjdCB4L3JvdGF0aW9uLWhpc3RvcnktbGltaXQgKiB3aWR0aCwgaGVpZ2h0IC0gMTAgLSBkICogMTAsIDIsIDJcblxuICAgIEBmaWxsLXN0eWxlID0gXFxncmV5XG4gICAgQGZpbGwtcmVjdCAyMCwgaGVpZ2h0LzIsIDIwLCA1MFxuICAgIEBmaWxsLXJlY3QgNTAsIGhlaWdodC8yLCAyMCwgNTBcblxuICAgIEBmaWxsLXN0eWxlID0gXFx3aGl0ZVxuICAgIEBmaWxsLXJlY3QgMjAsIGhlaWdodC8yLCAyMCwgNTAgKiBnYW1lLXN0YXRlLmlucHV0LXN0YXRlLmZsaXBcbiAgICBAZmlsbC1yZWN0IDUwLCBoZWlnaHQvMiwgMjAsIDUwICogZ2FtZS1zdGF0ZS5pbnB1dC1zdGF0ZS5mbG9wXG5cbiAgICBpZiBTSE9XX0VBU0lOR19URVNUU1xuICAgICAgQGZpbGwtc3R5bGUgPSBcXHdoaXRlXG4gICAgICBmb3IgaSBmcm9tIDAgdG8gd2lkdGggYnkgNSA9PiBAZmlsbC1yZWN0IGksIGhlaWdodCAtIDE1MCAtIDEwMCAqIEVhc2UuTGluZWFyKGkvd2lkdGgpLCAyLCAyXG4gICAgICBAZmlsbC1zdHlsZSA9IFxccmVkXG4gICAgICBmb3IgaSBmcm9tIDAgdG8gd2lkdGggYnkgNSA9PiBAZmlsbC1yZWN0IGksIGhlaWdodCAtIDE1MCAtIDEwMCAqIEVhc2UuUG93ZXIyKGkvd2lkdGgpLCAyLCAyXG4gICAgICBAZmlsbC1zdHlsZSA9IFxcb3JhbmdlXG4gICAgICBmb3IgaSBmcm9tIDAgdG8gd2lkdGggYnkgNSA9PiBAZmlsbC1yZWN0IGksIGhlaWdodCAtIDE1MCAtIDEwMCAqIEVhc2UuUG93ZXIzKGkvd2lkdGgpLCAyLCAyXG4gICAgICBAZmlsbC1zdHlsZSA9IFxceWVsbG93XG4gICAgICBmb3IgaSBmcm9tIDAgdG8gd2lkdGggYnkgNSA9PiBAZmlsbC1yZWN0IGksIGhlaWdodCAtIDE1MCAtIDEwMCAqIEVhc2UuUG93ZXI0KGkvd2lkdGgpLCAyLCAyXG4gICAgICBAZmlsbC1zdHlsZSA9IFxcZ3JlZW5cbiAgICAgIGZvciBpIGZyb20gMCB0byB3aWR0aCBieSA1ID0+IEBmaWxsLXJlY3QgaSwgaGVpZ2h0IC0gMTUwIC0gMTAwICogRWFzZS5Qb3dlck91dDIoaS93aWR0aCksIDIsIDJcbiAgICAgIEBmaWxsLXN0eWxlID0gXFxjeWFuXG4gICAgICBmb3IgaSBmcm9tIDAgdG8gd2lkdGggYnkgNSA9PiBAZmlsbC1yZWN0IGksIGhlaWdodCAtIDE1MCAtIDEwMCAqIEVhc2UuUG93ZXJPdXQzKGkvd2lkdGgpLCAyLCAyXG4gICAgICBAZmlsbC1zdHlsZSA9IFxcYmx1ZVxuICAgICAgZm9yIGkgZnJvbSAwIHRvIHdpZHRoIGJ5IDUgPT4gQGZpbGwtcmVjdCBpLCBoZWlnaHQgLSAxNTAgLSAxMDAgKiBFYXNlLlBvd2VyT3V0NChpL3dpZHRoKSwgMiwgMlxuXG4gICAgYm94ID0gKGksIHMpIH4+XG4gICAgICBAZmlsbC1zdHlsZSA9IGlmIG5vdCBzIHRoZW4gXFxsaWdodGdyZXkgZWxzZSBcXHJlZFxuICAgICAgQGZpbGwtcmVjdCB3aWR0aCAtIDUwLCA0MCArIGkgKiA0MCwgMzAsIDMwXG5cbiAgICBib3ggMCwgZmxpcGZsb3BwZXIudHJpZ2dlci1zdGF0ZS5mbGlwLmlnbm9yZVxuICAgIGJveCAxLCBmbGlwZmxvcHBlci50cmlnZ2VyLXN0YXRlLmZsb3AuaWdub3JlXG5cblxuI1xuIyBVUERBVEVcbiNcblxudXBkYXRlID0gKM6UdCwgdCkgLT5cblxuICAjIFVwZGF0ZSB0aW1lcnNcblxuICBUd2Vlbi51cGRhdGUtYWxsIM6UdFxuICBUaW1lci51cGRhdGUtYW5kLWNhcnJ5IEB0aW1lcnMuYXV0by1maXJlLXRpbWVyLCDOlHRcbiAgaW5wdXQudXBkYXRlIM6UdCAgIyBEZWJ1ZyBvbmx5IC0gcmVhbCBpbnB1dCBjb250cm9sbGVyIGRvZXNuJ3QgbmVlZCB0aW1lcnNcblxuXG4gICMgQ29uc3VtZSBpbnB1dCBldmVudHNcblxuICB3aGlsZSBldmVudCA9IGlucHV0LnBlbmRpbmctZXZlbnRzLnNoaWZ0IVxuICAgIFsgdHlwZSwgdmFsdWUgXSA9IGV2ZW50XG5cbiAgICBzd2l0Y2ggdHlwZVxuICAgIHwgSU5QVVRfRklSRSAgPT5cbiAgICAgIGlmIEBpbnB1dC1zdGF0ZS5maXJlIGlzbnQgdmFsdWVcbiAgICAgICAgQGlucHV0LXN0YXRlLmZpcmUgPSB2YWx1ZVxuICAgICAgICBpZiB2YWx1ZVxuICAgICAgICAgIHNob290IVxuICAgICAgICAgIGlmIEBmaXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURVxuICAgICAgICAgICAgVGltZXIucmVzZXQgQHRpbWVycy5hdXRvLWZpcmUtdGltZXIsIGF1dG8tZmlyZS1zcGVlZCAqIGlmIEBmaXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURSB0aGVuIDEgZWxzZSAyXG5cbiAgICB8IElOUFVUX1ggPT4gQGlucHV0LXN0YXRlLnggPSB2YWx1ZVxuICAgIHwgSU5QVVRfWSA9PiBAaW5wdXQtc3RhdGUueSA9IHZhbHVlXG5cbiAgICB8IElOUFVUX1BBVVNFID0+XG4gICAgICBpZiB2YWx1ZVxuICAgICAgICBmcmFtZS1kcml2ZXIudG9nZ2xlIVxuXG4gICAgfCBJTlBVVF9GTElQID0+XG4gICAgICBpZiBAaW5wdXQtc3RhdGUuZmxpcCA8IHZhbHVlXG4gICAgICAgIGZsaXBmbG9wcGVyLnN0YXRpYy10by1zdGFnZSAtMSwgdmFsdWVcbiAgICAgIGVsc2UgaWYgQGlucHV0LXN0YXRlLmZsaXAgPiB2YWx1ZVxuICAgICAgICBmbGlwZmxvcHBlci5zdGF0aWMtdG8tc3RhZ2UgLTEsIHZhbHVlXG4gICAgICBAaW5wdXQtc3RhdGUuZmxpcCAgPSB2YWx1ZVxuXG4gICAgfCBJTlBVVF9GTE9QID0+XG4gICAgICBpZiBAaW5wdXQtc3RhdGUuZmxvcCA8IHZhbHVlXG4gICAgICAgIGZsaXBmbG9wcGVyLnN0YXRpYy10by1zdGFnZSAxLCB2YWx1ZVxuICAgICAgZWxzZSBpZiBAaW5wdXQtc3RhdGUuZmxvcCA+IHZhbHVlXG4gICAgICAgIGZsaXBmbG9wcGVyLnN0YXRpYy10by1zdGFnZSAxLCB2YWx1ZVxuICAgICAgQGlucHV0LXN0YXRlLmZsb3AgID0gdmFsdWVcblxuXG4gICMgVHJhdmVsIGZvcndhcmQgaW5leG9yYWJseVxuXG4gIEBwbGF5ZXIucG9zLjEgKz0gYXV0by10cmF2ZWwtc3BlZWQgKiDOlHRcbiAgQHRhcmdldC1wb3MuMSArPSBhdXRvLXRyYXZlbC1zcGVlZCAqIM6UdFxuXG5cbiAgIyBHZW5lcmF0ZSBpbnB1dCB2ZWxvY2l0eSB2ZWN0b3JcblxuICBsZWZ0LXRvLXJpZ2h0LXZlbCA9XG4gICAgaWYgQGlucHV0LXN0YXRlLmxlZnQgdGhlbiAtMVxuICAgIGVsc2UgaWYgQGlucHV0LXN0YXRlLnJpZ2h0IHRoZW4gMVxuICAgIGVsc2UgMFxuXG4gIGZyb250LXRvLWJhY2stdmVsID1cbiAgICBpZiBAaW5wdXQtc3RhdGUuZG93biB0aGVuIC0xXG4gICAgZWxzZSBpZiBAaW5wdXQtc3RhdGUudXAgdGhlbiAxXG4gICAgZWxzZSAwXG5cbiAgaW5wdXQtdmVsID0gWyBAaW5wdXQtc3RhdGUueCwgQGlucHV0LXN0YXRlLnkgXVxuXG5cbiAgIyBOb3JtYWxpc2UgaW5wdXQgdmVsb2NpdHkgb3IgY2lyY2xlIChmd2QpIG9yIGRpYW1vbmQgKGJhY2spXG5cbiAgIyBpZiBpbnB1dC12ZWwuMSA+PSAwXG4gICMgICBwbGF5ZXItdmVsID0gKHYyLm5vcm0gaW5wdXQtdmVsKSBgdjIuc2NhbGVgIG1heC1zcGVlZFxuICAjIGVsc2VcbiAgIyAgIHBsYXllci12ZWwgPSAoZGlhbW9uZCBpbnB1dC12ZWwpIGB2Mi5zY2FsZWAgbWF4LXNwZWVkXG5cbiAgcGxheWVyLXZlbCA9IGlucHV0LXZlbCBgdjIuc2NhbGVgIG1heC1zcGVlZFxuXG5cbiAgIyBBcHBseSBpbnB1dCB2ZWxvY2l0eSB0byBwbGF5ZXJcblxuICBAcGxheWVyLnBvcy4wICs9IHBsYXllci12ZWwuMCAqIM6UdFxuICBAcGxheWVyLnBvcy4xICs9IHBsYXllci12ZWwuMSAqIM6UdFxuXG5cbiAgI1xuICAjIEZsaXBmbG9wcGluZ1xuICAjXG5cbiAgQHBsYXllci5yb3RhdGlvbiA9IGZsaXBmbG9wcGVyLnJvdGF0aW9uXG4gIEBwbGF5ZXIuY29sb3IgPSByb3RhdGlvbi10by1jb2xvciBAcGxheWVyLnJvdGF0aW9uXG4gIHBsYXllci1zcHJpdGUuaW5kZXggPSByb3RhdGlvbi10by1zcHJpdGUtaW5kZXggQHBsYXllci5yb3RhdGlvbiwgcGxheWVyLXNwcml0ZS5mcmFtZXNcbiAgcHVzaC1yb3RhdGlvbi1oaXN0b3J5IEBwbGF5ZXIucm90YXRpb25cblxuXG4gICNcbiAgIyBGaXJpbmdcbiAgI1xuXG4gIGlmIGdhbWUtc3RhdGUucGxheWVyLmNvbG9yICUgMyBpcyAxXG4gICAgbmV3LWZpcmUtbW9kZSA9IEZJUkVfTU9ERV9CTEVORFxuICAgIGZpcmUtdGltZXItZmFjdG9yID0gMlxuICBlbHNlXG4gICAgbmV3LWZpcmUtbW9kZSA9IEZJUkVfTU9ERV9BTFRFUk5BVEVcbiAgICBmaXJlLXRpbWVyLWZhY3RvciA9IDFcblxuICBAdGltZXJzLmF1dG8tZmlyZS10aW1lci50YXJnZXQgPSBhdXRvLWZpcmUtc3BlZWQgKiBmaXJlLXRpbWVyLWZhY3RvclxuXG4gIGlmIG5ldy1maXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURVxuICAgIGlmIEB0aW1lcnMuYXV0by1maXJlLXRpbWVyLmVsYXBzZWQgYW5kIEBpbnB1dC1zdGF0ZS5maXJlXG4gICAgICBzaG9vdCFcblxuICBpZiBAZmlyZS1tb2RlIGlzbnQgbmV3LWZpcmUtbW9kZVxuICAgIGlmIG5ldy1maXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURVxuICAgICAgVGltZXIucmVzZXQgQHRpbWVycy5hdXRvLWZpcmUtdGltZXJcblxuICBAZmlyZS1tb2RlID0gbmV3LWZpcmUtbW9kZVxuXG4gIEBwbGF5ZXItYnVsbGV0cyAuPSBmaWx0ZXIgKGJ1bGxldCkgLT5cbiAgICBidWxsZXQucG9zLjEgKz0gYnVsbGV0LnZlbC4xICogzpR0XG4gICAgYnVsbGV0LmxpZmUgLT0gYnVsbGV0Ls6UbGlmZSAqIM6UdFxuICAgIGJ1bGxldC5saWZlID4gMFxuXG5cbiAgI1xuICAjIENhbWVyYSB0cmFja2luZ1xuICAjXG5cbiAgI0BjYW1lcmEtcG9zLjAgPSBAcGxheWVyLnBvcy4wXG4gIEBjYW1lcmEtcG9zLjEgPSBAcGxheWVyLnBvcy4xICsgMjAwXG5cbiAgaWYgQGNhbWVyYS1wb3MuMCAtIEBwbGF5ZXIucG9zLjAgPiBjYW1lcmEtZHJpZnQtbGltaXRcbiAgICBAY2FtZXJhLXBvcy4wIC09IChAY2FtZXJhLXBvcy4wIC0gQHBsYXllci5wb3MuMCAtIGNhbWVyYS1kcmlmdC1saW1pdClcblxuICBpZiBAcGxheWVyLnBvcy4wIC0gQGNhbWVyYS1wb3MuMCA+IGNhbWVyYS1kcmlmdC1saW1pdFxuICAgIEBjYW1lcmEtcG9zLjAgKz0gKEBwbGF5ZXIucG9zLjAgLSBAY2FtZXJhLXBvcy4wIC0gY2FtZXJhLWRyaWZ0LWxpbWl0KVxuXG5cblxuI1xuIyBJTklUXG4jXG5cbmdsb2JhbC5mcmFtZS1kcml2ZXIgPSBuZXcgRnJhbWVEcml2ZXJcbmZyYW1lLWRyaXZlci5vbi1mcmFtZSByZW5kZXIuYmluZCBnYW1lLXN0YXRlXG5mcmFtZS1kcml2ZXIub24tdGljayB1cGRhdGUuYmluZCBnYW1lLXN0YXRlXG5mcmFtZS1kcml2ZXIuc3RhcnQhXG5cblxuIyBJbml0IC0gYXNzaWduXG5cbm1haW4tY2FudmFzLmluc3RhbGwgIGRvY3VtZW50LmJvZHlcbmRlYnVnLWNhbnZhcy5pbnN0YWxsIGRvY3VtZW50LmJvZHlcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cblxuIyBJbnB1dCBjb2RlcyAoeGJveClcblxuY29uc3QgQlVUVE9OX0EgICAgICAgICAgPSAwXG5jb25zdCBCVVRUT05fQiAgICAgICAgICA9IDFcbmNvbnN0IEJVVFRPTl9YICAgICAgICAgID0gMlxuY29uc3QgQlVUVE9OX1kgICAgICAgICAgPSAzXG5jb25zdCBMRUZUX1RSSUdHRVIgICAgICA9IDZcbmNvbnN0IFJJR0hUX1RSSUdHRVIgICAgID0gN1xuY29uc3QgTEVGVF9CVU1QRVIgICAgICAgPSA0XG5jb25zdCBSSUdIVF9CVU1QRVIgICAgICA9IDVcbmNvbnN0IEJVVFRPTl9TRUxFQ1QgICAgID0gOFxuY29uc3QgQlVUVE9OX1NUQVJUICAgICAgPSA5XG5jb25zdCBMRUZUX1NUSUNLX0NMSUNLICA9IDEwXG5jb25zdCBSSUdIVF9TVElDS19DTElDSyA9IDExXG5jb25zdCBEUEFEX1RPUCAgICAgICAgICA9IDEyXG5jb25zdCBEUEFEX0JPVFRPTSAgICAgICA9IDEzXG5jb25zdCBEUEFEX0xFRlQgICAgICAgICA9IDE0XG5jb25zdCBEUEFEX1JJR0hUICAgICAgICA9IDE1XG5cbmNvbnN0IExFRlRfU1RJQ0tfWCAgICAgID0gMFxuY29uc3QgTEVGVF9TVElDS19ZICAgICAgPSAxXG5jb25zdCBSSUdIVF9TVElDS19YICAgICA9IDJcbmNvbnN0IFJJR0hUX1NUSUNLX1kgICAgID0gM1xuXG5cbiMgS2V5IGxheW91dCAoeGJveClcblxua2V5LWJpbmRpbmdzID0gbmV3IE1hcFxuICAuLnNldCBCVVRUT05fQiwgICAgICBJTlBVVF9GSVJFXG4gIC4uc2V0IEJVVFRPTl9BLCAgICAgIElOUFVUX1NVUEVSXG4gIC4uc2V0IEJVVFRPTl9ZLCAgICAgIElOUFVUX1NQRUNJQUxcbiAgLi5zZXQgTEVGVF9UUklHR0VSLCAgSU5QVVRfRkxJUFxuICAuLnNldCBSSUdIVF9UUklHR0VSLCBJTlBVVF9GTE9QXG4gIC4uc2V0IEJVVFRPTl9TVEFSVCwgIElOUFVUX1BBVVNFXG5cbmF4aXMtYmluZGluZ3MgPSBuZXcgTWFwXG4gIC4uc2V0IExFRlRfU1RJQ0tfWCwgIElOUFVUX1hcbiAgLi5zZXQgTEVGVF9TVElDS19ZLCAgSU5QVVRfWVxuXG5cbiNcbiMgR2FtZXBhZCBDb250cm9sbGVyXG4jXG5cbmV4cG9ydCBjbGFzcyBHYW1lcGFkQ29udHJvbGxlclxuXG4gIChAY2FsbGJhY2sgPSBpZCkgLT5cbiAgICBAc3RhdGUgPVxuICAgICAgYnV0dG9uczogWyAwIF0gKiAxNlxuICAgICAgYXhlczogICAgWyAwIF0gKiA0XG5cbiAgcHJveHktZXZlbnQ6ICh2YWx1ZSwgYmluZGluZykgLT5cbiAgICBAY2FsbGJhY2sgYmluZGluZywgdmFsdWVcblxuICB1cGRhdGU6ICjOlHQpIC0+XG4gICAgZ2FtZXBhZCA9IG5hdmlnYXRvci5nZXQtZ2FtZXBhZHMhMFxuXG4gICAgaWYgZ2FtZXBhZFxuICAgICAgZm9yIGJ1dHRvbiwgd2hpY2ggaW4gZ2FtZXBhZC5idXR0b25zXG4gICAgICAgIGlmIGJ1dHRvbi52YWx1ZSBpc250IEBzdGF0ZS5idXR0b25zW3doaWNoXVxuICAgICAgICAgIGxvZyB3aGljaFxuICAgICAgICAgIGxvZyBrZXktYmluZGluZ3MuZ2V0IHdoaWNoXG4gICAgICAgICAgQHByb3h5LWV2ZW50IGJ1dHRvbi52YWx1ZSwga2V5LWJpbmRpbmdzLmdldCB3aGljaFxuICAgICAgICAgIEBzdGF0ZS5idXR0b25zW3doaWNoXSA9IGJ1dHRvbi52YWx1ZVxuXG4gICAgICBmb3IgcmF3LCB3aGljaCBpbiBnYW1lcGFkLmF4ZXNcbiAgICAgICAgZGVhZCAgPSAtR0FNRVBBRF9BWElTX0RFQURaT05FIDwgcmF3IDwgR0FNRVBBRF9BWElTX0RFQURaT05FXG4gICAgICAgIHZhbHVlID0gaWYgZGVhZCB0aGVuIDAgZWxzZSByYXdcblxuICAgICAgICBpZiB2YWx1ZSBpc250IEBzdGF0ZS5heGVzW3doaWNoXVxuICAgICAgICAgIEBwcm94eS1ldmVudCB2YWx1ZSwgYXhpcy1iaW5kaW5ncy5nZXQgd2hpY2hcbiAgICAgICAgICBAc3RhdGUuYXhlc1t3aGljaF0gPSB2YWx1ZVxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuVGltZXIgPSByZXF1aXJlIFxcLi4vdGltZXJcblxueyBLZXlib2FyZENvbnRyb2xsZXIgfSA9IHJlcXVpcmUgXFwuL2tleWJvYXJkXG57IEdhbWVwYWRDb250cm9sbGVyIH0gID0gcmVxdWlyZSBcXC4vZ2FtZXBhZFxuXG5cbiNcbiMgSW5wdXQgTWFuYWdlclxuI1xuXG5leHBvcnQgY2xhc3MgSW5wdXRcblxuICAtPlxuICAgIEBwZW5kaW5nLWV2ZW50cyA9IFsgXVxuXG4gICAgQGtleWJvYXJkID0gbmV3IEtleWJvYXJkQ29udHJvbGxlciBAcHVzaC1ldmVudFxuICAgIEBnYW1lcGFkICA9IG5ldyBHYW1lcGFkQ29udHJvbGxlciAgQHB1c2gtZXZlbnRcblxuICB1cGRhdGU6ICjOlHQpIC0+XG4gICAgQGtleWJvYXJkLnVwZGF0ZSDOlHRcbiAgICBAZ2FtZXBhZC51cGRhdGUgzpR0XG5cbiAgcHVzaC1ldmVudDogKHR5cGUsIHZhbHVlKSB+PlxuICAgIEBwZW5kaW5nLWV2ZW50cy5wdXNoIFsgdHlwZSwgdmFsdWUgXVxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuVGltZXIgPSByZXF1aXJlIFxcLi4vdGltZXJcblxuXG4jIFJlZmVyZW5jZSBDb25zdGFudHNcblxuY29uc3QgRU5URVIgID0gMTNcbmNvbnN0IFNQQUNFICA9IDMyXG5jb25zdCBFU0NBUEUgPSAyN1xuY29uc3QgS0VZX0EgID0gNjVcbmNvbnN0IEtFWV9DICA9IDY3XG5jb25zdCBLRVlfRCAgPSA2OFxuY29uc3QgS0VZX0UgID0gNjlcbmNvbnN0IEtFWV9RICA9IDgxXG5jb25zdCBLRVlfUyAgPSA4M1xuY29uc3QgS0VZX1cgID0gODdcbmNvbnN0IEtFWV9YICA9IDg4XG5jb25zdCBLRVlfWiAgPSA5MFxuY29uc3QgTEVGVCAgID0gMzdcbmNvbnN0IFJJR0hUICA9IDM5XG5jb25zdCBVUCAgICAgPSAzOFxuY29uc3QgRE9XTiAgID0gNDBcblxuY29uc3QgVFJJR0dFUl9ESVJfU1RBQkxFICA9IFN5bWJvbCBcXHRyaWdnZXItZGlyZWN0aW9uLXN0YWJsZVxuY29uc3QgVFJJR0dFUl9ESVJfUFJFU1MgICA9IFN5bWJvbCBcXHRyaWdnZXItZGlyZWN0aW9uLXByZXNzXG5jb25zdCBUUklHR0VSX0RJUl9SRUxFQVNFID0gU3ltYm9sIFxcdHJpZ2dlci1kaXJlY3Rpb24tcmVsZWFzZVxuXG5cbiNcbiMgS2V5Ym9hcmQgQ29udHJvbGxlclxuI1xuXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmRDb250cm9sbGVyXG5cbiAgc2ltdWxhdGVkLXRyYXZlbC10aW1lID0gMC4wNSAqIDJcblxuICAoQGNhbGxiYWNrID0gaWQpIC0+XG5cbiAgICBAc2ltLXRyaWdnZXJzID1cbiAgICAgICogdHlwZTogSU5QVVRfRkxJUFxuICAgICAgICBkaXI6ICBUUklHR0VSX0RJUl9TVEFCTEVcbiAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgdGltZXI6IFRpbWVyLmNyZWF0ZSBzaW11bGF0ZWQtdHJhdmVsLXRpbWUsIGRpc2FibGVkOiB5ZXNcblxuICAgICAgKiB0eXBlOiBJTlBVVF9GTE9QXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICAgIGRpcjogIFRSSUdHRVJfRElSX1NUQUJMRVxuICAgICAgICB0aW1lcjogVGltZXIuY3JlYXRlIHNpbXVsYXRlZC10cmF2ZWwtdGltZSwgZGlzYWJsZWQ6IHllc1xuXG4gICAgQGN1cnNvci1zdGF0ZSA9XG4gICAgICB1cDogICAgb2ZmXG4gICAgICBkb3duOiAgb2ZmXG4gICAgICBsZWZ0OiAgb2ZmXG4gICAgICByaWdodDogb2ZmXG5cbiAgICBkb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFxrZXlkb3duLCBAaGFuZGxlLWtleSBvblxuICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXGtleXVwLCAgIEBoYW5kbGUta2V5IG9mZlxuXG4gIHByb3h5LWV2ZW50OiAodHlwZSwgdmFsdWUpIC0+XG4gICAgQGNhbGxiYWNrIHR5cGUsIHZhbHVlXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIGZvciB0cmlnZ2VyIGluIEBzaW0tdHJpZ2dlcnNcbiAgICAgIFRpbWVyLnVwZGF0ZS1hbmQtc3RvcCB0cmlnZ2VyLnRpbWVyLCDOlHRcbiAgICAgIHAgPSB0cmlnZ2VyLnRpbWVyLmN1cnJlbnQgLyBzaW11bGF0ZWQtdHJhdmVsLXRpbWVcblxuICAgICAgaWYgdHJpZ2dlci52YWx1ZSBpc250IHBcbiAgICAgICAgaWYgdHJpZ2dlci5kaXIgaXMgVFJJR0dFUl9ESVJfUkVMRUFTRVxuICAgICAgICAgIEBwcm94eS1ldmVudCB0cmlnZ2VyLnR5cGUsIHRyaWdnZXIudGltZXIudGFyZ2V0L3NpbXVsYXRlZC10cmF2ZWwtdGltZSAtIHBcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEBwcm94eS1ldmVudCB0cmlnZ2VyLnR5cGUsIHBcblxuICAgICAgaWYgdHJpZ2dlci5lbGFwc2VkIGFuZCB0cmlnZ2VyLmRpciBpcyBUUklHR0VSX0RJUl9SRUxFQVNFXG4gICAgICAgIHRyaWdnZXIuZGlyID0gVFJJR0dFUl9ESVJFQ1RJT05fU1RBQkxFXG5cbiAgICAgIHRyaWdnZXIudmFsdWUgPSBwXG5cbiAgaGFuZGxlLWtleTogKGRpcikgLT4gKHsgd2hpY2ggfTpldmVudCkgfj5cbiAgICBpZiBldmVudC5zaGlmdC1rZXkgdGhlbiBsb2cgd2hpY2hcbiAgICBpZiBub3QgQGRpc3BhdGNoLWtleS1yZXNwb25zZSBkaXIsIHdoaWNoXG4gICAgICByZXR1cm4gZXZlbnRcbiAgICBldmVudC5wcmV2ZW50LWRlZmF1bHQhXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgZGlzcGF0Y2gta2V5LXJlc3BvbnNlOiAoZGlyLCB3aGljaCkgLT5cbiAgICBzd2l0Y2ggd2hpY2hcbiAgICB8IEtFWV9aICA9PiBAc2ltdWxhdGUtdHJpZ2dlciAgMCwgZGlyLCAxXG4gICAgfCBLRVlfQyAgPT4gQHNpbXVsYXRlLXRyaWdnZXIgIDEsIGRpciwgMVxuICAgIHwgS0VZX0EgID0+IEBzaW11bGF0ZS10cmlnZ2VyICAwLCBkaXIsIDAuNVxuICAgIHwgS0VZX0QgID0+IEBzaW11bGF0ZS10cmlnZ2VyICAxLCBkaXIsIDAuNVxuICAgIHwgS0VZX1MgID0+IEBwcm94eS1ldmVudCBJTlBVVF9GSVJFLCAgZGlyXG4gICAgfCBLRVlfWCAgPT4gQHByb3h5LWV2ZW50IElOUFVUX0ZJUkUsICBkaXJcbiAgICB8IFVQICAgICA9PiBAY3Vyc29yLXZlbG9jaXR5LXkgXFx1cCwgICAgZGlyXG4gICAgfCBET1dOICAgPT4gQGN1cnNvci12ZWxvY2l0eS15IFxcZG93biwgIGRpclxuICAgIHwgTEVGVCAgID0+IEBjdXJzb3ItdmVsb2NpdHkteCBcXGxlZnQsICBkaXJcbiAgICB8IFJJR0hUICA9PiBAY3Vyc29yLXZlbG9jaXR5LXggXFxyaWdodCwgZGlyXG4gICAgfCBFU0NBUEUgPT4gQHByb3h5LWV2ZW50IElOUFVUX1BBVVNFLCAoaWYgZGlyIHRoZW4gZnJhbWUtZHJpdmVyLnRvZ2dsZSEpXG5cbiAgY3Vyc29yLXZlbG9jaXR5LXg6IChrZXksIGRpcikgLT5cbiAgICBAY3Vyc29yLXN0YXRlW2tleV0gPSBkaXJcbiAgICBAcHJveHktZXZlbnQgSU5QVVRfWCwgQGN1cnNvci1zdGF0ZS5yaWdodCAtIEBjdXJzb3Itc3RhdGUubGVmdFxuXG4gIGN1cnNvci12ZWxvY2l0eS15OiAoa2V5LCBkaXIpIC0+XG4gICAgQGN1cnNvci1zdGF0ZVtrZXldID0gZGlyXG4gICAgQHByb3h5LWV2ZW50IElOUFVUX1ksIEBjdXJzb3Itc3RhdGUudXAgLSBAY3Vyc29yLXN0YXRlLmRvd25cblxuICBzaW11bGF0ZTogKHRyaWdnZXIsIHRhcmdldCwgZGlyKSAtPlxuICAgIGRpcmVjdGlvbiA9IGlmIGRpciB0aGVuIFRSSUdHRVJfRElSX1BSRVNTIGVsc2UgVFJJR0dFUl9ESVJfUkVMRUFTRVxuICAgIHRyaWdnZXIudGltZXIudGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICBpZiAoZGlyZWN0aW9uIGlzbnQgdHJpZ2dlci5kaXIpXG4gICAgICBpZiB0cmlnZ2VyLnRpbWVyLmFjdGl2ZVxuICAgICAgICB0cmlnZ2VyLnRpbWVyLmN1cnJlbnQgPSB0cmlnZ2VyLnRpbWVyLnRhcmdldCAtIHRyaWdnZXIudGltZXIuY3VycmVudFxuICAgICAgZWxzZVxuICAgICAgICBUaW1lci5yZXNldCB0cmlnZ2VyLnRpbWVyXG4gICAgICB0cmlnZ2VyLmRpciA9IGRpcmVjdGlvblxuXG4gIHNpbXVsYXRlLXRyaWdnZXI6IChzaWRlLCBkaXIsIG11bHQgPSAyKSAtPlxuICAgIEBzaW11bGF0ZSBAc2ltLXRyaWdnZXJzW3NpZGVdLCBzaW11bGF0ZWQtdHJhdmVsLXRpbWUgKiBtdWx0LCBkaXJcblxuIiwiXG5leHBvcnQgaWQgPSAtPiBpdFxuXG5leHBvcnQgbG9nID0gLT4gY29uc29sZS5sb2cuYXBwbHkgY29uc29sZSwgJjsgJjBcblxuZXhwb3J0IHJhZiA9IHdpbmRvdy5yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZVxuXG5leHBvcnQgbGVycCA9IChhLCB0LCBiKSAtPiBhICsgdCAqIChiIC0gYSlcblxuZXhwb3J0IGZsb29yID0gTWF0aC5mbG9vclxuXG5leHBvcnQgc3FydCA9IE1hdGguc3FydFxuXG5leHBvcnQgYWJzID0gTWF0aC5hYnNcblxuZXhwb3J0IG1pbiA9IE1hdGgubWluXG5cbmV4cG9ydCBzaW4gPSBNYXRoLnNpblxuXG5leHBvcnQgY29zID0gTWF0aC5jb3NcblxuZXhwb3J0IG1heCA9IE1hdGgubWF4XG5cbmV4cG9ydCBhc2luID0gTWF0aC5hc2luXG5cbmV4cG9ydCB2MiA9XG4gIGh5cCAgIDogKHYpIC0+IHNxcnQgKHYuMCAqIHYuMCArIHYuMSAqIHYuMSlcbiAgbm9ybSAgOiAodikgLT4gZCA9IHYyLmh5cCB2OyBpZiBkIGlzIDAgdGhlbiBbMCAwXSBlbHNlIFsgdi4wL2QsIHYuMS9kIF1cbiAgYWRkICAgOiAoYSwgYikgLT4gWyBhLjAgKyBiLjAsIGEuMSArIGIuMSBdXG4gIHN1YiAgIDogKGEsIGIpIC0+IFsgYS4wIC0gYi4wLCBhLjEgLSBiLjEgXVxuICBzY2FsZSA6ICh2LCBmKSAtPiBbIHYuMCAqIGYsIHYuMSAqIGYgXVxuICBkaXN0ICA6IChhLCBiKSAtPiB4ID0gW2IuMCAtIGEuMF07IHkgPSBbYi4xIC0gYS4xXTsgc3FydCB4KngreSp5XG5cbmV4cG9ydCBib3ggPSAobikgLT4gWyBuLCBuIF1cblxuZXhwb3J0IHJuZCA9IChuKSAtPiBuICogTWF0aC5yYW5kb20hXG5cbmV4cG9ydCBkaXYgPSAoYSwgYikgLT4gZmxvb3IgYSAvIGJcblxuZXhwb3J0IHBpID0gTWF0aC5QSVxuXG5leHBvcnQgdGF1ID0gcGkgKiAyXG5cbmV4cG9ydCBmbGlwID0gKM67KSAtPiAoYSwgYikgLT4gzrsgYiwgYVxuXG5leHBvcnQgZGVsYXkgPSBmbGlwIHNldC10aW1lb3V0XG5cbmV4cG9ydCBsaW1pdCA9IChtaW4sIG1heCwgbikgLS0+IGlmIG4gPCBtaW4gdGhlbiBtaW4gZWxzZSBpZiBuID4gbWF4IHRoZW4gbWF4IGVsc2UgblxuXG5leHBvcnQgd3JhcCA9IChtaW4sIG1heCwgbikgLS0+IGlmIG4gPCBtaW4gdGhlbiBtYXggZWxzZSBpZiBuID4gbWF4IHRoZW4gbWluIGVsc2UgblxuXG5leHBvcnQgeiA9IC0+IGZsb29yIGl0ICogMjU1XG5cbmV4cG9ydCByZ2IgPSAocixnLGIpIC0+IFwicmdiKCN7eiByfSwje3ogZ30sI3t6IGJ9KVwiXG5cbmV4cG9ydCByYW5kb20tZnJvbSA9ICh4cykgLT4geHNbIGZsb29yIE1hdGgucmFuZG9tISAqIHhzLmxlbmd0aCBdXG5cbmV4cG9ydCByYW5kb20tcmFuZ2UgPSAoYSwgYikgLT4gYSArIChybmQgYiAtIGEpXG5cbmV4cG9ydCBpZHMgPSAtPiBpZiBpdCBpcyAwIHRoZW4gMCBlbHNlIDEgLyBpdCppdFxuXG5leHBvcnQgaWRkID0gLT4gaWYgaXQgaXMgMCB0aGVuIDAgZWxzZSAxIC8gaXRcblxuZXhwb3J0IGJhc2U2NCA9IChidWZmZXIsIG91dHB1dCA9IFwiXCIpIC0+XG4gIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoIGJ1ZmZlciApXG4gIGZvciBpIGZyb20gMCB0byBieXRlcy5ieXRlTGVuZ3RoID0+IG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlIGJ5dGVzW2ldXG4gIHdpbmRvdy5idG9hIG91dHB1dFxuXG5leHBvcnQgcGFkLXR3byA9IChzdHIpIC0+IGlmIHN0ci5sZW5ndGggPCAyIHRoZW4gXCIwI3N0clwiIGVsc2Ugc3RyXG5cbmV4cG9ydCBoZXggPSAoZGVjaW1hbCkgLT4gcGFkLXR3byAoZmxvb3IgZGVjaW1hbCkudG8tc3RyaW5nIDE2XG5cbmV4cG9ydCByZ2IgPSAoW3IsZyxiXSkgLT4gXCIjI3toZXggcioyNTV9I3toZXggZyoyNTV9I3toZXggYioyNTV9XCJcblxuZXhwb3J0IGxlcnAgPSAodCwgYSwgYikgLT4gYSArIHQgKiAoYiAtIGEpXG5cbmV4cG9ydCBlYXNlID0gKHQsIGEsIGIsIM67KSAtPiBhICsgKM67IHQpICogKGIgLSBhKVxuXG5cbiMgUGh5c2ljcyBwcm9jZXNzb3JzXG5cbmV4cG9ydCBwaHlzaWNzID0gKG8sIM6UdCkgLT5cbiAgZiA9IGlmIG8uZnJpY3Rpb24gdGhlbiB0aGF0IGVsc2UgMVxuICBvLnZlbCA9ICgoby5hY2MgYHYyLnNjYWxlYCDOlHQpIGB2Mi5hZGRgIG8udmVsKSBgdjIuc2NhbGVgIGZcbiAgby5wb3MgPSAoby52ZWwgYHYyLnNjYWxlYCDOlHQpIGB2Mi5hZGRgIG8ucG9zIGB2Mi5hZGRgIChvLmFjYyBgdjIuc2NhbGVgICgwLjUgKiDOlHQgKiDOlHQpKVxuXG5leHBvcnQgZGFtcGVuID0gKG8sIGRhbXAsIM6UdCkgLT5cbiAgby52ZWwgPSAoby52ZWwgYHYyLnNjYWxlYCBkYW1wKVxuICBvLnBvcyA9IChvLnZlbCBgdjIuc2NhbGVgIM6UdCkgYHYyLmFkZGAgby5wb3NcblxuXG4jIFNwZWNpYWwgbG9nZ2luZ1xuXG5jb2xvci1sb2cgPSAoY29sKSAtPiAodGV4dCwgLi4ucmVzdCkgLT5cbiAgbG9nIFxcJWMgKyB0ZXh0LCBcImNvbG9yOiAjY29sXCIsIC4uLnJlc3RcblxucmVkLWxvZyAgID0gY29sb3ItbG9nICcjZTQyJ1xuZ3JlZW4tbG9nID0gY29sb3ItbG9nICcjMWQzJ1xuXG5leHBvcnQgc2Z4ID0gY29sb3ItbG9nICcjMjhlJ1xuXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG4jXG4jIE5vcm1hbCBUaW1lclxuI1xuIyBCZWNvbWVzIGluYWN0aXZlIG9uY2UgY29tcGxldGVkIGJ1dCByZXNldHMgd2hlbmV2ZXIgeW91IHdhbnRcbiNcblxuZXhwb3J0IGNyZWF0ZSA9ICh0YXJnZXQsIHsgZGlzYWJsZWQ9bm8gfT17fSkgLT5cbiAgdGFyZ2V0OiB0YXJnZXRcbiAgY3VycmVudDogMFxuICBlbGFwc2VkOiBub1xuICBhY3RpdmU6IG5vdCBkaXNhYmxlZFxuXG5leHBvcnQgdXBkYXRlLWFuZC1zdG9wID0gKHRpbWVyLCDOlHQpIC0+XG4gIGlmIHRpbWVyLmFjdGl2ZVxuICAgIGlmIHRpbWVyLmN1cnJlbnQgKyDOlHQgPj0gdGltZXIudGFyZ2V0XG4gICAgICB0aW1lci5jdXJyZW50ID0gdGltZXIudGFyZ2V0XG4gICAgICB0aW1lci5lbGFwc2VkID0geWVzXG4gICAgICB0aW1lci5hY3RpdmUgPSBub1xuICAgIGVsc2VcbiAgICAgIHRpbWVyLmN1cnJlbnQgKz0gzpR0XG4gICAgICB0aW1lci5lbGFwc2VkID0gbm9cbiAgZWxzZVxuICAgIHRpbWVyLmVsYXBzZWQgPSBub1xuXG5leHBvcnQgdXBkYXRlLWFuZC1jYXJyeSA9ICh0aW1lciwgzpR0KSAtPlxuICBpZiB0aW1lci5hY3RpdmVcbiAgICBpZiB0aW1lci5jdXJyZW50ICsgzpR0ID49IHRpbWVyLnRhcmdldFxuICAgICAgdGltZXIuZWxhcHNlZCA9IHllc1xuICAgICAgdGltZXIuY3VycmVudCA9ICh0aW1lci5jdXJyZW50ICsgzpR0KSAlIHRpbWVyLnRhcmdldFxuICAgIGVsc2VcbiAgICAgIHRpbWVyLmN1cnJlbnQgKz0gzpR0XG4gICAgICB0aW1lci5lbGFwc2VkID0gbm9cblxuZXhwb3J0IGdldC1wcm9ncmVzcyA9ICh0aW1lcikgLT5cbiAgdGltZXIuY3VycmVudCAvIHRpbWVyLnRhcmdldFxuXG5leHBvcnQgcmVzZXQgPSAodGltZXIsIHRhcmdldCA9IDApIC0+XG4gIGlmIHRhcmdldCB0aGVuIHRpbWVyLnRhcmdldCA9IHRhcmdldFxuICB0aW1lci5jdXJyZW50ID0gMFxuICB0aW1lci5lbGFwc2VkID0gbm9cbiAgdGltZXIuYWN0aXZlID0geWVzXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiNcbiMgVHdlZW5cbiNcblxuZXhwb3J0IGNsYXNzIFR3ZWVuXG5cbiAgYWxsLXR3ZWVucyA9IFtdXG5cbiAgKHsgQGZyb20gPSAwLCBAdG8gPSAxLCBAaW4gPSAxLCBAd2l0aCA9IEVhc2UuTGluZWFyIH0pIC0+XG4gICAgIyBsb2cgJ25ldyBUd2VlbjonLCBAZnJvbSwgQHRvXG4gICAgQHRpbWUgPSAwXG4gICAgQHJhbmdlID0gQHRvIC0gQGZyb21cbiAgICBAZWxhcHNlZCA9IG5vXG4gICAgQGFjdGl2ZSA9IHllc1xuICAgIGFsbC10d2VlbnMucHVzaCB0aGlzXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIEB0aW1lICs9IM6UdFxuICAgIGlmIEB0aW1lID49IEBpblxuICAgICAgQHRpbWUgPSBAaW5cbiAgICAgIEBlbGFwc2VkID0geWVzXG4gICAgICBAYWN0aXZlID0gbm9cbiAgICBAdmFsdWUgPSBAZnJvbSArIEByYW5nZSAqIEB3aXRoIEB0aW1lL0BpblxuICAgIHJldHVybiBub3QgQGVsYXBzZWRcblxuICBAdXBkYXRlLWFsbCA9ICjOlHQpIC0+XG4gICAgYWxsLXR3ZWVucyA6PSBhbGwtdHdlZW5zLmZpbHRlciAoLnVwZGF0ZSDOlHQpXG5cbiAgQE51bGwgPVxuICAgIGVsYXBzZWQ6IG5vXG4gICAgYWN0aXZlOiBub1xuICAgIHZhbHVlOiAwXG5cbiJdfQ==
