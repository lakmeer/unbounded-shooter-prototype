(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, floor, delay, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, floor = ref$.floor, delay = ref$.delay;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var tpsHistoryWindow, fpsHistoryWindow, RENDER_ON_TICK, prototype = FrameDriver.prototype, constructor = FrameDriver;
  tpsHistoryWindow = 20;
  fpsHistoryWindow = 20;
  RENDER_ON_TICK = false;
  function FrameDriver(noReadout){
    var ref$;
    this.noReadout = noReadout != null ? noReadout : true;
    this.tick = bind$(this, 'tick', prototype);
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      lastTickTime: 0,
      lastFrameTime: 0,
      frame: 0,
      running: false
    };
    this.callbacks = {
      tick: id,
      frame: id
    };
    this.tps = {
      value: 0,
      history: repeatArray$([0], tpsHistoryWindow)
    };
    this.fps = {
      value: 0,
      history: repeatArray$([0], fpsHistoryWindow)
    };
    if (!this.noReadout) {
      this.readout = document.createElement('pre');
      ref$ = this.readout.style;
      ref$.position = 'absolute';
      ref$.top = 0;
      ref$.right = 0;
      document.body.appendChild(this.readout);
    }
  }
  prototype.frame = function(){
    var now, Δt;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastFrameTime;
    this.pushFrameTime(Δt);
    this.state.lastFrameTime = now;
    this.state.frame += 1;
    return this.callbacks.frame(this.state.frame);
  };
  prototype.tick = function(){
    var now, Δt;
    if (this.state.running) {
      delay(0, this.tick);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastTickTime;
    if (!this.noReadout) {
      this.readout.textContent = this.fps.value + " | " + this.tps.value;
    }
    this.pushTickTime(Δt);
    this.state.lastTickTime = now;
    this.callbacks.tick(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
    if (RENDER_ON_TICK) {
      this.pushFrameTime(Δt);
      this.state.frame += 1;
      return this.callbacks.frame(this.state.frame);
    }
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.lastTickTime = 0;
    this.state.lastFrameTime = 0;
    this.state.running = true;
    this.tick();
    if (!RENDER_ON_TICK) {
      return this.frame();
    }
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  prototype.toggle = function(){
    if (this.state.running) {
      return this.stop();
    } else {
      return this.start();
    }
  };
  prototype.pushTickTime = function(Δt){
    this.tps.history.push(Δt);
    this.tps.history.shift();
    return this.tps.value = floor(1000 * tpsHistoryWindow / this.tps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.pushFrameTime = function(Δt){
    this.fps.history.push(Δt);
    this.fps.history.shift();
    return this.fps.value = floor(1000 * fpsHistoryWindow / this.fps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.onTick = function(λ){
    return this.callbacks.tick = λ;
  };
  prototype.onFrame = function(λ){
    return this.callbacks.frame = λ;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"std":3}],2:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, sin, cos, div, v2, FrameDriver, MODE_COLOR, MODE_NORMAL, Blitter, autoTravelSpeed, maxSpeed, autoFireSpeed, dualFireSeparation, cameraDriftLimit, autoFireTimer, shoot, Timer, Bullet, frameDriver, mainCanvas, render, update, ENTER, SPACE, ESCAPE, KEY_Z, KEY_X, KEY_C, LEFT, RIGHT, UP, DOWN;
ref$ = require('std'), id = ref$.id, log = ref$.log, sin = ref$.sin, cos = ref$.cos, div = ref$.div, v2 = ref$.v2;
FrameDriver = require('./frame-driver').FrameDriver;
MODE_COLOR = Symbol('color');
MODE_NORMAL = Symbol('normal');
Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var modeToOperation, localGridSize, localGridFidelity, prototype = Blitter.prototype, constructor = Blitter;
  modeToOperation = function(mode){
    switch (mode) {
    case MODE_NORMAL:
      return 'source-over';
    case MODE_COLOR:
      return 'hue';
    default:
      return 'source-over';
    }
  };
  localGridSize = 2000;
  localGridFidelity = 250;
  function Blitter(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.setSize([window.innerWidth, window.innerHeight]);
  }
  prototype.setSize = function(size){
    this.w = this.canvas.width = size[0];
    return this.h = this.canvas.height = size[1];
  };
  prototype.translateByCamera = function(arg$){
    var x, y;
    x = arg$[0], y = arg$[1];
    return [this.w / 2 + x - gameState.cameraPos[0], this.h / 2 - y + gameState.cameraPos[1]];
  };
  prototype.rect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    ref$ = this.translateByCamera(pos), x = ref$[0], y = ref$[1];
    w = size[0], h = size[1];
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(x - w / 2, y - h / 2, w, h);
  };
  prototype.line = function(start, end){
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this._line(this.ctx, start, end);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype._line = function(start, end){
    var ref$, x1, y1, x2, y2;
    ref$ = this.translateByCamera(start), x1 = ref$[0], y1 = ref$[1];
    ref$ = this.translateByCamera(end), x2 = ref$[0], y2 = ref$[1];
    this.ctx.moveTo(x1, y1);
    return this.ctx.lineTo(x2, y2);
  };
  prototype.uptri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._uptri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._uptri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translateByCamera(pos), x = ref$[0], y = ref$[1];
    w = size[0], h = size[1];
    this.ctx.moveTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x + 0, y - h / 2);
    return this.ctx.lineTo(x - w / 2, y + h / 2);
  };
  prototype.dntri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._dntri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._dntri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translateByCamera(pos), x = ref$[0], y = ref$[1];
    w = size[0], h = size[1];
    this.ctx.moveTo(x - w / 2, y - h / 2);
    this.ctx.lineTo(x + w / 2, y - h / 2);
    this.ctx.lineTo(x + 0, y + h / 2);
    return this.ctx.lineTo(x - w / 2, y - h / 2);
  };
  prototype.clear = function(){
    this.ctx.clearRect(0, 0, this.w, this.h);
    this.ctx.globalAlpha = 1;
    return this.ctx.globalCompositeOperation = modeToOperation(MODE_NORMAL);
  };
  prototype.drawOrigin = function(){
    var ref$, cx, cy;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    this.ctx.strokeStyle = '#0f0';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this._line([0, cy - 1000], [0, cy + 1000]);
    this._line([cx - 1000, 0], [cx + 1000, 0]);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.drawLocalGrid = function(){
    var ref$, cx, cy, nx, ny, lgs, i$, step$, to$, i;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    nx = cx - cx % localGridFidelity;
    ny = cy - cy % localGridFidelity;
    lgs = localGridSize / 2;
    this.ctx.beginPath();
    this.ctx.globalAlpha = 0.4;
    for (i$ = nx - lgs, to$ = nx + lgs, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([i, cy - lgs], [i, cy + lgs]);
    }
    for (i$ = ny - lgs, to$ = ny + lgs, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([cx - lgs, i], [cx + lgs, i]);
    }
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Blitter;
}());
global.gameState = {
  cameraPos: [0, 0],
  player: {
    pos: [0, 0],
    vel: [0, 0]
  },
  targetPos: [0, 500],
  playerBullets: [],
  inputState: {
    fire: false,
    up: false,
    down: false,
    left: false,
    right: false
  }
};
autoTravelSpeed = 500;
maxSpeed = 500;
autoFireSpeed = 0.03;
dualFireSeparation = 35;
cameraDriftLimit = 500;
autoFireTimer = {
  target: autoFireSpeed,
  current: 0,
  elapsed: false
};
shoot = function(){
  var left, right;
  left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 150]);
  right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 150]);
  gameState.playerBullets.push(Bullet['new'](left));
  return gameState.playerBullets.push(Bullet['new'](right));
};
Timer = {
  update: function(timer, Δt){
    if (timer.current + Δt > timer.target) {
      timer.elapsed = true;
      return timer.current = (timer.current + Δt) % timer.target;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  }
};
Bullet = {
  'new': function(pos){
    return {
      pos: pos,
      vel: [0, 5000],
      size: [100, 300],
      alpha: 0.6,
      life: 1,
      Δlife: 4
    };
  },
  draw: function(canvas, arg$){
    var pos, size, alpha, life, topSize, btmSize, topPos, btmPos;
    pos = arg$.pos, size = arg$.size, alpha = arg$.alpha, life = arg$.life;
    topSize = [size[0], size[1] * 1 / 4];
    btmSize = [size[0], size[1] * 3 / 4];
    topPos = [pos[0], pos[1] + size[1] / 4];
    btmPos = [pos[0], pos[1] - size[1] / 4];
    canvas.uptri(topPos, topSize, {
      color: 'red',
      alpha: life,
      mode: MODE_COLOR
    });
    return canvas.dntri(btmPos, btmSize, {
      color: 'red',
      alpha: life,
      mode: MODE_COLOR
    });
  }
};
frameDriver = new FrameDriver;
mainCanvas = new Blitter;
render = function(Δt, t){
  var i$, ref$, len$, bullet, results$ = [];
  mainCanvas.clear();
  mainCanvas.drawOrigin();
  mainCanvas.drawLocalGrid();
  mainCanvas.rect(this.targetPos, [90, 90], {
    color: 'blue'
  });
  mainCanvas.uptri(this.player.pos, [50, 50], {
    color: 'pink'
  });
  for (i$ = 0, len$ = (ref$ = this.playerBullets).length; i$ < len$; ++i$) {
    bullet = ref$[i$];
    results$.push(Bullet.draw(mainCanvas, bullet));
  }
  return results$;
};
update = function(Δt, t){
  Timer.update(autoFireTimer, Δt);
  if (autoFireTimer.elapsed && this.inputState.fire) {
    shoot();
  }
  this.playerBullets = this.playerBullets.filter(function(bullet){
    bullet.pos[1] += bullet.vel[1] * Δt;
    bullet.life -= bullet.Δlife * Δt;
    return bullet.life > 0;
  });
  if (this.inputState.up) {
    this.player.pos[1] += maxSpeed * Δt;
  }
  if (this.inputState.down) {
    this.player.pos[1] -= maxSpeed * Δt;
  }
  if (this.inputState.left) {
    this.player.pos[0] -= maxSpeed * Δt;
  }
  if (this.inputState.right) {
    this.player.pos[0] += maxSpeed * Δt;
  }
  this.player.pos[1] += autoTravelSpeed * Δt;
  this.cameraPos[1] = this.player.pos[1] + 400;
  if (this.cameraPos[0] - this.player.pos[0] > cameraDriftLimit) {
    this.cameraPos[0] -= this.cameraPos[0] - this.player.pos[0] - cameraDriftLimit;
  }
  if (this.player.pos[0] - this.cameraPos[0] > cameraDriftLimit) {
    return this.cameraPos[0] += this.player.pos[0] - this.cameraPos[0] - cameraDriftLimit;
  }
};
ENTER = 13;
SPACE = 32;
ESCAPE = 27;
KEY_Z = 90;
KEY_X = 88;
KEY_C = 67;
LEFT = 37;
RIGHT = 39;
UP = 38;
DOWN = 40;
document.addEventListener('keydown', function(event){
  var which;
  which = event.which;
  if (event.shiftKey) {
    log(which);
  }
  switch (which) {
  case ESCAPE:
    frameDriver.toggle();
    break;
  case ENTER:
    break;
  case SPACE:
    break;
  case KEY_Z:
    gameState.inputState.fire = true;
    break;
  case KEY_X:
    break;
  case KEY_C:
    break;
  case UP:
    gameState.inputState.up = true;
    break;
  case LEFT:
    gameState.inputState.left = true;
    break;
  case DOWN:
    gameState.inputState.down = true;
    break;
  case RIGHT:
    gameState.inputState.right = true;
    break;
  default:
    return event;
  }
  event.preventDefault();
  return false;
});
document.addEventListener('keyup', function(event){
  var which;
  which = event.which;
  if (event.shiftKey) {
    log(which);
  }
  switch (which) {
  case SPACE:
    break;
  case KEY_Z:
    gameState.inputState.fire = false;
    break;
  case KEY_X:
    break;
  case KEY_C:
    break;
  case UP:
    gameState.inputState.up = false;
    break;
  case LEFT:
    gameState.inputState.left = false;
    break;
  case DOWN:
    gameState.inputState.down = false;
    break;
  case RIGHT:
    gameState.inputState.right = false;
    break;
  default:
    return event;
  }
  event.preventDefault();
  return false;
});
frameDriver.onFrame(render.bind(gameState));
frameDriver.onTick(update.bind(gameState));
frameDriver.start();
mainCanvas.install(document.body);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./frame-driver":1,"std":3}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, raf, lerp, floor, sqrt, min, sin, cos, max, asin, v2, box, rnd, div, pi, tau, flip, delay, limit, wrap, z, rgb, randomFrom, randomRange, ids, idd, base64, physics, dampen, colorLog, redLog, greenLog, sfx, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.raf = raf = window.requestAnimationFrame;
out$.lerp = lerp = function(a, t, b){
  return a + t * (b - a);
};
out$.floor = floor = Math.floor;
out$.sqrt = sqrt = Math.sqrt;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.max = max = Math.max;
out$.asin = asin = Math.asin;
out$.v2 = v2 = {
  hyp: function(v){
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  },
  norm: function(v){
    var d;
    d = v2.hyp(v);
    if (d === 0) {
      return [0, 0];
    } else {
      return [v[0] / d, v[1] / d];
    }
  },
  add: function(a, b){
    return [a[0] + b[0], a[1] + b[1]];
  },
  sub: function(a, b){
    return [a[0] - b[0], a[1] - b[1]];
  },
  scale: function(v, f){
    return [v[0] * f, v[1] * f];
  },
  dist: function(a, b){
    var x, y;
    x = [b[0] - a[0]];
    y = [b[1] - a[1]];
    return sqrt(x * x + y * y);
  }
};
out$.box = box = function(n){
  return [n, n];
};
out$.rnd = rnd = function(n){
  return n * Math.random();
};
out$.div = div = function(a, b){
  return floor(a / b);
};
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.limit = limit = curry$(function(min, max, n){
  if (n < min) {
    return min;
  } else if (n > max) {
    return max;
  } else {
    return n;
  }
});
out$.wrap = wrap = curry$(function(min, max, n){
  if (n < min) {
    return max;
  } else if (n > max) {
    return min;
  } else {
    return n;
  }
});
out$.z = z = function(it){
  return floor(it * 255);
};
out$.rgb = rgb = function(r, g, b){
  return "rgb(" + z(r) + "," + z(g) + "," + z(b) + ")";
};
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(Math.random() * xs.length)];
};
out$.randomRange = randomRange = function(a, b){
  return a + rnd(b - a);
};
out$.ids = ids = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it * it;
  }
};
out$.idd = idd = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it;
  }
};
out$.base64 = base64 = function(buffer, output){
  var bytes, i$, to$, i;
  output == null && (output = "");
  bytes = new Uint8Array(buffer);
  for (i$ = 0, to$ = bytes.byteLength; i$ <= to$; ++i$) {
    i = i$;
    output += String.fromCharCode(bytes[i]);
  }
  return window.btoa(output);
};
out$.physics = physics = function(o, Δt){
  var f, that;
  f = (that = o.friction) ? that : 1;
  o.vel = v2.scale(v2.add(v2.scale(o.acc, Δt), o.vel), f);
  return o.pos = v2.add(v2.add(v2.scale(o.vel, Δt), o.pos), v2.scale(o.acc, 0.5 * Δt * Δt));
};
out$.dampen = dampen = function(o, damp, Δt){
  o.vel = v2.scale(o.vel, damp);
  return o.pos = v2.add(v2.scale(o.vel, Δt), o.pos);
};
colorLog = function(col){
  return function(text){
    var rest;
    rest = slice$.call(arguments, 1);
    return log.apply(null, ['%c' + text, "color: " + col].concat(slice$.call(rest)));
  };
};
redLog = colorLog('#e42');
greenLog = colorLog('#1d3');
out$.sfx = sfx = colorLog('#28e');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
