(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, AudioOutput, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.AudioOutput = AudioOutput = (function(){
  AudioOutput.displayName = 'AudioOutput';
  var AudioCtx, context, prototype = AudioOutput.prototype, constructor = AudioOutput;
  AudioCtx = AudioContext;
  context = new AudioCtx;
  function AudioOutput(){
    this.bufferList = {};
  }
  prototype.addSound = function(url, λ){
    var this$ = this;
    return loadAudio(context, url, function(buffer, state){
      this$.bufferList[url] = buffer;
      return λ(buffer, state);
    });
  };
  prototype.getContext = function(){
    return context;
  };
  prototype.getBufferWithUrl = function(url){
    return this.bufferList[url];
  };
  prototype.createBufferSource = function(){
    return context.createBufferSource();
  };
  prototype.createGainNode = function(){
    return context.createGain();
  };
  prototype.getDestination = function(){
    return context.destination;
  };
  prototype.play = function(sound){
    var source;
    source = context.createBufferSource();
    source.buffer = sound.buffer;
    source.connect(context.destination);
    source.start();
    return log(sound);
  };
  AudioOutput.Null = {
    addSound: id,
    getBufferWithUrl: id,
    createBufferSource: id,
    createGainNode: id,
    getDestination: id
  };
  return AudioOutput;
}());



},{"std":24}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var bgAspect, bgScrollSpeed, bg, modeToOperation, localGridSize, localGridFidelity, cameraAspect, cameraFrustrumSize, prototype = Blitter.prototype, constructor = Blitter;
  bgAspect = 0.3125;
  bgScrollSpeed = 20;
  bg = new Image;
  bg.src = '/assets/bg.jpg';
  bg.onload = function(){
    return bgAspect = bg.width / bg.height;
  };
  modeToOperation = function(mode){
    switch (mode) {
    case MODE_NORMAL:
      return 'source-over';
    case MODE_COLOR:
      return 'hue';
    case MODE_ADD:
      return 'lighten';
    default:
      return 'source-over';
    }
  };
  localGridSize = 1000;
  localGridFidelity = 100;
  cameraAspect = 1.5;
  cameraFrustrumSize = [1000, 1000 * cameraAspect];
  function Blitter(){
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.setSize([window.innerWidth, window.innerHeight]);
  }
  prototype.setSize = function(size){
    if (size[0] > size[1]) {
      this.w = this.canvas.width = size[1] / cameraAspect;
      this.h = this.canvas.height = size[1];
    } else {
      this.w = this.canvas.width = size[0];
      this.h = this.canvas.height = size[0] * cameraAspect;
    }
    this.wf = this.w / cameraFrustrumSize[0];
    return this.hf = this.h / cameraFrustrumSize[1];
  };
  prototype.translatePos = function(arg$, z){
    var x, y;
    x = arg$[0], y = arg$[1];
    z == null && (z = gameState.cameraZoom);
    return [this.w / 2 + (x - gameState.cameraPos[0]) * this.wf * z, this.h / 2 - (y - gameState.cameraPos[1]) * this.hf * z];
  };
  prototype.translateSize = function(arg$, z){
    var w, h;
    w = arg$[0], h = arg$[1];
    z == null && (z = gameState.cameraZoom);
    return [w * this.wf * z, h * this.hf * z];
  };
  prototype.circle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype.strokeCircle = function(pos, radius, arg$){
    var color, ref$, alpha, mode, x, y, r;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    r = this.translateSize([radius])[0];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(x, y, r, 0, tau);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.rect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(x - w / 2, y - h / 2, w, h);
  };
  prototype.strokeRect = function(pos, size, arg$){
    var color, ref$, alpha, mode, x, y, w, h;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(x - w / 2, y - w / 2);
    this.ctx.lineTo(x + w / 2, y - w / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x - w / 2, y - w / 2);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.line = function(start, end){
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this._line(this.ctx, start, end);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype._line = function(start, end){
    var ref$, x1, y1, x2, y2;
    ref$ = this.translatePos(start), x1 = ref$[0], y1 = ref$[1];
    ref$ = this.translatePos(end), x2 = ref$[0], y2 = ref$[1];
    this.ctx.moveTo(x1, y1);
    return this.ctx.lineTo(x2, y2);
  };
  prototype.uptri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._uptri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._uptri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y + h / 2);
    this.ctx.lineTo(x + w / 2, y + h / 2);
    this.ctx.lineTo(x + 0, y - h / 2);
    return this.ctx.lineTo(x - w / 2, y + h / 2);
  };
  prototype.dntri = function(pos, size, arg$){
    var color, ref$, alpha, mode;
    color = (ref$ = arg$.color) != null ? ref$ : 'white', alpha = (ref$ = arg$.alpha) != null ? ref$ : 1, mode = (ref$ = arg$.mode) != null ? ref$ : MODE_NORMAL;
    this.ctx.globalCompositeOperation = modeToOperation(mode);
    this.ctx.globalAlpha = alpha;
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this._dntri(pos, size);
    this.ctx.closePath();
    return this.ctx.fill();
  };
  prototype._dntri = function(pos, size){
    var ref$, x, y, w, h;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    this.ctx.moveTo(x - w / 2, y - h / 2);
    this.ctx.lineTo(x + w / 2, y - h / 2);
    this.ctx.lineTo(x + 0, y + h / 2);
    return this.ctx.lineTo(x - w / 2, y - h / 2);
  };
  prototype.clear = function(t){
    var bgHeight, bgOffset;
    t == null && (t = 0);
    bgHeight = this.w / bgAspect;
    bgOffset = t * bgScrollSpeed % bgHeight;
    this.ctx.clearRect(0, 0, this.w, this.h);
    this.ctx.globalAlpha = 1;
    return this.ctx.globalCompositeOperation = modeToOperation(MODE_NORMAL);
  };
  prototype.drawOrigin = function(){
    var ref$, cx, cy;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    this.ctx.strokeStyle = '#0f0';
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this._line([0, cy - 1000], [0, cy + 1000]);
    this._line([cx - 1000, 0], [cx + 1000, 0]);
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.drawLocalGrid = function(){
    var ref$, cx, cy, nx, ny, lgsX, lgsY, i$, step$, to$, i;
    ref$ = gameState.cameraPos, cx = ref$[0], cy = ref$[1];
    nx = cx - cx % localGridFidelity;
    ny = cy - cy % localGridFidelity;
    lgsX = cameraFrustrumSize[0] / gameState.cameraZoom;
    lgsY = cameraFrustrumSize[1] / gameState.cameraZoom;
    this.strokeRect(gameState.cameraPos, cameraFrustrumSize, {
      color: 'yellow'
    });
    this.ctx.strokeStyle = '#0f0';
    this.ctx.beginPath();
    this.ctx.globalAlpha = 0.4;
    for (i$ = nx - lgsX, to$ = nx + lgsX, step$ = localGridFidelity; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      i = i$;
      this._line([i, cy - lgsY], [i, cy + lgsY]);
    }
    for (i$ = ny - lgsY, to$ = ny + lgsY, step$ = localGridFidelity; step$ < 0 ? i$ > to$ : i$ < to$; i$ += step$) {
      i = i$;
      this._line([cx - lgsX, i + localGridFidelity], [cx + lgsX, i + localGridFidelity]);
    }
    this.ctx.closePath();
    return this.ctx.stroke();
  };
  prototype.sprite = function(arg$, pos, size){
    var width, height, image, index, ref$, x, y, w, h;
    width = arg$.width, height = arg$.height, image = arg$.image, index = arg$.index;
    ref$ = this.translatePos(pos), x = ref$[0], y = ref$[1];
    ref$ = this.translateSize(size), w = ref$[0], h = ref$[1];
    return this.ctx.drawImage(image, index * width, 0, width, height, x - w / 2, y - h / 2, w, h);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return Blitter;
}());



},{"std":24}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, Bullet, BlendBullet, SuperBullet, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb;
out$.Bullet = Bullet = (function(){
  Bullet.displayName = 'Bullet';
  var prototype = Bullet.prototype, constructor = Bullet;
  function Bullet(pos, color){
    this.pos = [pos[0], pos[1]];
    this.vel = [0, 10000];
    this.size = [80, 220];
    this.life = 1;
    this.Δlife = 1;
    this.color = color;
    this.alpha = 1;
    this.radius = 20;
    this.power = 20;
  }
  prototype.draw = function(canvas){
    var topSize, btmSize, topPos, btmPos;
    topSize = [this.size[0], this.size[1] * 1 / 4];
    btmSize = [this.size[0], this.size[1] * 3 / 4];
    topPos = [this.pos[0], this.pos[1] + this.size[1] * 3 / 8 - this.size[1] * 1 / 4];
    btmPos = [this.pos[0], this.pos[1] - this.size[1] * 1 / 8 - this.size[1] * 1 / 4];
    canvas.uptri(topPos, topSize, {
      color: rgb(this.color),
      alpha: this.alpha * this.life,
      mode: MODE_ADD
    });
    return canvas.dntri(btmPos, btmSize, {
      color: rgb(this.color),
      alpha: this.alpha * this.life,
      mode: MODE_ADD
    });
  };
  prototype.update = function(Δt){
    this.pos[1] += this.vel[1] * Δt;
    this.life -= this.Δlife * Δt;
    return this.life > 0;
  };
  return Bullet;
}());
out$.BlendBullet = BlendBullet = (function(superclass){
  var separation, prototype = extend$((import$(BlendBullet, superclass).displayName = 'BlendBullet', BlendBullet), superclass).prototype, constructor = BlendBullet;
  separation = 20;
  function BlendBullet(){
    BlendBullet.superclass.apply(this, arguments);
    this.vel[1] = 2000;
    this.radius = 40;
    this.power = 40;
    this.life = 2;
    this.size = [120, 350];
  }
  return BlendBullet;
}(Bullet));
out$.SuperBullet = SuperBullet = (function(superclass){
  var prototype = extend$((import$(SuperBullet, superclass).displayName = 'SuperBullet', SuperBullet), superclass).prototype, constructor = SuperBullet;
  function SuperBullet(){
    SuperBullet.superclass.apply(this, arguments);
    this.vel[1] = 1000;
    this.radius = 60;
    this.power = 80;
    this.size = [160, 500];
    this.life = 3;
  }
  return SuperBullet;
}(Bullet));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":24}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, lerp, floor, tau, lerpColor, rotationToColor, rotationToSpriteIndex, diamond, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, lerp = ref$.lerp, floor = ref$.floor, tau = ref$.tau;
out$.lerpColor = lerpColor = function(t, start, end){
  return [lerp(t, start[0], end[0]), lerp(t, start[1], end[1]), lerp(t, start[2], end[2])];
};
out$.rotationToColor = rotationToColor = function(θ){
  if (0 < θ && θ < tau) {
    return floor((θ / tau) * colors.length);
  } else {
    return 0;
  }
};
out$.rotationToSpriteIndex = rotationToSpriteIndex = function(θ, frames){
  return floor(frames * (θ % (tau / 3)) / (tau / 3));
};
out$.diamond = diamond = function(arg$){
  var x, y;
  x = arg$[0], y = arg$[1];
  if (x === 0) {
    return [x, y];
  } else {
    return [x / 2, y / 2];
  }
};



},{"std":24}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, v2, Drawing, ColorWheel, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau, v2 = ref$.v2;
Drawing = require('./mixins').Drawing;
out$.ColorWheel = ColorWheel = (function(){
  ColorWheel.displayName = 'ColorWheel';
  var o, m, prototype = ColorWheel.prototype, constructor = ColorWheel;
  importAll$(prototype, arguments[0]);
  o = tau * 9 / 12;
  m = colors.length;
  function ColorWheel(ctx, r){
    this.ctx = ctx;
    this.r = r;
  }
  prototype.draw = function(pos, θ, playerColor){
    var i$, ref$, len$, i, color;
    for (i$ = 0, len$ = (ref$ = colors).length; i$ < len$; ++i$) {
      i = i$;
      color = ref$[i$];
      this.ctx.fillStyle = rgb(color);
      this.ctx.beginPath();
      this.ctx.moveTo(pos[0], pos[1]);
      this.ctx.arc(pos[0], pos[1], this.r, -θ + tau / m * i + o, -θ + tau / m * (i + 1) + o);
      this.ctx.closePath();
      this.ctx.fill();
    }
    this.ctx.strokeStyle = 'white';
    this.ctx.beginPath();
    this.ctx.moveTo(pos[0], pos[1]);
    this.ctx.lineTo(pos[0] + this.r * sin(0), pos[1] - this.r * cos(0));
    this.ctx.closePath();
    this.ctx.stroke();
    return this.boxAt(v2.add(pos, [0, -(this.r + 7)]), [8, 15], rgb(colors[playerColor]));
  };
  return ColorWheel;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"./mixins":9,"std":24}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Drawing, ControllerState, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
Drawing = require('./mixins').Drawing;
out$.ControllerState = ControllerState = (function(){
  ControllerState.displayName = 'ControllerState';
  var triggerSize, stateColor, prototype = ControllerState.prototype, constructor = ControllerState;
  importAll$(prototype, arguments[0]);
  triggerSize = [25, 65];
  stateColor = function(it){
    if (it) {
      return 'red';
    } else {
      return 'lightgrey';
    }
  };
  function ControllerState(ctx, size, flipflopper){
    this.ctx = ctx;
    this.size = size;
    this.flipflopper = flipflopper;
  }
  prototype.draw = function(arg$, arg1$){
    var x, y, inputState, ref$, flip, flop, inputVel, debugVel;
    x = arg$[0], y = arg$[1];
    inputState = arg1$.inputState;
    ref$ = this.flipflopper.triggerState, flip = ref$.flip, flop = ref$.flop;
    inputVel = [inputState.x, inputState.y];
    debugVel = [inputState.rawX, inputState.rawY];
    this.boxAt([x - 80, y - 20], triggerSize, 'grey');
    this.boxAt([x + 80, y - 20], triggerSize, 'grey');
    this.boxTop([x - 80, y - 52], [25, 65 * inputState.flip], 'white');
    this.boxTop([x + 80, y - 52], [25, 65 * inputState.flop], 'white');
    this.boxAt([x - 80, y + 35], [25, 25], stateColor(flip.ignore));
    this.boxAt([x + 80, y + 35], [25, 25], stateColor(flop.ignore));
    this.boxAt([x - 65, y + 70], [55, 25], inputState.fire ? 'yellow' : '#333');
    this.boxAt([x + 0, y + 70], [50, 25], inputState['super'] ? 'yellow' : '#333');
    this.boxAt([x + 65, y + 70], [55, 25], inputState.special ? 'yellow' : '#333');
    this.ctx.beginPath();
    this.ctx.arc(x, y, 50, tau / 2, tau);
    this.ctx.lineTo(x, y + 50);
    this.ctx.closePath();
    this.ctx.stroke();
    this.circle([x + 50 * inputVel[0], y - 50 * inputVel[1]], 6, 'red');
    this.circle([x + 50 * debugVel[0], y - 50 * debugVel[1]], 6, 'white');
    this.ctx.closePath();
    return this.ctx.fill();
  };
  return ControllerState;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"./mixins":9,"std":24}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, Drawing, EasingDemonstration, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
Drawing = require('./mixins').Drawing;
out$.EasingDemonstration = EasingDemonstration = (function(){
  EasingDemonstration.displayName = 'EasingDemonstration';
  var Ease, palette, prototype = EasingDemonstration.prototype, constructor = EasingDemonstration;
  importAll$(prototype, arguments[0]);
  Ease = require('../ease');
  palette = ['white', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue'];
  function EasingDemonstration(ctx, size){
    this.ctx = ctx;
    this.size = size;
  }
  prototype.draw = function(pos, n){
    var name, ref$, easeFn, lresult$, i$, to$, i, results$ = [];
    n == null && (n = 0);
    for (name in ref$ = Ease) {
      easeFn = ref$[name];
      lresult$ = [];
      this.ctx.fillStyle = palette[n++];
      for (i$ = 0, to$ = this.size[0]; i$ <= to$; i$ += 5) {
        i = i$;
        lresult$.push(this.boxAt([i, pos[1] - this.size[1] * easeFn(i / this.size[0])], [2, 2]));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  return EasingDemonstration;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"../ease":11,"./mixins":9,"std":24}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, rgb, sin, cos, v2, rotationToColor, ColorWheel, ControllerState, RotationHistory, EasingDemonstration, DebugVis, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, v2 = ref$.v2;
rotationToColor = require('../common').rotationToColor;
ColorWheel = require('./color-wheel').ColorWheel;
ControllerState = require('./controller-state').ControllerState;
RotationHistory = require('./rotation-history').RotationHistory;
EasingDemonstration = require('./easing-demonstration').EasingDemonstration;
out$.DebugVis = DebugVis = (function(){
  DebugVis.displayName = 'DebugVis';
  var height, width, center, prototype = DebugVis.prototype, constructor = DebugVis;
  height = window.innerHeight;
  width = window.innerHeight / 1.5;
  center = [width / 2, height / 2];
  function DebugVis(flipflopper){
    this.flipflopper = flipflopper;
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.w = this.canvas.width = width;
    this.h = this.canvas.height = height;
    this.cx = this.w / 2;
    this.cy = this.h / 2;
    this.colorWheel = new ColorWheel(this.ctx, height / 9);
    this.controller = new ControllerState(this.ctx, [300, 100], this.flipflopper);
    this.rotationHist = new RotationHistory(this.ctx, 300);
    this.easeDemo = new EasingDemonstration(this.ctx, [width, 100]);
  }
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.w, this.h);
  };
  prototype.render = function(gameState, Δt, t){
    var player;
    player = gameState.player;
    this.colorWheel.draw([this.cx, height / 5], player.rotation, player.color);
    this.controller.draw(center, gameState);
    if (DEBUG_SHOW_EASING_TESTS) {
      return this.easeDemo.draw([0, height]);
    } else {
      return this.rotationHist.draw(width, height);
    }
  };
  prototype.pushRotationHistory = function(n){
    return this.rotationHist.push(n);
  };
  prototype.install = function(host){
    return host.appendChild(this.canvas);
  };
  return DebugVis;
}());



},{"../common":4,"./color-wheel":5,"./controller-state":6,"./easing-demonstration":7,"./rotation-history":10,"std":24}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, Drawing, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau;
out$.Drawing = Drawing = {
  boxAt: function(pos, size, color){
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(pos[0] - size[0] / 2, pos[1] - size[1] / 2, size[0], size[1]);
  },
  boxTop: function(pos, size, color){
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(pos[0] - size[0] / 2, pos[1], size[0], size[1]);
  },
  circle: function(pos, r, color){
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(pos[0], pos[1], r, 0, tau);
    this.ctx.closePath();
    return this.ctx.fill();
  }
};



},{"std":24}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, sin, cos, tau, rotationToColor, Drawing, LimitedArray, RotationHistory, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
rotationToColor = require('../common').rotationToColor;
Drawing = require('./mixins').Drawing;
LimitedArray = require('../limited-array').LimitedArray;
out$.RotationHistory = RotationHistory = (function(){
  RotationHistory.displayName = 'RotationHistory';
  var prototype = RotationHistory.prototype, constructor = RotationHistory;
  importAll$(prototype, arguments[0]);
  function RotationHistory(ctx, limit){
    this.ctx = ctx;
    this.limit = limit != null ? limit : 200;
    this.history = new LimitedArray(this.limit);
  }
  prototype.push = function(n){
    return this.history.push(n);
  };
  prototype.draw = function(width, height){
    var i$, ref$, len$, x, d, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.history.items).length; i$ < len$; ++i$) {
      x = i$;
      d = ref$[i$];
      results$.push(this.boxAt([x / this.limit * width, height - 10 - d * 10], [2, 2], rgb(colors[rotationToColor(d)])));
    }
    return results$;
  };
  return RotationHistory;
}(Drawing));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}



},{"../common":4,"../limited-array":20,"./mixins":9,"std":24}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, mixEase, Linear, Power2, Power3, Power4, PowerOut2, PowerOut3, PowerOut4, Swing2, Swing3, Swing4, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.mixEase = mixEase = function(In, Out){
  return function(n){
    if (n < 1 / 2) {
      return 1 / 2 * In(n * 2);
    } else {
      return 1 / 2 + 1 / 2 * Out((n - 1 / 2) * 2);
    }
  };
};
out$.Linear = Linear = function(n){
  return n;
};
out$.Power2 = Power2 = function(n){
  return n * n;
};
out$.Power3 = Power3 = function(n){
  return n * n * n;
};
out$.Power4 = Power4 = function(n){
  return n * n * n * n;
};
out$.PowerOut2 = PowerOut2 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m;
};
out$.PowerOut3 = PowerOut3 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m;
};
out$.PowerOut4 = PowerOut4 = function(n, m){
  m == null && (m = 1 - n);
  return 1 - m * m * m * m;
};
out$.Swing2 = Swing2 = mixEase(Power2, PowerOut2);
out$.Swing3 = Swing3 = mixEase(Power3, PowerOut3);
out$.Swing4 = Swing4 = mixEase(Power4, PowerOut4);



},{"std":24}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, tau, abs, lerp, Tween, Ease, mixEase, Linear, LatchingFlipFlopper, EasyFlipFlopper, FlipFlopper, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, tau = ref$.tau, abs = ref$.abs, lerp = ref$.lerp;
Tween = require('./tween').Tween;
ref$ = Ease = require('./ease'), mixEase = ref$.mixEase, Linear = ref$.Linear;
out$.LatchingFlipFlopper = LatchingFlipFlopper = (function(){
  LatchingFlipFlopper.displayName = 'LatchingFlipFlopper';
  var MODE_IDLE, MODE_COCKING, MODE_COCKED, MODE_UNCOCKING, MODE_REVERSING, dSym, stageStep, stageToRotation, normaliseStage, normaliseRotation, prototype = LatchingFlipFlopper.prototype, constructor = LatchingFlipFlopper;
  MODE_IDLE = Symbol('idle');
  MODE_COCKING = Symbol('cocking');
  MODE_COCKED = Symbol('cocked');
  MODE_UNCOCKING = Symbol('uncocking');
  MODE_REVERSING = Symbol('reversing');
  dSym = function(n){
    return ['FLIP', 'IDLE', 'FLOP'][n + 1];
  };
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(θ){
    if (θ < 0) {
      return tau - -θ % tau;
    } else {
      return θ % tau;
    }
  };
  function LatchingFlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.θ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    this.reverseTrigger = 0;
    this.ignoredTrigger = 0;
    this.triggerState = {
      flip: {
        ingore: false
      },
      flop: {
        ingore: false
      }
    };
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    if (this.reverseTrigger === d) {
      if (p === 0) {
        this.reverseTrigger = 0;
        this.cockDirection = 0;
        log('revert-release:', dSym(d));
      } else {
        log('revert:', dSym(d));
      }
      return;
    }
    if (this.ignoredTrigger === d) {
      if (p === 0) {
        this.ignoredTrigger = 0;
        this.cockDirection = 0;
        log('ignore-release:', dSym(d));
      } else {
        log('ignore:', dSym(d));
      }
      return;
    }
    switch (this.mode) {
    case MODE_IDLE:
      this.mode = MODE_COCKING;
      this.cockDirection = d;
      return this.cock.apply(this, arguments);
    case MODE_COCKING:
      if (this.cockDirection === d) {
        return this.cock.apply(this, arguments);
      } else {
        this.cockDirection = d;
        this.ignoredTrigger = d * -1;
        return this.cock.apply(this, arguments);
      }
      break;
    case MODE_COCKED:
      if (this.cockDirection === d) {
        this.mode = MODE_UNCOCKING;
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_UNCOCKING:
      if (this.cockDirection === d) {
        return this.uncock.apply(this, arguments);
      } else {
        this.mode = MODE_REVERSING;
        this.ignoredTrigger = d * -1;
        return this.reverse.apply(this, arguments);
      }
      break;
    case MODE_REVERSING:
      return this.reverse.apply(this, arguments);
    }
  };
  prototype.idle = function(d){
    this.stage = normaliseStage(this.stage + d);
    this.θ = stageToRotation(this.stage);
    this.mode = MODE_IDLE;
    this.cockDirection = 0;
    return this.ignoredTrigger = 0;
  };
  prototype.cock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    this.θ = lerp(Ease.PowerOut3(p) / 2, currentRotation, targetRotation);
    if (p === 1) {
      this.mode = MODE_COCKED;
    }
    if (p === 0) {
      return this.idle(0);
    }
  };
  prototype.uncock = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage + d);
    currentRotation = stageToRotation(this.stage);
    if (p === 0) {
      return this.idle(d);
    } else {
      return this.θ = lerp(0.5 + (1 - Ease.Power3(p)) / 2, currentRotation, targetRotation);
    }
  };
  prototype.reverse = function(d, p){
    var targetRotation, currentRotation;
    targetRotation = stageToRotation(this.stage);
    currentRotation = stageToRotation(this.stage - d / 2);
    this.θ = lerp(p, currentRotation, targetRotation);
    if (p === 1) {
      this.idle(0);
      this.reverseTrigger = d;
      return this.cockDirection = 0;
    }
  };
  return LatchingFlipFlopper;
}());
out$.EasyFlipFlopper = EasyFlipFlopper = (function(){
  EasyFlipFlopper.displayName = 'EasyFlipFlopper';
  var threshold, returnThreshold, stageStep, stageToRotation, triggerName, normaliseStage, normaliseRotation, MODE_IDLE, MODE_FLIP, MODE_FLOP, TRIGGER_FLIP, TRIGGER_FLOP, customEase, prototype = EasyFlipFlopper.prototype, constructor = EasyFlipFlopper;
  threshold = tau / 60;
  returnThreshold = 0.1;
  stageStep = tau / 3;
  stageToRotation = (function(it){
    return it * stageStep;
  });
  triggerName = function(d){
    if (d === -1) {
      return TRIGGER_FLIP;
    } else {
      return TRIGGER_FLOP;
    }
  };
  normaliseStage = function(s){
    if (s < 0) {
      return 3 - -s % 3;
    } else {
      return s % 3;
    }
  };
  normaliseRotation = function(θ){
    if (θ < 0) {
      return tau - -θ % tau;
    } else {
      return θ % tau;
    }
  };
  MODE_IDLE = Symbol('idle');
  MODE_FLIP = Symbol('flip');
  MODE_FLOP = Symbol('flop');
  TRIGGER_FLIP = 'flip';
  TRIGGER_FLOP = 'flop';
  customEase = Ease.Power2;
  function EasyFlipFlopper(arg$){
    var ref$;
    this.speed = (ref$ = (arg$ != null
      ? arg$
      : {}).speed) != null ? ref$ : 1;
    this.θ = 0;
    this.stage = 0;
    this.mode = MODE_IDLE;
    this.direction = 0;
    this.triggerState = (ref$ = {}, ref$[TRIGGER_FLIP + ""] = {
      ignore: false
    }, ref$[TRIGGER_FLOP + ""] = {
      ignore: false
    }, ref$);
  }
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  prototype.staticToStage = function(d, p){
    var trigger, target, current;
    trigger = triggerName(d);
    if (this.triggerState[trigger].ignore) {
      if (p < returnThreshold) {
        return this.triggerState[trigger].ignore = false;
      }
    } else {
      target = stageToRotation(this.stage + d);
      current = stageToRotation(this.stage);
      this.θ = lerp(customEase(p), current, target);
      if (abs(this.θ - target) < threshold) {
        this.θ = target;
        this.stage += d;
        return this.triggerState[trigger].ignore = true;
      }
    }
  };
  Object.defineProperty(prototype, 'rotation', {
    get: function(){
      return normaliseRotation(this.θ);
    },
    configurable: true,
    enumerable: true
  });
  return EasyFlipFlopper;
}());
out$.FlipFlopper = FlipFlopper = EasyFlipFlopper;



},{"./ease":11,"./tween":27,"std":24}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, raf, floor, delay, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf, floor = ref$.floor, delay = ref$.delay;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var tpsHistoryWindow, fpsHistoryWindow, SHOW_READOUT, RENDER_ON_TICK, prototype = FrameDriver.prototype, constructor = FrameDriver;
  tpsHistoryWindow = 20;
  fpsHistoryWindow = 20;
  SHOW_READOUT = true;
  RENDER_ON_TICK = false;
  function FrameDriver(){
    var ref$;
    this.tick = bind$(this, 'tick', prototype);
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      lastTickTime: 0,
      lastFrameTime: 0,
      frame: 0,
      running: false
    };
    this.callbacks = {
      tick: id,
      frame: id
    };
    this.tps = {
      value: 0,
      history: repeatArray$([0], tpsHistoryWindow)
    };
    this.fps = {
      value: 0,
      history: repeatArray$([0], fpsHistoryWindow)
    };
    if (SHOW_READOUT) {
      this.readout = document.createElement('pre');
      ref$ = this.readout.style;
      ref$.position = 'absolute';
      ref$.top = 0;
      ref$.right = 0;
      document.body.appendChild(this.readout);
    }
  }
  prototype.frame = function(){
    var now, Δt;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastFrameTime;
    this.pushFrameTime(Δt);
    this.state.lastFrameTime = now;
    this.state.frame += 1;
    return this.callbacks.frame(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
  };
  prototype.tick = function(){
    var now, Δt;
    if (this.state.running) {
      delay(0, this.tick);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.lastTickTime;
    if (SHOW_READOUT) {
      this.readout.textContent = this.fps.value + " | " + this.tps.value;
    }
    this.pushTickTime(Δt);
    this.state.lastTickTime = now;
    this.callbacks.tick(Δt / 1000, this.state.lastTickTime / 1000, this.state.frame, this.fps);
    if (RENDER_ON_TICK) {
      this.pushFrameTime(Δt);
      this.state.frame += 1;
      return this.callbacks.frame(this.state.frame);
    }
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.lastTickTime = 0;
    this.state.lastFrameTime = 0;
    this.state.running = true;
    this.tick();
    if (!RENDER_ON_TICK) {
      return this.frame();
    }
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  prototype.toggle = function(){
    if (this.state.running) {
      return this.stop();
    } else {
      return this.start();
    }
  };
  prototype.pushTickTime = function(Δt){
    this.tps.history.push(Δt);
    this.tps.history.shift();
    return this.tps.value = floor(1000 * tpsHistoryWindow / this.tps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.pushFrameTime = function(Δt){
    this.fps.history.push(Δt);
    this.fps.history.shift();
    return this.fps.value = floor(1000 * fpsHistoryWindow / this.fps.history.reduce(curry$(function(x$, y$){
      return x$ + y$;
    }), 0));
  };
  prototype.onTick = function(λ){
    return this.callbacks.tick = λ;
  };
  prototype.onFrame = function(λ){
    return this.callbacks.frame = λ;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{"std":24}],14:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
global.MODE_COLOR = Symbol('color');
global.MODE_NORMAL = Symbol('normal');
global.MODE_ADD = Symbol('add');
global.colors = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 0, 1], [1, 0, 0]];
global.FIRE_MODE_ALTERNATE = Symbol('alternate');
global.FIRE_MODE_BLEND = Symbol('blend');
global.INPUT_FIRE = Symbol('input-fire');
global.INPUT_RED = Symbol('input-red');
global.INPUT_GREEN = Symbol('input-green');
global.INPUT_BLUE = Symbol('input-blue');
global.INPUT_BOMB = Symbol('input-bomb');
global.INPUT_FLIP = Symbol('input-flip');
global.INPUT_FLOP = Symbol('input-fire');
global.INPUT_SUPER = Symbol('input-super');
global.INPUT_SPECIAL = Symbol('input-special');
global.INPUT_PAUSE = Symbol('input-pause');
global.INPUT_ROLL_LEFT = Symbol('input-roll-left');
global.INPUT_ROLL_RIGHT = Symbol('input-roll-right');
global.INPUT_X = Symbol('input-move-x');
global.INPUT_Y = Symbol('input-move-y');
global.INPUT_RAW_X = Symbol('input-raw-x');
global.INPUT_RAW_Y = Symbol('input-raw-y');
global.ASSET_LOAD_COMPLETE = Symbol('load-complete');
global.ASSET_LOAD_FAILED = Symbol('load-failed');
global.EXP_TRIGGER_ACTION_FLIPFLOP = true;
global.EXP_TRIGGER_ACTION_DODGE = !EXP_TRIGGER_ACTION_FLIPFLOP;
global.EXP_FIRE_MODE_IKARUGA = false;
global.EXP_FIRE_MODE_RADIANT = !EXP_FIRE_MODE_IKARUGA;
global.EXP_STRICT_TIME_BINDING = true;
global.EXP_MAGNET_AND_LASER = true;
global.EXP_DIRECTIONAL_LASERS = !EXP_MAGNET_AND_LASER;
global.EXP_BACKWARDS_TIME_REWIND = true;
global.EXP_BACKWARDS_TIME_SKIPPING = !EXP_BACKWARDS_TIME_REWIND;
global.GAMEPAD_AXIS_DEADZONE = 0.2;
global.DEBUG_SHOW_EASING_TESTS = false;
global.LERP_CAMERA_X = true;
global.DEBUG_DISABLE_AUDIO = false;
global.DEBUG_SIMULATE_LATENCY = false;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
(function (global){
// Generated by LiveScript 1.4.0
var ref$, id, log, floor, abs, tau, sin, cos, div, v2, delay, wrap, rgb, lerp, rnd, randomRange, FrameDriver, FlipFlopper, DebugVis, AudioOutput, Blitter, Sprite, Input, Tween, Bullet, BlendBullet, SuperBullet, Target1, Target2, Target3, RandomStream, Sound, Ease, Timer, lerpColor, diamond, rotationToColor, rotationToSpriteIndex, autoTravelSpeed, maxSpeed, autoFireSpeed, dualFireSeparation, cameraDriftLimit, flipFlopTime, rotationHistoryLimit, hitRadius, mainAudio, mainCanvas, input, flipflopper, debugVis, thrustLength, shootByRotation, shootByInput, getFireTypeFromSignal, superShoot, spawn, playerSprite, shotSound, playerSpriteSize, render, update;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor, abs = ref$.abs, tau = ref$.tau, sin = ref$.sin, cos = ref$.cos, div = ref$.div, v2 = ref$.v2;
ref$ = require('std'), delay = ref$.delay, wrap = ref$.wrap, rgb = ref$.rgb, lerp = ref$.lerp, rnd = ref$.rnd, randomRange = ref$.randomRange;
require('./global');
FrameDriver = require('./frame-driver').FrameDriver;
FlipFlopper = require('./flipflopper').FlipFlopper;
DebugVis = require('./debug').DebugVis;
AudioOutput = require('./audio-output').AudioOutput;
Blitter = require('./blitter').Blitter;
Sprite = require('./sprite').Sprite;
Input = require('./input').Input;
Tween = require('./tween').Tween;
ref$ = require('./bullet'), Bullet = ref$.Bullet, BlendBullet = ref$.BlendBullet, SuperBullet = ref$.SuperBullet;
ref$ = require('./target'), Target1 = ref$.Target1, Target2 = ref$.Target2, Target3 = ref$.Target3;
RandomStream = require('./random-stream').RandomStream;
Sound = require('./sound').Sound;
Ease = require('./ease');
Timer = require('./timer');
ref$ = require('./common'), lerpColor = ref$.lerpColor, diamond = ref$.diamond, rotationToColor = ref$.rotationToColor, rotationToSpriteIndex = ref$.rotationToSpriteIndex;
autoTravelSpeed = 1000;
maxSpeed = 1000;
autoFireSpeed = 0.04;
dualFireSeparation = 35;
cameraDriftLimit = 200;
flipFlopTime = 0.2;
rotationHistoryLimit = 200;
hitRadius = 25;
mainAudio = new AudioOutput;
mainCanvas = new Blitter;
input = new Input;
flipflopper = new FlipFlopper({
  speed: 0.2
});
debugVis = new DebugVis(flipflopper);
thrustLength = new RandomStream({
  min: 5,
  max: 50,
  speed: 0.01
});
shootByRotation = function(){
  var mid, left, right;
  mainAudio.play(shotSound);
  if (gameState.fireMode === FIRE_MODE_BLEND) {
    mid = v2.add(gameState.player.pos, [0, 170]);
    return gameState.playerBullets.push(new BlendBullet(mid, colors[gameState.player.color + 0]));
  } else {
    if (gameState.shootAlternate) {
      left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 50]);
      gameState.playerBullets.push(new Bullet(left, colors[gameState.player.color]));
    } else {
      right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 50]);
      gameState.playerBullets.push(new Bullet(right, colors[gameState.player.color]));
    }
    return gameState.shootAlternate = !gameState.shootAlternate;
  }
};
shootByInput = function(){
  var color, left, right;
  mainAudio.play(shotSound);
  color = [gameState.inputState.red ? 1 : 0, gameState.inputState.green ? 1 : 0, gameState.inputState.blue ? 1 : 0];
  if (gameState.shootAlternate) {
    left = v2.add(gameState.player.pos, [dualFireSeparation / -2, 50]);
    gameState.playerBullets.push(new Bullet(left, color));
  } else {
    right = v2.add(gameState.player.pos, [dualFireSeparation / +2, 50]);
    gameState.playerBullets.push(new Bullet(right, color));
  }
  return gameState.shootAlternate = !gameState.shootAlternate;
};
getFireTypeFromSignal = function(it){
  switch (it) {
  case INPUT_RED:
    return 'red';
  case INPUT_GREEN:
    return 'green';
  case INPUT_BLUE:
    return 'blue';
  default:
    return log("Can't recognise Radiant fire mode:", it);
  }
};
superShoot = function(){
  var mid;
  mainAudio.play(shotSound);
  mid = v2.add(gameState.player.pos, [0, 170]);
  return gameState.playerBullets.push(new SuperBullet(mid, [1, 1, 1]));
};
spawn = function(){
  var targets, y, color;
  targets = gameState.targets;
  y = gameState.player.pos[1];
  switch (floor(rnd(3))) {
  case 0:
    targets.push(new Target1([-300, y + 600], [1, 0, 0]));
    targets.push(new Target2([-150, y + 550], [1, 1, 0]));
    targets.push(new Target1([0, y + 500], [0, 1, 0]));
    targets.push(new Target2([150, y + 550], [0, 1, 1]));
    targets.push(new Target1([300, y + 600], [0, 0, 1]));
    return targets.push(new Target2([0, y + 750], [1, 0, 1]));
  case 1:
    color = [[1, 0, 0], [0, 1, 0], [0, 0, 1]][floor(rnd(3))];
    targets.push(new Target1([-300, y + 600], color));
    targets.push(new Target1([-150, y + 550], color));
    targets.push(new Target1([0, y + 500], color));
    targets.push(new Target1([150, y + 550], color));
    targets.push(new Target1([300, y + 600], color));
    targets.push(new Target1([0, y + 750], color));
    targets.push(new Target1([-300, y + 750], color));
    targets.push(new Target1([-150, y + 700], color));
    targets.push(new Target1([0, y + 650], color));
    targets.push(new Target1([150, y + 700], color));
    targets.push(new Target1([300, y + 750], color));
    return targets.push(new Target1([0, y + 900], color));
  case 2:
    targets.push(new Target2([-300, y + 600], [1, 1, 0]));
    targets.push(new Target2([-150, y + 550], [0, 1, 1]));
    targets.push(new Target2([0, y + 500], [1, 0, 1]));
    targets.push(new Target2([150, y + 550], [0, 1, 1]));
    return targets.push(new Target2([300, y + 600], [1, 1, 0]));
  }
};
global.gameState = {
  worldTime: 0,
  Δt: 0,
  cameraZoom: 0.7,
  cameraPos: [0, 0],
  timeFactor: 0.1,
  player: {
    pos: [0, 0],
    vel: [0, 0],
    flipping: false,
    flopping: false,
    color: 0,
    rotation: 0
  },
  timers: {
    autoFireTimer: Timer.create(autoFireSpeed),
    flipFlopTimer: Timer.create(flipFlopTime, {
      disabled: true
    })
  },
  fireMode: FIRE_MODE_ALTERNATE,
  shootAlternate: false,
  fireRenderAlternate: false,
  playerBullets: [],
  inputState: {
    up: false,
    down: false,
    left: false,
    right: false,
    fire: false,
    red: false,
    green: false,
    blue: false,
    pause: false,
    flip: 0,
    flop: 0,
    x: 0,
    y: 0,
    rawX: 0,
    rawY: 0,
    mouseX: 0,
    mouseY: 0
  },
  targets: []
};
playerSprite = new Sprite('/assets/player-sprite.png', [100, 120], 24);
shotSound = new Sound('/assets/shot.mp3', mainAudio.getContext());
playerSpriteSize = [70, 80];
render = function(Δt, t){
  var p, playerColor, i$, ref$, len$, target, len, bullet;
  p = Timer.getProgress(this.timers.flipFlopTimer);
  playerColor = rgb(this.player.flipping
    ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color + 1)])
    : this.player.flopping
      ? lerpColor(p, colors[this.player.color], colors[wrap(0, colors.length - 1, this.player.color - 1)])
      : colors[this.player.color]);
  mainCanvas.clear(t);
  mainCanvas.drawOrigin();
  mainCanvas.drawLocalGrid();
  for (i$ = 0, len$ = (ref$ = this.targets).length; i$ < len$; ++i$) {
    target = ref$[i$];
    target.draw(mainCanvas);
  }
  len = thrustLength.getValue();
  mainCanvas.rect(v2.add(this.player.pos, [0, -500]), [3, 1000], {
    color: playerColor
  });
  mainCanvas.sprite(playerSprite, this.player.pos, playerSpriteSize);
  mainCanvas.dntri(v2.add(this.player.pos, [0, -28 - len / 2]), [20, len], {
    color: playerColor
  });
  for (i$ = 0, len$ = (ref$ = this.playerBullets).length; i$ < len$; ++i$) {
    bullet = ref$[i$];
    bullet.draw(mainCanvas);
    mainCanvas.strokeCircle(bullet.pos, bullet.radius, {
      color: 'white'
    });
  }
  debugVis.clear();
  return debugVis.render(gameState, flipflopper, Δt, t);
};
update = function(Δt, t){
  var event, type, value, color, inputVec, normalVec, θ, α, mag, playerVel, i$, ref$, len$, target, newFireMode, fireTimerFactor, colorSum, this$ = this;
  this.Δt = Δt * (EXP_STRICT_TIME_BINDING ? this.timeFactor : 1);
  this.worldTime += this.Δt;
  this.systemTime += Δt;
  Tween.updateAll(this.Δt);
  Timer.updateAndCarry(this.timers.autoFireTimer, this.Δt);
  input.update(this.Δt, this.worldTime);
  thrustLength.update(this.Δt);
  while (event = input.pendingEvents.shift()) {
    type = event[0], value = event[1];
    switch (type) {
    case INPUT_FIRE:
      if (this.inputState.fire !== value) {
        this.inputState.fire = value;
        if (value) {
          shootByRotation();
          if (this.fireMode === FIRE_MODE_ALTERNATE) {
            Timer.reset(this.timers.autoFireTimer, autoFireSpeed * (this.fireMode === FIRE_MODE_ALTERNATE ? 1 : 2));
          }
        }
      }
      break;
    case INPUT_RED:
    case INPUT_BLUE:
    case INPUT_GREEN:
      color = getFireTypeFromSignal(type);
      if (this.inputState[color] !== value) {
        this.inputState[color] = value;
        if (value) {
          shootByInput();
          if (this.fireMode === FIRE_MODE_ALTERNATE) {
            Timer.reset(this.timers.autoFireTimer, autoFireSpeed * (this.fireMode === FIRE_MODE_ALTERNATE ? 1 : 2));
          }
        }
      }
      break;
    case INPUT_RAW_X:
      this.inputState.rawX = value;
      break;
    case INPUT_RAW_Y:
      this.inputState.rawY = value;
      break;
    case INPUT_PAUSE:
      if (value) {
        frameDriver.toggle();
      }
      break;
    case INPUT_SUPER:
      if (value) {
        superShoot();
      }
      break;
    case INPUT_FLIP:
      if (this.inputState.flip < value) {
        flipflopper.staticToStage(-1, value);
      } else if (this.inputState.flip > value) {
        flipflopper.staticToStage(-1, value);
      }
      this.inputState.flip = value;
      break;
    case INPUT_FLOP:
      if (this.inputState.flop < value) {
        flipflopper.staticToStage(1, value);
      } else if (this.inputState.flop > value) {
        flipflopper.staticToStage(1, value);
      }
      this.inputState.flop = value;
    }
  }
  inputVec = [this.inputState.rawX, this.inputState.rawY];
  normalVec = inputVec[1] > 0
    ? v2.norm(inputVec)
    : (θ = Math.atan2(-this.inputState.rawY, Math.abs(this.inputState.rawX)), α = tau / 2 - tau / 8, mag = sin(α) / sin(α - θ), v2.scale(v2.norm(inputVec), mag));
  this.inputState.x = normalVec[0];
  this.inputState.y = normalVec[1];
  playerVel = v2.scale(normalVec, maxSpeed);
  this.player.pos[0] += playerVel[0] * this.Δt;
  if (!EXP_STRICT_TIME_BINDING) {
    this.player.pos[1] += playerVel[1] * this.Δt;
  }
  if (EXP_STRICT_TIME_BINDING) {
    this.timeFactor = 0.5 + normalVec[1] / 2;
  }
  this.player.pos[1] += autoTravelSpeed * this.Δt;
  for (i$ = 0, len$ = (ref$ = this.targets).length; i$ < len$; ++i$) {
    target = ref$[i$];
    target.pos[1] += autoTravelSpeed * this.Δt;
  }
  this.player.rotation = flipflopper.rotation;
  this.player.color = rotationToColor(this.player.rotation);
  playerSprite.index = rotationToSpriteIndex(this.player.rotation, playerSprite.frames);
  debugVis.pushRotationHistory(this.player.rotation);
  if (EXP_FIRE_MODE_IKARUGA) {
    if (gameState.player.color % 3 === 1) {
      newFireMode = FIRE_MODE_BLEND;
      fireTimerFactor = 2;
    } else {
      newFireMode = FIRE_MODE_ALTERNATE;
      fireTimerFactor = 1;
    }
    if (this.fireMode !== newFireMode) {
      if (newFireMode === FIRE_MODE_ALTERNATE) {
        Timer.reset(this.timers.autoFireTimer);
      }
    }
    this.timers.autoFireTimer.target = autoFireSpeed * fireTimerFactor;
    this.fireMode = newFireMode;
    if (newFireMode === FIRE_MODE_ALTERNATE) {
      if (this.timers.autoFireTimer.elapsed && this.inputState.fire) {
        shootByRotation();
      }
    }
  }
  if (EXP_FIRE_MODE_RADIANT) {
    if (this.fireMode === FIRE_MODE_ALTERNATE) {
      if (this.timers.autoFireTimer.elapsed && (this.inputState.red || this.inputState.blue || this.inputState.green)) {
        shootByInput();
      }
    }
  }
  this.playerBullets = this.playerBullets.filter(function(it){
    return it.update(this.Δt);
  }.bind(this));
  colorSum = function(color){
    return color[0] + color[1] + color[2];
  };
  this.targets = this.targets.filter(function(target, i){
    var i$, ref$, len$, bullet, dist, targetValue, bulletValue, additiveBonus, damageBonus, damage;
    target.update(this$.Δt);
    for (i$ = 0, len$ = (ref$ = this$.playerBullets).length; i$ < len$; ++i$) {
      bullet = ref$[i$];
      dist = v2.dist(target.pos, bullet.pos);
      if (dist <= target.radius + bullet.radius) {
        targetValue = colorSum(target.color);
        bulletValue = colorSum(bullet.color);
        additiveBonus = colorSum([target.color[0] * bullet.color[0], target.color[1] * bullet.color[1], target.color[2] * bullet.color[2]]);
        damageBonus = additiveBonus / targetValue * bulletValue;
        damage = (1 + damageBonus) * bullet.power;
        target.damage(damage);
        bullet.power -= damage;
        if (bullet.power <= 0) {
          bullet.life = 0;
        }
      }
    }
    return target.health >= 0;
  });
  this.cameraPos[1] = this.player.pos[1] + 200;
  if (LERP_CAMERA_X) {
    this.cameraPos[0] = lerp(20 * this.Δt, this.cameraPos[0], this.player.pos[0]);
  } else {
    if (this.cameraPos[0] - this.player.pos[0] > cameraDriftLimit) {
      this.cameraPos[0] -= this.cameraPos[0] - this.player.pos[0] - cameraDriftLimit;
    }
    if (this.player.pos[0] - this.cameraPos[0] > cameraDriftLimit) {
      this.cameraPos[0] += this.player.pos[0] - this.cameraPos[0] - cameraDriftLimit;
    }
  }
  if (this.targets.length === 0) {
    return spawn();
  }
};
global.frameDriver = new FrameDriver;
frameDriver.onFrame(render.bind(gameState));
frameDriver.onTick(update.bind(gameState));
frameDriver.start();
mainCanvas.install(document.body);
debugVis.install(document.body);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./audio-output":1,"./blitter":2,"./bullet":3,"./common":4,"./debug":8,"./ease":11,"./flipflopper":12,"./frame-driver":13,"./global":14,"./input":18,"./random-stream":21,"./sound":22,"./sprite":23,"./target":25,"./timer":26,"./tween":27,"std":24}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, min, max, sin, cos, tau, AutomatedController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, min = ref$.min, max = ref$.max, sin = ref$.sin, cos = ref$.cos, tau = ref$.tau;
out$.AutomatedController = AutomatedController = (function(){
  AutomatedController.displayName = 'AutomatedController';
  var radius, limit, prototype = AutomatedController.prototype, constructor = AutomatedController;
  radius = 1.5;
  limit = function(it){
    return max(-1.5, min(1.5, it));
  };
  function AutomatedController(callback){
    this.callback = callback != null ? callback : id;
    this.state = {
      buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      axes: [0, 0, 0, 0]
    };
  }
  prototype.proxyEvent = function(binding, value){
    return this.callback(binding, value);
  };
  prototype.update = function(Δt, t){
    t = 2 * t;
    this.proxyEvent(INPUT_X, limit(sin(t)));
    this.proxyEvent(INPUT_Y, limit(cos(t)));
    this.proxyEvent(INPUT_RAW_X, limit(sin(t) * radius));
    return this.proxyEvent(INPUT_RAW_Y, limit(cos(t) * radius));
  };
  return AutomatedController;
}());



},{"std":24}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, NO_BINDING, BUTTON_A, BUTTON_B, BUTTON_X, BUTTON_Y, LEFT_TRIGGER, RIGHT_TRIGGER, LEFT_BUMPER, RIGHT_BUMPER, BUTTON_SELECT, BUTTON_START, LEFT_STICK_CLICK, RIGHT_STICK_CLICK, DPAD_TOP, DPAD_BOTTOM, DPAD_LEFT, DPAD_RIGHT, LEFT_STICK_X, LEFT_STICK_Y, RIGHT_STICK_X, RIGHT_STICK_Y, x$, flipflopBinding, y$, radiantBinding, z$, axisBindings, keyBindings, GamepadController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
NO_BINDING = Symbol('no-binding');
BUTTON_A = 0;
BUTTON_B = 1;
BUTTON_X = 2;
BUTTON_Y = 3;
LEFT_TRIGGER = 6;
RIGHT_TRIGGER = 7;
LEFT_BUMPER = 4;
RIGHT_BUMPER = 5;
BUTTON_SELECT = 8;
BUTTON_START = 9;
LEFT_STICK_CLICK = 10;
RIGHT_STICK_CLICK = 11;
DPAD_TOP = 12;
DPAD_BOTTOM = 13;
DPAD_LEFT = 14;
DPAD_RIGHT = 15;
LEFT_STICK_X = 0;
LEFT_STICK_Y = 1;
RIGHT_STICK_X = 2;
RIGHT_STICK_Y = 3;
x$ = flipflopBinding = new Map;
x$.set(BUTTON_A, INPUT_FIRE);
x$.set(BUTTON_Y, INPUT_SUPER);
x$.set(BUTTON_B, INPUT_SPECIAL);
x$.set(LEFT_TRIGGER, INPUT_FLIP);
x$.set(RIGHT_TRIGGER, INPUT_FLOP);
x$.set(BUTTON_START, INPUT_PAUSE);
y$ = radiantBinding = new Map;
y$.set(BUTTON_A, INPUT_GREEN);
y$.set(BUTTON_X, INPUT_BLUE);
y$.set(BUTTON_B, INPUT_RED);
y$.set(LEFT_TRIGGER, INPUT_ROLL_LEFT);
y$.set(RIGHT_TRIGGER, INPUT_ROLL_RIGHT);
y$.set(BUTTON_START, INPUT_PAUSE);
z$ = axisBindings = new Map;
z$.set(LEFT_STICK_X, INPUT_RAW_X);
z$.set(LEFT_STICK_Y, INPUT_RAW_Y);
keyBindings = EXP_FIRE_MODE_RADIANT ? radiantBinding : flipflopBinding;
out$.GamepadController = GamepadController = (function(){
  GamepadController.displayName = 'GamepadController';
  var prototype = GamepadController.prototype, constructor = GamepadController;
  function GamepadController(callback){
    this.callback = callback != null ? callback : id;
    this.state = {
      buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      axes: [0, 0, 0, 0]
    };
  }
  prototype.proxyEvent = function(value, binding){
    return this.callback(binding, value);
  };
  prototype.update = function(Δt){
    var gamepad, i$, ref$, len$, which, button, raw, dead, value, results$ = [];
    gamepad = navigator.getGamepads()[0];
    if (gamepad) {
      for (i$ = 0, len$ = (ref$ = gamepad.buttons).length; i$ < len$; ++i$) {
        which = i$;
        button = ref$[i$];
        if (button.value !== this.state.buttons[which]) {
          log('Gamepad:', which, keyBindings.get(which));
          this.proxyEvent(button.value, keyBindings.get(which));
          this.state.buttons[which] = button.value;
        }
      }
      for (i$ = 0, len$ = (ref$ = gamepad.axes).length; i$ < len$; ++i$) {
        which = i$;
        raw = ref$[i$];
        dead = -GAMEPAD_AXIS_DEADZONE < raw && raw < GAMEPAD_AXIS_DEADZONE;
        value = dead ? 0 : raw;
        value = which === LEFT_STICK_Y ? -value : value;
        if (value !== this.state.axes[which]) {
          this.proxyEvent(value, axisBindings.get(which));
          results$.push(this.state.axes[which] = value);
        }
      }
      return results$;
    }
  };
  return GamepadController;
}());



},{"std":24}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, GamepadController, KeyboardController, AutomatedController, Input, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
GamepadController = require('./gamepad').GamepadController;
KeyboardController = require('./keyboard').KeyboardController;
AutomatedController = require('./automated').AutomatedController;
out$.Input = Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.pushEvent = bind$(this, 'pushEvent', prototype);
    this.pendingEvents = [];
    this.keyboard = new KeyboardController(this.pushEvent);
    this.gamepad = new GamepadController(this.pushEvent);
    this.auto = new AutomatedController(this.pushEvent);
  }
  prototype.update = function(Δt, t){
    this.keyboard.update(Δt, t);
    return this.gamepad.update(Δt, t);
  };
  prototype.pushEvent = function(type, value){
    return this.pendingEvents.push([type, value]);
  };
  return Input;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"../timer":26,"./automated":16,"./gamepad":17,"./keyboard":19,"std":24}],19:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Timer, ENTER, SPACE, ESCAPE, KEY_A, KEY_C, KEY_D, KEY_E, KEY_Q, KEY_S, KEY_W, KEY_X, KEY_Z, LEFT, RIGHT, UP, DOWN, TRIGGER_DIR_STABLE, TRIGGER_DIR_PRESS, TRIGGER_DIR_RELEASE, KeyboardController, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Timer = require('../timer');
ENTER = 13;
SPACE = 32;
ESCAPE = 27;
KEY_A = 65;
KEY_C = 67;
KEY_D = 68;
KEY_E = 69;
KEY_Q = 81;
KEY_S = 83;
KEY_W = 87;
KEY_X = 88;
KEY_Z = 90;
LEFT = 37;
RIGHT = 39;
UP = 38;
DOWN = 40;
TRIGGER_DIR_STABLE = Symbol('trigger-direction-stable');
TRIGGER_DIR_PRESS = Symbol('trigger-direction-press');
TRIGGER_DIR_RELEASE = Symbol('trigger-direction-release');
out$.KeyboardController = KeyboardController = (function(){
  KeyboardController.displayName = 'KeyboardController';
  var simulatedTravelTime, prototype = KeyboardController.prototype, constructor = KeyboardController;
  simulatedTravelTime = 0.05 * 2;
  function KeyboardController(callback){
    this.callback = callback != null ? callback : id;
    this.simTriggers = [
      {
        type: INPUT_FLIP,
        dir: TRIGGER_DIR_STABLE,
        value: 0,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }, {
        type: INPUT_FLOP,
        value: 0,
        dir: TRIGGER_DIR_STABLE,
        timer: Timer.create(simulatedTravelTime, {
          disabled: true
        })
      }
    ];
    this.cursorState = {
      up: false,
      down: false,
      left: false,
      right: false
    };
    document.addEventListener('keydown', this.handleKey(true));
    document.addEventListener('keyup', this.handleKey(false));
  }
  prototype.proxyEvent = function(type, value){
    return this.callback(type, value);
  };
  prototype.update = function(Δt){
    var i$, ref$, len$, trigger, p, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.simTriggers).length; i$ < len$; ++i$) {
      trigger = ref$[i$];
      Timer.updateAndStop(trigger.timer, Δt);
      p = trigger.timer.current / simulatedTravelTime;
      if (trigger.value !== p) {
        if (trigger.dir === TRIGGER_DIR_RELEASE) {
          this.proxyEvent(trigger.type, trigger.timer.target / simulatedTravelTime - p);
        } else {
          this.proxyEvent(trigger.type, p);
        }
      }
      if (trigger.elapsed && trigger.dir === TRIGGER_DIR_RELEASE) {
        trigger.dir = TRIGGER_DIRECTION_STABLE;
      }
      results$.push(trigger.value = p);
    }
    return results$;
  };
  prototype.handleKey = function(dir){
    var this$ = this;
    return function(event){
      var which;
      which = event.which;
      if (event.shiftKey) {
        log(which);
      }
      if (!this$.dispatchKeyResponse(dir, which)) {
        return event;
      }
      event.preventDefault();
      return false;
    };
  };
  prototype.dispatchKeyResponse = function(dir, which){
    switch (which) {
    case KEY_Z:
      return this.simulateTrigger(0, dir, 1);
    case KEY_C:
      return this.simulateTrigger(1, dir, 1);
    case KEY_A:
      return this.simulateTrigger(0, dir, 0.5);
    case KEY_D:
      return this.simulateTrigger(1, dir, 0.5);
    case KEY_S:
      return this.proxyEvent(INPUT_FIRE, dir);
    case KEY_X:
      return this.proxyEvent(INPUT_FIRE, dir);
    case KEY_W:
      return this.proxyEvent(INPUT_SUPER, dir);
    case UP:
      return this.cursorVelocityY('up', dir);
    case DOWN:
      return this.cursorVelocityY('down', dir);
    case LEFT:
      return this.cursorVelocityX('left', dir);
    case RIGHT:
      return this.cursorVelocityX('right', dir);
    case ESCAPE:
      return this.proxyEvent(INPUT_PAUSE, dir ? frameDriver.toggle() : void 8);
    }
  };
  prototype.cursorVelocityX = function(key, dir){
    var value;
    this.cursorState[key] = dir;
    value = this.cursorState.right - this.cursorState.left;
    this.proxyEvent(INPUT_RAW_X, value);
    return this.proxyEvent(INPUT_X, value);
  };
  prototype.cursorVelocityY = function(key, dir){
    var value;
    this.cursorState[key] = dir;
    value = this.cursorState.up - this.cursorState.down;
    this.proxyEvent(INPUT_RAW_Y, value);
    return this.proxyEvent(INPUT_Y, value);
  };
  prototype.simulate = function(trigger, target, dir){
    var direction;
    direction = dir ? TRIGGER_DIR_PRESS : TRIGGER_DIR_RELEASE;
    trigger.timer.target = target;
    if (direction !== trigger.dir) {
      if (trigger.timer.active) {
        trigger.timer.current = trigger.timer.target - trigger.timer.current;
      } else {
        Timer.reset(trigger.timer);
      }
      return trigger.dir = direction;
    }
  };
  prototype.simulateTrigger = function(side, dir, mult){
    mult == null && (mult = 2);
    return this.simulate(this.simTriggers[side], simulatedTravelTime * mult, dir);
  };
  return KeyboardController;
}());



},{"../timer":26,"std":24}],20:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var LimitedArray, out$ = typeof exports != 'undefined' && exports || this;
out$.LimitedArray = LimitedArray = (function(){
  LimitedArray.displayName = 'LimitedArray';
  var prototype = LimitedArray.prototype, constructor = LimitedArray;
  function LimitedArray(limit){
    this.limit = limit;
    this.buffer = [];
  }
  prototype.push = function(n){
    this.buffer.push(n);
    if (this.buffer.length > this.limit) {
      return this.buffer.shift();
    }
  };
  prototype.unshift = function(n){
    this.buffer.unshift(n);
    if (this.buffer.length > this.limit) {
      return this.buffer.pop();
    }
  };
  prototype.pop = function(){
    return this.buffer.pop();
  };
  prototype.shift = function(){
    return this.buffer.shift();
  };
  Object.defineProperty(prototype, 'items', {
    get: function(){
      return this.buffer;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'length', {
    get: function(){
      return this.buffer.length;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'spaceAvailable', {
    get: function(){
      return this.buffer.length < this.limit;
    },
    configurable: true,
    enumerable: true
  });
  return LimitedArray;
}());



},{}],21:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, lerp, floor, randomRange, LimitedArray, RandomStream, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, lerp = ref$.lerp, floor = ref$.floor, randomRange = ref$.randomRange;
LimitedArray = require('./limited-array').LimitedArray;
out$.RandomStream = RandomStream = (function(){
  RandomStream.displayName = 'RandomStream';
  var prototype = RandomStream.prototype, constructor = RandomStream;
  function RandomStream(arg$){
    var ref$;
    this.min = arg$.min, this.max = arg$.max, this.bufferSize = (ref$ = arg$.bufferSize) != null ? ref$ : 10, this.speed = (ref$ = arg$.speed) != null ? ref$ : 1;
    this.buffer = new LimitedArray(this.bufferSize);
    this.timeToNextValue = 0;
  }
  prototype.getValue = function(){
    return lerp(this.timeToNextValue / this.speed, this.buffer.items[0], this.buffer.items[1]);
  };
  prototype.update = function(Δt){
    this.timeToNextValue += Δt;
    if (this.timeToNextValue >= this.speed) {
      this.timeToNextValue %= this.speed;
      this.buffer.shift();
    }
    if (this.buffer.spaceAvailable) {
      return this.buffer.push(randomRange(this.min, this.max));
    }
  };
  return RandomStream;
}());



},{"./limited-array":20,"std":24}],22:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Sound, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Sound = Sound = (function(){
  Sound.displayName = 'Sound';
  var loadAudio, prototype = Sound.prototype, constructor = Sound;
  loadAudio = function(context, url, λ){
    var onDecodeAudio, onDecodeFailed, req;
    if (DEBUG_DISABLE_AUDIO) {
      return λ(null, ASSET_LOAD_COMPLETE);
    }
    onDecodeAudio = function(buffer){
      if (!buffer) {
        warn("SOMETHING WRONG - can't load " + url);
        return λ(buffer, ASSET_LOAD_FAILED);
      } else {
        return λ(buffer, ASSET_LOAD_COMPLETE);
      }
    };
    onDecodeFailed = function(){
      log("ERROR DECODING " + url);
      return λ(void 8, ASSET_LOAD_FAILED);
    };
    req = new XMLHttpRequest;
    req.open('GET', url, true);
    req.responseType = 'arraybuffer';
    req.onload = function(){
      log(req.response);
      return context.decodeAudioData(req.response, onDecodeAudio, onDecodeFailed);
    };
    req.onerror = function(){
      return λ(buffer, ASSET_LOAD_FAILED);
    };
    return req.send();
  };
  function Sound(url, ctx){
    var this$ = this;
    this.url = url;
    this.ctx = ctx;
    log(this.buffer = this.ctx.createBuffer(2, 2, 44100));
    loadAudio(this.ctx, this.url, function(buffer, status){
      if (status === ASSET_LOAD_COMPLETE) {
        return this$.buffer = buffer;
      }
    });
  }
  prototype.load = function(url){};
  return Sound;
}());



},{"std":24}],23:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Sprite, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Sprite = Sprite = (function(){
  Sprite.displayName = 'Sprite';
  var prototype = Sprite.prototype, constructor = Sprite;
  function Sprite(src, arg$, frames){
    var width, height, image;
    width = arg$[0], height = arg$[1];
    image = new Image;
    image.width = width * frames;
    image.height = height;
    image.src = src;
    this.index = 0;
    this.width = width;
    this.height = height;
    this.image = image;
    this.frames = frames;
  }
  prototype.blitTo = function(ctx){};
  return Sprite;
}());



},{"std":24}],24:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var id, log, raf, lerp, floor, sqrt, abs, min, sin, cos, max, asin, v2, box, rnd, div, pi, tau, flip, delay, limit, wrap, randomFrom, randomRange, ids, idd, base64, padTwo, hex, rgb, ease, physics, dampen, colorLog, redLog, greenLog, sfx, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.raf = raf = window.requestAnimationFrame;
out$.lerp = lerp = function(a, t, b){
  return a + t * (b - a);
};
out$.floor = floor = Math.floor;
out$.sqrt = sqrt = Math.sqrt;
out$.abs = abs = Math.abs;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.max = max = Math.max;
out$.asin = asin = Math.asin;
out$.v2 = v2 = {
  hyp: function(v){
    return sqrt(v[0] * v[0] + v[1] * v[1]);
  },
  norm: function(v){
    var d;
    d = v2.hyp(v);
    if (d === 0) {
      return [0, 0];
    } else {
      return [v[0] / d, v[1] / d];
    }
  },
  add: function(a, b){
    return [a[0] + b[0], a[1] + b[1]];
  },
  sub: function(a, b){
    return [a[0] - b[0], a[1] - b[1]];
  },
  scale: function(v, f){
    return [v[0] * f, v[1] * f];
  },
  dist: function(a, b){
    return sqrt(v2.dist2(a, b));
  },
  dist2: function(a, b){
    var x, y;
    x = [b[0] - a[0]];
    y = [b[1] - a[1]];
    return x * x + y * y;
  }
};
out$.box = box = function(n){
  return [n, n];
};
out$.rnd = rnd = function(n){
  return n * Math.random();
};
out$.div = div = function(a, b){
  return floor(a / b);
};
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.limit = limit = curry$(function(min, max, n){
  if (n < min) {
    return min;
  } else if (n > max) {
    return max;
  } else {
    return n;
  }
});
out$.wrap = wrap = curry$(function(min, max, n){
  if (n < min) {
    return max;
  } else if (n > max) {
    return min;
  } else {
    return n;
  }
});
out$.randomFrom = randomFrom = function(xs){
  return xs[floor(Math.random() * xs.length)];
};
out$.randomRange = randomRange = function(a, b){
  return a + rnd(b - a);
};
out$.ids = ids = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it * it;
  }
};
out$.idd = idd = function(it){
  if (it === 0) {
    return 0;
  } else {
    return 1 / it;
  }
};
out$.base64 = base64 = function(buffer, output){
  var bytes, i$, to$, i;
  output == null && (output = "");
  bytes = new Uint8Array(buffer);
  for (i$ = 0, to$ = bytes.byteLength; i$ <= to$; ++i$) {
    i = i$;
    output += String.fromCharCode(bytes[i]);
  }
  return window.btoa(output);
};
out$.padTwo = padTwo = function(str){
  if (str.length < 2) {
    return "0" + str;
  } else {
    return str;
  }
};
out$.hex = hex = function(decimal){
  return padTwo(floor(decimal).toString(16));
};
out$.rgb = rgb = function(arg$){
  var r, g, b;
  r = arg$[0], g = arg$[1], b = arg$[2];
  return "#" + hex(r * 255) + hex(g * 255) + hex(b * 255);
};
out$.lerp = lerp = function(t, a, b){
  return a + t * (b - a);
};
out$.ease = ease = function(t, a, b, λ){
  return a + λ(t) * (b - a);
};
out$.physics = physics = function(o, Δt){
  var f, that;
  f = (that = o.friction) ? that : 1;
  o.vel = v2.scale(v2.add(v2.scale(o.acc, Δt), o.vel), f);
  return o.pos = v2.add(v2.add(v2.scale(o.vel, Δt), o.pos), v2.scale(o.acc, 0.5 * Δt * Δt));
};
out$.dampen = dampen = function(o, damp, Δt){
  o.vel = v2.scale(o.vel, damp);
  return o.pos = v2.add(v2.scale(o.vel, Δt), o.pos);
};
colorLog = function(col){
  return function(text){
    var rest;
    rest = slice$.call(arguments, 1);
    return log.apply(null, ['%c' + text, "color: " + col].concat(slice$.call(rest)));
  };
};
redLog = colorLog('#e42');
greenLog = colorLog('#1d3');
out$.sfx = sfx = colorLog('#28e');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}



},{}],25:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, rgb, Target1, Target2, Target3, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rgb = ref$.rgb;
out$.Target1 = Target1 = (function(){
  Target1.displayName = 'Target1';
  var prototype = Target1.prototype, constructor = Target1;
  function Target1(pos, color){
    this.pos = [pos[0], pos[1]];
    this.vel = [0, -100];
    this.size = [90, 90];
    this.health = 50;
    this.alive = true;
    this.color = color;
    this.radius = 30;
  }
  prototype.damage = function(amount){
    this.health -= amount;
    return this.alive = this.health <= 0;
  };
  prototype.draw = function(canvas){
    canvas.dntri(this.pos, this.size, {
      color: rgb(this.color)
    });
    return canvas.strokeCircle(this.pos, this.radius, {
      color: 'white'
    });
  };
  prototype.update = function(Δt){
    this.pos[1] += this.vel[1] * Δt;
    return this.alive;
  };
  return Target1;
}());
out$.Target2 = Target2 = (function(superclass){
  var prototype = extend$((import$(Target2, superclass).displayName = 'Target2', Target2), superclass).prototype, constructor = Target2;
  function Target2(pos, color){
    Target2.superclass.apply(this, arguments);
    this.size = [150, 150];
    this.health = 100;
    this.radius = 50;
  }
  return Target2;
}(Target1));
out$.Target3 = Target3 = (function(superclass){
  var prototype = extend$((import$(Target3, superclass).displayName = 'Target3', Target3), superclass).prototype, constructor = Target3;
  function Target3(pos, color){
    Target3.superclass.apply(this, arguments);
    this.size = [300, 300];
    this.health = 200;
    this.radius = 90;
  }
  return Target3;
}(Target1));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"std":24}],26:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, create, updateAndStop, updateAndCarry, getProgress, reset, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.create = create = function(target, arg$){
  var disabled, ref$;
  disabled = (ref$ = (arg$ != null
    ? arg$
    : {}).disabled) != null ? ref$ : false;
  return {
    target: target,
    current: 0,
    elapsed: false,
    active: !disabled
  };
};
out$.updateAndStop = updateAndStop = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.current = timer.target;
      timer.elapsed = true;
      return timer.active = false;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  } else {
    return timer.elapsed = false;
  }
};
out$.updateAndCarry = updateAndCarry = function(timer, Δt){
  if (timer.active) {
    if (timer.current + Δt >= timer.target) {
      timer.elapsed = true;
      return timer.current = (timer.current + Δt) % timer.target;
    } else {
      timer.current += Δt;
      return timer.elapsed = false;
    }
  }
};
out$.getProgress = getProgress = function(timer){
  return timer.current / timer.target;
};
out$.reset = reset = function(timer, target){
  target == null && (target = 0);
  if (target) {
    timer.target = target;
  }
  timer.current = 0;
  timer.elapsed = false;
  return timer.active = true;
};



},{"std":24}],27:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, Tween, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Tween = Tween = (function(){
  Tween.displayName = 'Tween';
  var allTweens, prototype = Tween.prototype, constructor = Tween;
  allTweens = [];
  function Tween(arg$){
    var ref$;
    this.from = (ref$ = arg$.from) != null ? ref$ : 0, this.to = (ref$ = arg$.to) != null ? ref$ : 1, this['in'] = (ref$ = arg$['in']) != null ? ref$ : 1, this['with'] = (ref$ = arg$['with']) != null
      ? ref$
      : Ease.Linear;
    this.time = 0;
    this.range = this.to - this.from;
    this.elapsed = false;
    this.active = true;
    allTweens.push(this);
  }
  prototype.update = function(Δt){
    this.time += Δt;
    if (this.time >= this['in']) {
      this.time = this['in'];
      this.elapsed = true;
      this.active = false;
    }
    this.value = this.from + this.range * this['with'](this.time / this['in']);
    return !this.elapsed;
  };
  Tween.updateAll = function(Δt){
    return allTweens = allTweens.filter(function(it){
      return it.update(Δt);
    });
  };
  Tween.Null = {
    elapsed: false,
    active: false,
    value: 0
  };
  return Tween;
}());



},{"std":24}]},{},[15])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9hdWRpby1vdXRwdXQubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9ibGl0dGVyLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvYnVsbGV0LmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvY29tbW9uLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZGVidWcvY29sb3Itd2hlZWwubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9kZWJ1Zy9jb250cm9sbGVyLXN0YXRlLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZGVidWcvZWFzaW5nLWRlbW9uc3RyYXRpb24ubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9kZWJ1Zy9pbmRleC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2RlYnVnL21peGlucy5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2RlYnVnL3JvdGF0aW9uLWhpc3RvcnkubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9lYXNlLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvZmxpcGZsb3BwZXIubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9mcmFtZS1kcml2ZXIubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9nbG9iYWwubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9pbmRleC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2lucHV0L2F1dG9tYXRlZC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2lucHV0L2dhbWVwYWQubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9pbnB1dC9pbmRleC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL2lucHV0L2tleWJvYXJkLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvbGltaXRlZC1hcnJheS5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3JhbmRvbS1zdHJlYW0ubHMiLCIvVXNlcnMvZ2hvc3RzdHJlZXQvTm90IFdvcmsvdW5ib3VuZGVkLXNob290ZXItcHJvdG90eXBlL3NyYy9zb3VuZC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3Nwcml0ZS5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3N0ZC9pbmRleC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3RhcmdldC5scyIsIi9Vc2Vycy9naG9zdHN0cmVldC9Ob3QgV29yay91bmJvdW5kZWQtc2hvb3Rlci1wcm90b3R5cGUvc3JjL3RpbWVyLmxzIiwiL1VzZXJzL2dob3N0c3RyZWV0L05vdCBXb3JrL3VuYm91bmRlZC1zaG9vdGVyLXByb3RvdHlwZS9zcmMvdHdlZW4ubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0NBLElBQUEsR0FBYyxPQUFkLENBQXNCLEtBQUEsQ0FBdEIsRUFBRSxFQUFVLENBQUEsQ0FBQSxDQUFaLElBQUEsQ0FBRSxFQUFGLEVBQU0sR0FBTSxDQUFBLENBQUEsQ0FBWixJQUFBLENBQU07bUJBS08sZUFBTixRQUFBLENBQUE7OztFQUdMLFFBQVMsQ0FBQSxDQUFBLENBQUU7RUFTWCxPQUFRLENBQUEsQ0FBQSxDQUFFLElBQUk7RUFFZCxRQUFBLENBQUEsV0FBQSxDQUFBO0lBQ0UsSUFBQyxDQUFBLFVBQWUsQ0FBQSxDQUFBLENBQUU7O1lBRXBCLFdBQVcsUUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBOztXQUNULFVBQVcsU0FBUyxLQUFLLFFBQUEsQ0FBQSxNQUFBLEVBQUEsS0FBQTtNQUN2QixLQUFDLENBQUEsVUFBVyxDQUFDLEdBQUQsQ0FBTSxDQUFBLENBQUEsQ0FBRTthQUNwQixFQUFFLFFBQVEsS0FBUjtLQUZPOztZQUliLGFBQWEsUUFBQSxDQUFBO1dBQ1g7O1lBRUYsbUJBQXFCLFFBQUEsQ0FBQSxHQUFBO1dBQ25CLElBQUMsQ0FBQSxVQUFXLENBQUMsR0FBRDs7WUFFZCxxQkFB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cUJBQUEsc0JBQU0sRUFBQSxHQUFHLG9CQUFBLHFCQUFLLEVBQUE7SUFDckQsSUFBQSxHQUFTLElBQUMsQ0FBQSxZQUFWLENBQXdCLEdBQUEsQ0FBeEIsRUFBQyxDQUFNLENBQUEsQ0FBQSxDQUFQLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBSSxDQUFHLENBQUEsQ0FBQSxDQUFQLElBQUEsQ0FBQSxDQUFBO0lBQ0EsSUFBQSxHQUFTLElBQUMsQ0FBQSxhQUFWLENBQXlCLElBQUEsQ0FBekIsRUFBQyxDQUFNLENBQUEsQ0FBQSxDQUFQLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBSSxDQUFHLENBQUEsQ0FBQSxDQUFQLElBQUEsQ0FBQSxDQUFBO0lBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyx3QkFBMkIsQ0FBQSxDQUFBLENBQUUsZ0JBQWtCLElBQUE7SUFDcEQsSUFBQyxDQUFBLEdBQUcsQ0FBQyxXQUFhLENBQUEsQ0FBQSxDQUFFO0lBQ3BCLElBQUMsQ0FBQSxHQUFHLENBQUMsV0FBYSxDQUFBLENBQUEsQ0FBRTtJQUNwQixJQUFDLENBQUEsR0FBRyxDQUFDLFVBQVU7SUFDZixJQUFDLENBQUEsR0FBRyxDQUFDLE9BQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLEdBQUcsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQWY7SUFDYixJQUFDLENBQUEsR0FBRyxDQUFDLE9BQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLEdBQUcsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQWY7SUFDYixJQUFDLENBQUEsR0FBRyxDQUFDLE9BQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLEdBQUcsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQWY7SUFDYixJQUFDLENBQUEsR0FBRyxDQUFDLE9BQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFD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LENBQXZCO0lBQ1gsT0FBUyxDQUFBLENBQUEsQ0FBRSxDQUFFLElBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBRCxHQUFJLElBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBRCxDQUFHLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBdkI7SUFDWCxNQUFTLENBQUEsQ0FBQSxDQUFFLENBQUUsSUFBQyxDQUFBLEdBQUcsQ0FBQyxDQUFELEdBQUksSUFBQyxDQUFBLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUksQ0FBQyxDQUFELENBQUcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBRCxDQUFHLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBL0M7SUFDWCxNQUFTLENBQUEsQ0FBQSxDQUFFLENBQUUsSUFBQyxDQUFBLEdBQUcsQ0FBQyxDQUFELEdBQUksSUFBQyxDQUFBLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUksQ0FBQyxDQUFELENBQUcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBRCxDQUFHLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBL0M7SUFDWCxNQUFNLENBQUMsTUFBTSxRQUFTLFNBQVU7TUFBQSxPQUFRLElBQUksSUFBQyxDQUFBLEtBQUQ7TUFBUyxPQUFPLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQTtNQUFNLE1BQU07SUFBbEQsQ0FBbkI7V0FDYixNQUFNLENBQUMsTUFBTSxRQUFTLFNBQVU7TUFBQSxPQUFRLElBQUksSUFBQyxDQUFBLEtBQUQ7TUFBUyxPQUFPLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FB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Q0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBWjs7OztjQUtiLE1BQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUE7U0FBTzs7Y0FFbkIsTUFBVSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQTtTQUFPLENBQUUsQ0FBQSxDQUFBLENBQUU7O2NBRXZCLE1BQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUE7U0FBTyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUU7O2NBRTNCLE1BQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUE7U0FBTyxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBRSxDQUFBLENBQUEsQ0FBRTs7aUJBSy9CLFNBQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBO0VBQUksY0FBQSxJQUFJLENBQUUsQ0FBQSxDQUFBLENBQUU7U0FBTSxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUU7O2lCQUV0QyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtFQUFJLGNBQUEsSUFBSSxDQUFFLENBQUEsQ0FBQSxDQUFFO1NBQU0sQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUU7O2lCQUUxQyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtFQUFJLGNBQUEsSUFBSSxDQUFFLENBQUEsQ0FBQSxDQUFFO1NBQU0sQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFFLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBRSxDQUFBLENBQUEsQ0FBRTs7Y0FLOUMsTUFBTyxDQUFBLENBQUEsQ0FBRSxRQUFTLFFBQVEsU0FBUjtjQUVsQixNQUFPLENBQUEsQ0FBQSxDQUFFLFFBQVMsUUFBUSxTQUFS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O0lBQ1QsSUFBRyxJQUFDLENBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBRyxJQUFDLENBQUEsSUFBQSxDQUFiO01BQ0UsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQUE7TUFDVCxJQUFDLENBQUEsT0FBUSxDQUFBLENBQUEsQ0FBRTtNQUNYLElBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFFOztJQUNaLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxNQUFBLENBQUgsQ0FBUSxJQUFDLENBQUEsSUFBSSxDQUFBLENBQUEsQ0FBQyxJQUFDLENBQUEsSUFBQSxDQUFQO0lBQ2hDLE1BQUEsQ0FBTyxDQUFJLElBQUMsQ0FBQSxPQUFaOztFQUVGLEtBQUMsQ0FBQSxTQUFXLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxFQUFBO1dBQ1osU0FBVyxDQUFBLENBQUEsQ0FBRyxTQUFVLENBQUMsT0FBUSxRQUFBLENBQUEsRUFBQTthQUFBLEVBQUEsQ0FBQyxPQUFPLEVBQUE7S0FBVDs7RUFFbEMsS0FBQyxDQUFBLElBQUssQ0FBQSxDQUFBLENBQ0o7SUFBQSxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87RUFGUCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiMgR2xvYmFsIEF1ZGlvIEVuZ2luZSBob3VzZXMgdGhlIHNpbmdsZSBBdWRpb0NvbnRleHQgdXNlZCB0byBnZW5lcmF0ZSBzb3VyY2VzXG5cbmV4cG9ydCBjbGFzcyBBdWRpb091dHB1dFxuXG4gICMgWC1icm93c2VyIEF1ZGlvQ29udGV4dFxuICBBdWRpb0N0eCA9IEF1ZGlvQ29udGV4dFxuXG4gICMgVE9ETzogTW9kZXJuaXpyXG4gICMgICBpZiBNb2Rlcm5penIud2ViYXVkaW9cbiAgIyAgICAgaWYgd2luZG93LkF1ZGlvQ29udGV4dD8gdGhlbiB0aGF0IGVsc2UgaWYgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dD8gdGhlbiB0aGF0XG4gICMgICBlbHNlXG4gICMgICAgIGNsYXNzIEZha2VBdWRpb0NvbnRleHRcblxuICAjIEdsb2JhbCBkZWZhdWx0IEF1ZGlvQ29udGV4dFxuICBjb250ZXh0ID0gbmV3IEF1ZGlvQ3R4XG5cbiAgLT5cbiAgICBAYnVmZmVyLWxpc3QgICAgPSB7fVxuXG4gIGFkZC1zb3VuZDogKHVybCwgzrspIC0+XG4gICAgbG9hZC1hdWRpbyBjb250ZXh0LCB1cmwsIChidWZmZXIsIHN0YXRlKSB+PlxuICAgICAgQGJ1ZmZlci1saXN0W3VybF0gPSBidWZmZXJcbiAgICAgIM67IGJ1ZmZlciwgc3RhdGVcblxuICBnZXQtY29udGV4dDogLT5cbiAgICBjb250ZXh0XG5cbiAgZ2V0LWJ1ZmZlci13aXRoLXVybDogKHVybCkgLT5cbiAgICBAYnVmZmVyLWxpc3RbdXJsXVxuXG4gIGNyZWF0ZS1idWZmZXItc291cmNlOiAtPlxuICAgIGNvbnRleHQuY3JlYXRlLWJ1ZmZlci1zb3VyY2UhXG5cbiAgY3JlYXRlLWdhaW4tbm9kZTogLT5cbiAgICBjb250ZXh0LmNyZWF0ZS1nYWluIVxuXG4gIGdldC1kZXN0aW5hdGlvbjogLT5cbiAgICBjb250ZXh0LmRlc3RpbmF0aW9uXG5cbiAgcGxheTogKHNvdW5kKSAtPlxuICAgIHNvdXJjZSA9IGNvbnRleHQuY3JlYXRlLWJ1ZmZlci1zb3VyY2UhXG4gICAgc291cmNlLmJ1ZmZlciA9IHNvdW5kLmJ1ZmZlclxuICAgIHNvdXJjZS5jb25uZWN0IGNvbnRleHQuZGVzdGluYXRpb25cbiAgICBzb3VyY2Uuc3RhcnQhXG5cbiAgICBsb2cgc291bmRcblxuICBATnVsbCA9XG4gICAgYWRkLXNvdW5kOiBpZFxuICAgIGdldC1idWZmZXItd2l0aC11cmw6IGlkXG4gICAgY3JlYXRlLWJ1ZmZlci1zb3VyY2U6IGlkXG4gICAgY3JlYXRlLWdhaW4tbm9kZTogaWRcbiAgICBnZXQtZGVzdGluYXRpb246IGlkXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgdGF1IH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBCbGl0dGVyXG4jXG5cbmV4cG9ydCBjbGFzcyBCbGl0dGVyXG5cbiAgYmctYXNwZWN0ID0gMC4zMTI1XG4gIGJnLXNjcm9sbC1zcGVlZCA9IDIwXG5cbiAgYmcgPSBuZXcgSW1hZ2VcbiAgYmcuc3JjID0gXFwvYXNzZXRzL2JnLmpwZ1xuICBiZy5vbmxvYWQgPSAtPiBiZy1hc3BlY3QgOj0gYmcud2lkdGggLyBiZy5oZWlnaHRcblxuICBtb2RlLXRvLW9wZXJhdGlvbiA9IChtb2RlKSAtPlxuICAgIHN3aXRjaCBtb2RlXG4gICAgfCBNT0RFX05PUk1BTCA9PiBcXHNvdXJjZS1vdmVyXG4gICAgfCBNT0RFX0NPTE9SICA9PiBcXGh1ZVxuICAgIHwgTU9ERV9BREQgICAgPT4gXFxsaWdodGVuXG4gICAgfCBvdGhlcndpc2UgID0+IFxcc291cmNlLW92ZXJcblxuICBsb2NhbC1ncmlkLXNpemUgICAgICA9IDEwMDBcbiAgbG9jYWwtZ3JpZC1maWRlbGl0eSAgPSAxMDBcbiAgY2FtZXJhLWFzcGVjdCAgICAgICAgPSAxLjVcbiAgY2FtZXJhLWZydXN0cnVtLXNpemUgPSBbIDEwMDAsIDEwMDAgKiBjYW1lcmEtYXNwZWN0IF1cblxuICAtPlxuICAgIEBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGUtZWxlbWVudCBcXGNhbnZhc1xuICAgIEBjdHggPSBAY2FudmFzLmdldC1jb250ZXh0IFxcMmRcbiAgICBAc2V0LXNpemUgWyB3aW5kb3cuaW5uZXItd2lkdGgsIHdpbmRvdy5pbm5lci1oZWlnaHQgXVxuXG4gIHNldC1zaXplOiAoc2l6ZSkgLT5cbiAgICBpZiBzaXplLjAgPiBzaXplLjFcbiAgICAgIEB3ID0gQGNhbnZhcy53aWR0aCAgPSBzaXplLjEgLyBjYW1lcmEtYXNwZWN0XG4gICAgICBAaCA9IEBjYW52YXMuaGVpZ2h0ID0gc2l6ZS4xXG4gICAgZWxzZVxuICAgICAgQHcgPSBAY2FudmFzLndpZHRoICA9IHNpemUuMFxuICAgICAgQGggPSBAY2FudmFzLmhlaWdodCA9IHNpemUuMCAqIGNhbWVyYS1hc3BlY3RcblxuICAgIEB3ZiA9IEB3IC8gY2FtZXJhLWZydXN0cnVtLXNpemUuMFxuICAgIEBoZiA9IEBoIC8gY2FtZXJhLWZydXN0cnVtLXNpemUuMVxuXG4gIHRyYW5zbGF0ZS1wb3M6IChbeCwgeV0sIHogPSBnYW1lLXN0YXRlLmNhbWVyYS16b29tKSAtPlxuICAgIFsgQHcvMiArICh4IC0gZ2FtZS1zdGF0ZS5jYW1lcmEtcG9zLjApICogQHdmICogeixcbiAgICAgIEBoLzIgLSAoeSAtIGdhbWUtc3RhdGUuY2FtZXJhLXBvcy4xKSAqIEBoZiAqIHpdXG5cbiAgdHJhbnNsYXRlLXNpemU6IChbdywgaF0sIHogPSBnYW1lLXN0YXRlLmNhbWVyYS16b29tKSAtPlxuICAgIFsgdyAqIEB3ZiAqIHosIGggKiBAaGYgKiB6IF1cblxuICBjaXJjbGU6IChwb3MsIHJhZGl1cywgeyBjb2xvcj1cXHdoaXRlLCBhbHBoYT0xLCBtb2RlPU1PREVfTk9STUFMIH0pIC0+XG4gICAgW3gsIHldID0gQHRyYW5zbGF0ZS1wb3MgcG9zXG4gICAgWyByIF0gID0gQHRyYW5zbGF0ZS1zaXplIFsgcmFkaXVzIF0gICMgVE9ETzogVGhpcywgYnV0IGJldHRlclxuICAgIEBjdHguZ2xvYmFsLWNvbXBvc2l0ZS1vcGVyYXRpb24gPSBtb2RlLXRvLW9wZXJhdGlvbiBtb2RlXG4gICAgQGN0eC5nbG9iYWwtYWxwaGEgPSBhbHBoYVxuICAgIEBjdHguZmlsbC1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBjdHguYXJjIHgsIHksIHIsIDAsIHRhdVxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LmZpbGwhXG5cbiAgc3Ryb2tlLWNpcmNsZTogKHBvcywgcmFkaXVzLCB7IGNvbG9yPVxcd2hpdGUsIGFscGhhPTEsIG1vZGU9TU9ERV9OT1JNQUwgfSkgLT5cbiAgICBbeCwgeV0gPSBAdHJhbnNsYXRlLXBvcyBwb3NcbiAgICBbIHIgXSAgPSBAdHJhbnNsYXRlLXNpemUgWyByYWRpdXMgXSAgIyBUT0RPOiBUaGlzLCBidXQgYmV0dGVyXG4gICAgQGN0eC5nbG9iYWwtY29tcG9zaXRlLW9wZXJhdGlvbiA9IG1vZGUtdG8tb3BlcmF0aW9uIG1vZGVcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IGFscGhhXG4gICAgQGN0eC5zdHJva2Utc3R5bGUgPSBjb2xvclxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAY3R4LmFyYyB4LCB5LCByLCAwLCB0YXVcbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5zdHJva2UhXG5cbiAgcmVjdDogKHBvcywgc2l6ZSwgeyBjb2xvcj1cXHdoaXRlLCBhbHBoYT0xLCBtb2RlPU1PREVfTk9STUFMIH0pIC0+XG4gICAgW3gsIHldID0gQHRyYW5zbGF0ZS1wb3MgcG9zXG4gICAgW3csIGhdID0gQHRyYW5zbGF0ZS1zaXplIHNpemVcbiAgICBAY3R4Lmdsb2JhbC1jb21wb3NpdGUtb3BlcmF0aW9uID0gbW9kZS10by1vcGVyYXRpb24gbW9kZVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gYWxwaGFcbiAgICBAY3R4LmZpbGwtc3R5bGUgPSBjb2xvclxuICAgIEBjdHguZmlsbC1yZWN0IHggLSB3LzIsIHkgLSBoLzIsIHcsIGhcblxuICBzdHJva2UtcmVjdDogKHBvcywgc2l6ZSwgeyBjb2xvcj1cXHdoaXRlLCBhbHBoYT0xLCBtb2RlPU1PREVfTk9STUFMIH0pIC0+XG4gICAgW3gsIHldID0gQHRyYW5zbGF0ZS1wb3MgcG9zXG4gICAgW3csIGhdID0gQHRyYW5zbGF0ZS1zaXplIHNpemVcbiAgICBAY3R4Lmdsb2JhbC1jb21wb3NpdGUtb3BlcmF0aW9uID0gbW9kZS10by1vcGVyYXRpb24gbW9kZVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gYWxwaGFcbiAgICBAY3R4LnN0cm9rZS1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBjdHgubW92ZS10byB4IC0gdy8yLCB5IC0gdy8yXG4gICAgQGN0eC5saW5lLXRvIHggKyB3LzIsIHkgLSB3LzJcbiAgICBAY3R4LmxpbmUtdG8geCArIHcvMiwgeSArIGgvMlxuICAgIEBjdHgubGluZS10byB4IC0gdy8yLCB5ICsgaC8yXG4gICAgQGN0eC5saW5lLXRvIHggLSB3LzIsIHkgLSB3LzJcbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5zdHJva2UhXG5cbiAgbGluZTogKHN0YXJ0LCBlbmQpIC0+XG4gICAgQGN0eC5zdHJva2Utc3R5bGUgPSBcXHdoaXRlXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBfbGluZSBAY3R4LCBzdGFydCwgZW5kXG4gICAgQGN0eC5jbG9zZS1wYXRoIVxuICAgIEBjdHguc3Ryb2tlIVxuXG4gIF9saW5lOiAoc3RhcnQsIGVuZCkgLT5cbiAgICBbeDEsIHkxXSA9IEB0cmFuc2xhdGUtcG9zIHN0YXJ0XG4gICAgW3gyLCB5Ml0gPSBAdHJhbnNsYXRlLXBvcyBlbmRcbiAgICBAY3R4Lm1vdmUtdG8geDEsIHkxXG4gICAgQGN0eC5saW5lLXRvIHgyLCB5MlxuXG4gIHVwdHJpOiAocG9zLCBzaXplLCB7IGNvbG9yPVxcd2hpdGUsIGFscGhhPTEsIG1vZGU9TU9ERV9OT1JNQUwgfSkgLT5cbiAgICBAY3R4Lmdsb2JhbC1jb21wb3NpdGUtb3BlcmF0aW9uID0gbW9kZS10by1vcGVyYXRpb24gbW9kZVxuICAgIEBjdHguZ2xvYmFsLWFscGhhID0gYWxwaGFcbiAgICBAY3R4LmZpbGwtc3R5bGUgPSBjb2xvclxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAX3VwdHJpIHBvcywgc2l6ZVxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LmZpbGwhXG5cbiAgX3VwdHJpOiAocG9zLCBzaXplKSAtPlxuICAgIFt4LCB5XSA9IEB0cmFuc2xhdGUtcG9zIHBvc1xuICAgIFt3LCBoXSA9IEB0cmFuc2xhdGUtc2l6ZSBzaXplXG4gICAgQGN0eC5tb3ZlLXRvIHggLSB3LzIsIHkgKyBoLzJcbiAgICBAY3R4LmxpbmUtdG8geCArIHcvMiwgeSArIGgvMlxuICAgIEBjdHgubGluZS10byB4ICsgIDAsICB5IC0gaC8yXG4gICAgQGN0eC5saW5lLXRvIHggLSB3LzIsIHkgKyBoLzJcblxuICBkbnRyaTogKHBvcywgc2l6ZSwgeyBjb2xvciA9IFxcd2hpdGUsIGFscGhhID0gMSwgbW9kZSA9IE1PREVfTk9STUFMIH0pIC0+XG4gICAgQGN0eC5nbG9iYWwtY29tcG9zaXRlLW9wZXJhdGlvbiA9IG1vZGUtdG8tb3BlcmF0aW9uIG1vZGVcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IGFscGhhXG4gICAgQGN0eC5maWxsLXN0eWxlID0gY29sb3JcbiAgICBAY3R4LmJlZ2luLXBhdGghXG4gICAgQF9kbnRyaSBwb3MsIHNpemVcbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5maWxsIVxuXG4gIF9kbnRyaTogKHBvcywgc2l6ZSkgLT5cbiAgICBbeCwgeV0gPSBAdHJhbnNsYXRlLXBvcyBwb3NcbiAgICBbdywgaF0gPSBAdHJhbnNsYXRlLXNpemUgc2l6ZVxuICAgIEBjdHgubW92ZS10byB4IC0gdy8yLCB5IC0gaC8yXG4gICAgQGN0eC5saW5lLXRvIHggKyB3LzIsIHkgLSBoLzJcbiAgICBAY3R4LmxpbmUtdG8geCArICAwLCAgeSArIGgvMlxuICAgIEBjdHgubGluZS10byB4IC0gdy8yLCB5IC0gaC8yXG5cbiAgY2xlYXI6ICh0ID0gMCkgLT5cbiAgICBiZy1oZWlnaHQgPSBAdyAvIGJnLWFzcGVjdFxuICAgIGJnLW9mZnNldCA9IHQgKiBiZy1zY3JvbGwtc3BlZWQgJSBiZy1oZWlnaHRcbiAgICBAY3R4LmNsZWFyLXJlY3QgMCwgMCwgQHcsIEBoXG4gICAgQGN0eC5nbG9iYWwtYWxwaGEgPSAxXG4gICAgQGN0eC5nbG9iYWwtY29tcG9zaXRlLW9wZXJhdGlvbiA9IG1vZGUtdG8tb3BlcmF0aW9uIE1PREVfTk9STUFMXG4gICAgI0BjdHguZHJhdy1pbWFnZSBiZywgMCwgYmctb2Zmc2V0LCBAdywgYmctaGVpZ2h0XG4gICAgI0BjdHguZHJhdy1pbWFnZSBiZywgMCwgYmctb2Zmc2V0IC0gYmctaGVpZ2h0LCBAdywgYmctaGVpZ2h0XG5cbiAgZHJhdy1vcmlnaW46IC0+XG4gICAgW2N4LCBjeV0gPSBnYW1lLXN0YXRlLmNhbWVyYS1wb3NcbiAgICBAY3R4LnN0cm9rZS1zdHlsZSA9IFxcIzBmMFxuICAgIEBjdHgubGluZS13aWR0aCA9IDJcbiAgICBAY3R4LmJlZ2luLXBhdGghXG4gICAgQF9saW5lIFswLCBjeSAtIDEwMDBdLCBbMCwgY3kgKyAxMDAwXVxuICAgIEBfbGluZSBbY3ggLSAxMDAwLCAwXSwgW2N4ICsgMTAwMCwgMF1cbiAgICBAY3R4LmNsb3NlLXBhdGghXG4gICAgQGN0eC5zdHJva2UhXG5cbiAgZHJhdy1sb2NhbC1ncmlkOiAtPlxuICAgIFtjeCwgY3ldID0gZ2FtZS1zdGF0ZS5jYW1lcmEtcG9zXG4gICAgbnggPSBjeCAtIGN4ICUgbG9jYWwtZ3JpZC1maWRlbGl0eVxuICAgIG55ID0gY3kgLSBjeSAlIGxvY2FsLWdyaWQtZmlkZWxpdHlcbiAgICBsZ3MteCA9IGNhbWVyYS1mcnVzdHJ1bS1zaXplLjAvZ2FtZS1zdGF0ZS5jYW1lcmEtem9vbVxuICAgIGxncy15ID0gY2FtZXJhLWZydXN0cnVtLXNpemUuMS9nYW1lLXN0YXRlLmNhbWVyYS16b29tXG5cbiAgICBAc3Ryb2tlLXJlY3QgZ2FtZS1zdGF0ZS5jYW1lcmEtcG9zLCBjYW1lcmEtZnJ1c3RydW0tc2l6ZSwgY29sb3I6IFxceWVsbG93XG5cbiAgICBAY3R4LnN0cm9rZS1zdHlsZSA9IFxcIzBmMFxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAY3R4Lmdsb2JhbC1hbHBoYSA9IDAuNFxuICAgIGZvciBpIGZyb20gbnggLSBsZ3MteCB0byBueCArIGxncy14IGJ5IGxvY2FsLWdyaWQtZmlkZWxpdHlcbiAgICAgIEBfbGluZSBbaSwgY3kgLSBsZ3MteV0sIFtpLCBjeSArIGxncy15XVxuICAgIGZvciBpIGZyb20gbnkgLSBsZ3MteSB0aWwgbnkgKyBsZ3MteSBieSBsb2NhbC1ncmlkLWZpZGVsaXR5XG4gICAgICBAX2xpbmUgW2N4IC0gbGdzLXgsIGkgKyBsb2NhbC1ncmlkLWZpZGVsaXR5XSwgW2N4ICsgbGdzLXgsIGkgKyBsb2NhbC1ncmlkLWZpZGVsaXR5XVxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LnN0cm9rZSFcblxuICBzcHJpdGU6ICh7IHdpZHRoLCBoZWlnaHQsIGltYWdlLCBpbmRleCB9LCBwb3MsIHNpemUpIC0+XG4gICAgW3gsIHldID0gQHRyYW5zbGF0ZS1wb3MgcG9zXG4gICAgW3csIGhdID0gQHRyYW5zbGF0ZS1zaXplIHNpemVcbiAgICBAY3R4LmRyYXctaW1hZ2UgaW1hZ2UsIGluZGV4ICogd2lkdGgsIDAsIHdpZHRoLCBoZWlnaHQsIHggLSB3LzIsIHkgLSBoLzIsIHcsIGhcblxuICBpbnN0YWxsOiAoaG9zdCkgLT5cbiAgICBob3N0LmFwcGVuZC1jaGlsZCBAY2FudmFzXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgcmdiIH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBCdWxsZXRcbiNcblxuZXhwb3J0IGNsYXNzIEJ1bGxldFxuICAocG9zLCBjb2xvcikgLT5cbiAgICBAcG9zICAgPSBbIHBvcy4wLCBwb3MuMSBdXG4gICAgQHZlbCAgID0gWyAwIDEwMDAwIF1cbiAgICBAc2l6ZSAgPSBbIDgwIDIyMCBdXG4gICAgQGxpZmUgID0gMVxuICAgIEDOlGxpZmUgPSAxXG4gICAgQGNvbG9yID0gY29sb3JcbiAgICBAYWxwaGEgPSAxICMuNlxuICAgIEByYWRpdXMgPSAyMFxuICAgIEBwb3dlciA9IDIwXG5cbiAgZHJhdzogKGNhbnZhcykgLT5cbiAgICB0b3Atc2l6ZSA9IFsgQHNpemUuMCwgQHNpemUuMSAqIDEvNCBdXG4gICAgYnRtLXNpemUgPSBbIEBzaXplLjAsIEBzaXplLjEgKiAzLzQgXVxuICAgIHRvcC1wb3MgID0gWyBAcG9zLjAsIEBwb3MuMSArIEBzaXplLjEgKiAzLzggLSBAc2l6ZS4xICogMS80IF1cbiAgICBidG0tcG9zICA9IFsgQHBvcy4wLCBAcG9zLjEgLSBAc2l6ZS4xICogMS84IC0gQHNpemUuMSAqIDEvNCBdXG4gICAgY2FudmFzLnVwdHJpIHRvcC1wb3MsIHRvcC1zaXplLCBjb2xvcjogKHJnYiBAY29sb3IpLCBhbHBoYTogQGFscGhhICogQGxpZmUsIG1vZGU6IE1PREVfQUREXG4gICAgY2FudmFzLmRudHJpIGJ0bS1wb3MsIGJ0bS1zaXplLCBjb2xvcjogKHJnYiBAY29sb3IpLCBhbHBoYTogQGFscGhhICogQGxpZmUsIG1vZGU6IE1PREVfQUREXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIEBwb3MuMSArPSBAdmVsLjEgKiDOlHRcbiAgICBAbGlmZSAtPSBAzpRsaWZlICogzpR0XG4gICAgQGxpZmUgPiAwXG5cblxuZXhwb3J0IGNsYXNzIEJsZW5kQnVsbGV0IGV4dGVuZHMgQnVsbGV0XG5cbiAgc2VwYXJhdGlvbiA9IDIwXG5cbiAgLT5cbiAgICBzdXBlciAuLi5cbiAgICBAdmVsLjEgPSAyMDAwXG4gICAgQHJhZGl1cyA9IDQwXG4gICAgQHBvd2VyID0gNDBcbiAgICBAbGlmZSA9IDJcbiAgICBAc2l6ZSA9IFsxMjAgMzUwXVxuXG5cbmV4cG9ydCBjbGFzcyBTdXBlckJ1bGxldCBleHRlbmRzIEJ1bGxldFxuICAtPlxuICAgIHN1cGVyIC4uLlxuICAgIEB2ZWwuMSA9IDEwMDBcbiAgICBAcmFkaXVzID0gNjBcbiAgICBAcG93ZXIgPSA4MFxuICAgIEBzaXplID0gWzE2MCA1MDBdXG4gICAgQGxpZmUgPSAzXG5cblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nLCBsZXJwLCBmbG9vciwgdGF1IH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBDb21tb24gYnV0IGRvbWFpbi1zcGVjaWZpYyBwdXJlIGhlbHBlciBmdW5jdGlvbnNcbiNcblxuZXhwb3J0IGxlcnAtY29sb3IgPSAodCwgc3RhcnQsIGVuZCkgLT5cbiAgWyAobGVycCB0LCBzdGFydC4wLCBlbmQuMCksXG4gICAgKGxlcnAgdCwgc3RhcnQuMSwgZW5kLjEpLFxuICAgIChsZXJwIHQsIHN0YXJ0LjIsIGVuZC4yKSBdXG5cbmV4cG9ydCByb3RhdGlvbi10by1jb2xvciA9ICjOuCkgLT5cbiAgaWYgMCA8IM64IDwgdGF1XG4gICAgZmxvb3IgKM64L3RhdSkgKiBjb2xvcnMubGVuZ3RoXG4gIGVsc2VcbiAgICAwXG5cbmV4cG9ydCByb3RhdGlvbi10by1zcHJpdGUtaW5kZXggPSAozrgsIGZyYW1lcykgLT5cbiAgZmxvb3IgZnJhbWVzICogKM64ICUgKHRhdS8zKSkgLyAodGF1LzMpXG5cbmV4cG9ydCBkaWFtb25kID0gKFt4LCB5XSkgLT5cbiAgaWYgeCA9PSAwXG4gICAgW3gsIHldXG4gIGVsc2VcbiAgICBbeC8yLCB5LzJdXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgcmdiLCBzaW4sIGNvcywgdGF1LCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IERyYXdpbmcgfSA9IHJlcXVpcmUgXFwuL21peGluc1xuXG5cbiNcbiMgQ29sb3IgV2hlZWxcbiNcblxuZXhwb3J0IGNsYXNzIENvbG9yV2hlZWwgaW1wbGVtZW50cyBEcmF3aW5nXG5cbiAgbyA9IHRhdSAqIDkvMTJcbiAgbSA9IGNvbG9ycy5sZW5ndGhcblxuICAoQGN0eCwgQHIpIC0+XG5cbiAgZHJhdzogKHBvcywgzrgsIHBsYXllci1jb2xvcikgLT5cbiAgICBmb3IgY29sb3IsIGkgaW4gY29sb3JzXG4gICAgICBAY3R4LmZpbGwtc3R5bGUgPSByZ2IgY29sb3JcbiAgICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICAgIEBjdHgubW92ZS10byBwb3MuMCwgcG9zLjFcbiAgICAgIEBjdHguYXJjIHBvcy4wLCBwb3MuMSwgQHIsIC3OuCArIHRhdS9tKmkgKyBvLCAtzrggKyB0YXUvbSooaSsxKSArIG9cbiAgICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICAgIEBjdHguZmlsbCFcblxuICAgIEBjdHguc3Ryb2tlLXN0eWxlID0gXFx3aGl0ZVxuICAgIEBjdHguYmVnaW4tcGF0aCFcbiAgICBAY3R4Lm1vdmUtdG8gcG9zLjAsIHBvcy4xXG4gICAgQGN0eC5saW5lLXRvIHBvcy4wICsgQHIqc2luKDApLCBwb3MuMSAtIEByKmNvcygwKVxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LnN0cm9rZSFcblxuICAgIEBib3gtYXQgcG9zIGB2Mi5hZGRgIFswLCAtKEByICsgNyldLCBbOCAxNV0sIHJnYiBjb2xvcnNbcGxheWVyLWNvbG9yXVxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHRhdSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IERyYXdpbmcgfSA9IHJlcXVpcmUgXFwuL21peGluc1xuXG5cbiNcbiMgQ29udHJvbGxlciBTdGF0ZVxuI1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbGxlclN0YXRlIGltcGxlbWVudHMgRHJhd2luZ1xuXG4gIHRyaWdnZXItc2l6ZSA9IFsyNSA2NV1cblxuICBzdGF0ZS1jb2xvciAgPSAtPiBpZiBpdCB0aGVuIFxccmVkIGVsc2UgXFxsaWdodGdyZXlcblxuICAoQGN0eCwgQHNpemUsIEBmbGlwZmxvcHBlcikgLT5cblxuICBkcmF3OiAoW3gsIHldLCB7IGlucHV0LXN0YXRlIH0pIC0+XG5cbiAgICB7IGZsaXAsIGZsb3AgfSA9IEBmbGlwZmxvcHBlci50cmlnZ2VyLXN0YXRlXG5cbiAgICBpbnB1dC12ZWwgPSBbIGlucHV0LXN0YXRlLngsIGlucHV0LXN0YXRlLnkgXVxuICAgIGRlYnVnLXZlbCA9IFsgaW5wdXQtc3RhdGUucmF3LXgsIGlucHV0LXN0YXRlLnJhdy15IF1cblxuICAgIEBib3gtYXQgW3ggLSA4MCwgeSAtIDIwXSwgdHJpZ2dlci1zaXplLCBcXGdyZXlcbiAgICBAYm94LWF0IFt4ICsgODAsIHkgLSAyMF0sIHRyaWdnZXItc2l6ZSwgXFxncmV5XG4gICAgQGJveC10b3AgW3ggLSA4MCwgeSAtIDUyXSwgWzI1IDY1ICogaW5wdXQtc3RhdGUuZmxpcF0sIFxcd2hpdGVcbiAgICBAYm94LXRvcCBbeCArIDgwLCB5IC0gNTJdLCBbMjUgNjUgKiBpbnB1dC1zdGF0ZS5mbG9wXSwgXFx3aGl0ZVxuXG4gICAgQGJveC1hdCBbeCAtIDgwLCB5ICsgMzVdLCBbMjUgMjVdLCBzdGF0ZS1jb2xvciBmbGlwLmlnbm9yZVxuICAgIEBib3gtYXQgW3ggKyA4MCwgeSArIDM1XSwgWzI1IDI1XSwgc3RhdGUtY29sb3IgZmxvcC5pZ25vcmVcblxuICAgIEBib3gtYXQgW3ggLSA2NSwgeSArIDcwXSwgWzU1IDI1XSwgaWYgaW5wdXQtc3RhdGUuZmlyZSAgICB0aGVuIFxceWVsbG93IGVsc2UgXFwjMzMzXG4gICAgQGJveC1hdCBbeCArIDAsICB5ICsgNzBdLCBbNTAgMjVdLCBpZiBpbnB1dC1zdGF0ZS5zdXBlciAgIHRoZW4gXFx5ZWxsb3cgZWxzZSBcXCMzMzNcbiAgICBAYm94LWF0IFt4ICsgNjUsIHkgKyA3MF0sIFs1NSAyNV0sIGlmIGlucHV0LXN0YXRlLnNwZWNpYWwgdGhlbiBcXHllbGxvdyBlbHNlIFxcIzMzM1xuXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBjdHguYXJjIHgsIHksIDUwLCB0YXUvMiwgdGF1XG4gICAgQGN0eC5saW5lLXRvIHgsIHkgKyA1MFxuICAgIEBjdHguY2xvc2UtcGF0aCFcbiAgICBAY3R4LnN0cm9rZSFcblxuICAgIEBjaXJjbGUgW3ggKyA1MCAqIGlucHV0LXZlbC4wLCB5IC0gNTAgKiBpbnB1dC12ZWwuMV0sIDYsIFxccmVkXG4gICAgQGNpcmNsZSBbeCArIDUwICogZGVidWctdmVsLjAsIHkgLSA1MCAqIGRlYnVnLXZlbC4xXSwgNiwgXFx3aGl0ZVxuXG4gICAgQGN0eC5jbG9zZS1wYXRoIVxuICAgIEBjdHguZmlsbCFcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nLCByZ2IsIHNpbiwgY29zLCB0YXUgfSA9IHJlcXVpcmUgXFxzdGRcblxueyBEcmF3aW5nIH0gPSByZXF1aXJlIFxcLi9taXhpbnNcblxuXG4jXG4jIEVhc2luZyBEZW1vbnN0cmF0aW9uXG4jXG5cbmV4cG9ydCBjbGFzcyBFYXNpbmdEZW1vbnN0cmF0aW9uIGltcGxlbWVudHMgRHJhd2luZ1xuXG4gIEVhc2UgPSByZXF1aXJlIFxcLi4vZWFzZVxuXG4gIHBhbGV0dGUgPSA8WyB3aGl0ZSByZWQgb3JhbmdlIHllbGxvdyBncmVlbiBjeWFuIGJsdWUgcmVkIG9yYW5nZSB5ZWxsb3cgZ3JlZW4gY3lhbiBibHVlIF0+XG5cbiAgKEBjdHgsIEBzaXplKSAtPlxuXG4gIGRyYXc6IChwb3MsIG4gPSAwKSAtPlxuICAgIGZvciBuYW1lLCBlYXNlLWZuIG9mIEVhc2VcbiAgICAgIEBjdHguZmlsbC1zdHlsZSA9IHBhbGV0dGVbbisrXVxuICAgICAgZm9yIGkgZnJvbSAwIHRvIEBzaXplLjAgYnkgNVxuICAgICAgICBAYm94LWF0IFtpLCBwb3MuMSAtIEBzaXplLjEgKiBlYXNlLWZuIGkvQHNpemUuMF0sIFsyIDJdXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgdGF1LCByZ2IsIHNpbiwgY29zLCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxueyByb3RhdGlvbi10by1jb2xvciB9ID0gcmVxdWlyZSBcXC4uL2NvbW1vblxuXG57IENvbG9yV2hlZWwgfSAgICAgICAgICA9IHJlcXVpcmUgXFwuL2NvbG9yLXdoZWVsXG57IENvbnRyb2xsZXJTdGF0ZSB9ICAgICA9IHJlcXVpcmUgXFwuL2NvbnRyb2xsZXItc3RhdGVcbnsgUm90YXRpb25IaXN0b3J5IH0gICAgID0gcmVxdWlyZSBcXC4vcm90YXRpb24taGlzdG9yeVxueyBFYXNpbmdEZW1vbnN0cmF0aW9uIH0gPSByZXF1aXJlIFxcLi9lYXNpbmctZGVtb25zdHJhdGlvblxuXG5cbiNcbiMgRGVidWcgVmlzdWFsaXNlclxuI1xuXG5leHBvcnQgY2xhc3MgRGVidWdWaXNcblxuICBoZWlnaHQgPSB3aW5kb3cuaW5uZXItaGVpZ2h0XG4gIHdpZHRoICA9IHdpbmRvdy5pbm5lci1oZWlnaHQgLyAxLjVcbiAgY2VudGVyID0gW3dpZHRoLzIsIGhlaWdodC8yXVxuXG4gIChAZmxpcGZsb3BwZXIpIC0+XG5cbiAgICAjIENhbnZhc1xuICAgIEBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGUtZWxlbWVudCBcXGNhbnZhc1xuICAgIEBjdHggPSBAY2FudmFzLmdldC1jb250ZXh0IFxcMmRcbiAgICBAdyAgPSBAY2FudmFzLndpZHRoID0gd2lkdGhcbiAgICBAaCAgPSBAY2FudmFzLmhlaWdodCA9IGhlaWdodFxuICAgIEBjeCA9IEB3LzJcbiAgICBAY3kgPSBAaC8yXG5cbiAgICAjIENvbXBvbmVudHNcbiAgICBAY29sb3Itd2hlZWwgICA9IG5ldyBDb2xvcldoZWVsICAgICAgICAgIEBjdHgsIGhlaWdodC85XG4gICAgQGNvbnRyb2xsZXIgICAgPSBuZXcgQ29udHJvbGxlclN0YXRlICAgICBAY3R4LCBbMzAwLCAxMDBdLCBAZmxpcGZsb3BwZXJcbiAgICBAcm90YXRpb24taGlzdCA9IG5ldyBSb3RhdGlvbkhpc3RvcnkgICAgIEBjdHgsIDMwMFxuICAgIEBlYXNlLWRlbW8gICAgID0gbmV3IEVhc2luZ0RlbW9uc3RyYXRpb24gQGN0eCwgW3dpZHRoLCAxMDBdXG5cbiAgY2xlYXI6IC0+XG4gICAgQGN0eC5jbGVhci1yZWN0IDAsIDAsIEB3LCBAaFxuXG4gIHJlbmRlcjogKHsgcGxheWVyIH06Z2FtZS1zdGF0ZSwgzpR0LCB0KSAtPlxuICAgIEBjb2xvci13aGVlbC5kcmF3IFtAY3gsIGhlaWdodC81XSwgcGxheWVyLnJvdGF0aW9uLCBwbGF5ZXIuY29sb3JcbiAgICBAY29udHJvbGxlci5kcmF3IGNlbnRlciwgZ2FtZS1zdGF0ZVxuXG4gICAgaWYgREVCVUdfU0hPV19FQVNJTkdfVEVTVFNcbiAgICAgIEBlYXNlLWRlbW8uZHJhdyBbMCBoZWlnaHRdXG4gICAgZWxzZVxuICAgICAgQHJvdGF0aW9uLWhpc3QuZHJhdyB3aWR0aCwgaGVpZ2h0XG5cbiAgcHVzaC1yb3RhdGlvbi1oaXN0b3J5OiAobikgLT5cbiAgICBAcm90YXRpb24taGlzdC5wdXNoIG5cblxuICBpbnN0YWxsOiAoaG9zdCkgLT5cbiAgICBob3N0LmFwcGVuZC1jaGlsZCBAY2FudmFzXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZywgdGF1IH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBEZWJ1ZyB2aXN1YWxpc2VyJ3MgbWl4aW5zXG4jXG5cbmV4cG9ydCBEcmF3aW5nID1cbiAgYm94LWF0OiAocG9zLCBzaXplLCBjb2xvcikgLT5cbiAgICBAY3R4LmZpbGwtc3R5bGUgPSBjb2xvclxuICAgIEBjdHguZmlsbC1yZWN0IHBvcy4wIC0gc2l6ZS4wLzIsIHBvcy4xIC0gc2l6ZS4xLzIsIHNpemUuMCwgc2l6ZS4xXG5cbiAgYm94LXRvcDogKHBvcywgc2l6ZSwgY29sb3IpIC0+XG4gICAgQGN0eC5maWxsLXN0eWxlID0gY29sb3JcbiAgICBAY3R4LmZpbGwtcmVjdCBwb3MuMCAtIHNpemUuMC8yLCBwb3MuMSwgc2l6ZS4wLCBzaXplLjFcblxuICBjaXJjbGU6IChwb3MsIHIsIGNvbG9yKSAtPlxuICAgIEBjdHguZmlsbC1zdHlsZSA9IGNvbG9yXG4gICAgQGN0eC5iZWdpbi1wYXRoIVxuICAgIEBjdHguYXJjIHBvcy4wLCBwb3MuMSwgciwgMCwgdGF1XG4gICAgQGN0eC5jbG9zZS1wYXRoIVxuICAgIEBjdHguZmlsbCFcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nLCByZ2IsIHNpbiwgY29zLCB0YXUgfSA9IHJlcXVpcmUgXFxzdGRcbnsgcm90YXRpb24tdG8tY29sb3IgfSA9IHJlcXVpcmUgXFwuLi9jb21tb25cblxueyBEcmF3aW5nIH0gPSByZXF1aXJlIFxcLi9taXhpbnNcbnsgTGltaXRlZEFycmF5IH0gPSByZXF1aXJlIFxcLi4vbGltaXRlZC1hcnJheVxuXG5cbiNcbiMgUm90YXRpb24gSGlzdG9yeVxuI1xuXG5leHBvcnQgY2xhc3MgUm90YXRpb25IaXN0b3J5IGltcGxlbWVudHMgRHJhd2luZ1xuXG4gIChAY3R4LCBAbGltaXQgPSAyMDApIC0+XG4gICAgQGhpc3RvcnkgPSBuZXcgTGltaXRlZEFycmF5IEBsaW1pdFxuXG4gIHB1c2g6IChuKSAtPlxuICAgIEBoaXN0b3J5LnB1c2ggblxuXG4gIGRyYXc6ICh3aWR0aCwgaGVpZ2h0KSAtPlxuICAgIGZvciBkLCB4IGluIEBoaXN0b3J5Lml0ZW1zXG4gICAgICBAYm94LWF0IFt4L0BsaW1pdCAqIHdpZHRoLCBoZWlnaHQgLSAxMCAtIGQgKiAxMF0sIFsyIDJdLCByZ2IgY29sb3JzWyByb3RhdGlvbi10by1jb2xvciBkIF1cblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBFYXNpbmcgZnVuY3Rpb25zXG4jXG5cbiMgSGVscGVyc1xuXG5leHBvcnQgbWl4LWVhc2UgPSAoSW4sIE91dCkgLT4gKG4pIC0+XG4gIGlmIG4gPCAxLzJcbiAgICAxLzIgKiBJbiBuICogMlxuICBlbHNlXG4gICAgMS8yICsgMS8yICogT3V0IChuIC0gMS8yKSAqIDJcblxuXG4jIEluLWZ1bmN0aW9uc1xuXG5leHBvcnQgTGluZWFyICAgID0gKG4pIC0+IG5cblxuZXhwb3J0IFBvd2VyMiAgICA9IChuKSAtPiBuICogblxuXG5leHBvcnQgUG93ZXIzICAgID0gKG4pIC0+IG4gKiBuICogblxuXG5leHBvcnQgUG93ZXI0ICAgID0gKG4pIC0+IG4gKiBuICogbiAqIG5cblxuXG4jIE91dC1mdW5jdGlvbnNcblxuZXhwb3J0IFBvd2VyT3V0MiA9IChuLCBtID0gMSAtIG4pIC0+IDEgLSBtICogbVxuXG5leHBvcnQgUG93ZXJPdXQzID0gKG4sIG0gPSAxIC0gbikgLT4gMSAtIG0gKiBtICogbVxuXG5leHBvcnQgUG93ZXJPdXQ0ID0gKG4sIG0gPSAxIC0gbikgLT4gMSAtIG0gKiBtICogbSAqIG1cblxuXG4jIE1peGVkIGZ1bmN0aW9uc1xuXG5leHBvcnQgU3dpbmcyID0gbWl4LWVhc2UgUG93ZXIyLCBQb3dlck91dDJcblxuZXhwb3J0IFN3aW5nMyA9IG1peC1lYXNlIFBvd2VyMywgUG93ZXJPdXQzXG5cbmV4cG9ydCBTd2luZzQgPSBtaXgtZWFzZSBQb3dlcjQsIFBvd2VyT3V0NFxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHRhdSwgYWJzLCBsZXJwIH0gPSByZXF1aXJlIFxcc3RkXG5cbnsgVHdlZW4gfSA9IHJlcXVpcmUgXFwuL3R3ZWVuXG5cbnsgbWl4LWVhc2UsIExpbmVhciB9ID0gRWFzZSA9IHJlcXVpcmUgXFwuL2Vhc2VcblxuXG4jXG4jIEZsaXBmbG9wcGVyXG4jXG5cbmV4cG9ydCBjbGFzcyBMYXRjaGluZ0ZsaXBGbG9wcGVyXG5cbiAgTU9ERV9JRExFICAgICAgPSBTeW1ib2wgXFxpZGxlXG4gIE1PREVfQ09DS0lORyAgID0gU3ltYm9sIFxcY29ja2luZ1xuICBNT0RFX0NPQ0tFRCAgICA9IFN5bWJvbCBcXGNvY2tlZFxuICBNT0RFX1VOQ09DS0lORyA9IFN5bWJvbCBcXHVuY29ja2luZ1xuICBNT0RFX1JFVkVSU0lORyA9IFN5bWJvbCBcXHJldmVyc2luZ1xuXG4gIGQtc3ltID0gKG4pIC0+IDxbIEZMSVAgSURMRSBGTE9QIF0+W24gKyAxXVxuICBzdGFnZS1zdGVwID0gdGF1LzNcbiAgc3RhZ2UtdG8tcm90YXRpb24gPSAoKiBzdGFnZS1zdGVwKVxuXG4gIG5vcm1hbGlzZS1zdGFnZSA9IChzKSAtPlxuICAgIGlmIHMgPCAwIHRoZW4gMyAtICgtcyAlIDMpIGVsc2UgcyAlIDNcblxuICBub3JtYWxpc2Utcm90YXRpb24gPSAozrgpIC0+XG4gICAgaWYgzrggPCAwIHRoZW4gdGF1IC0gKC3OuCAlIHRhdSkgZWxzZSDOuCAlIHRhdVxuXG5cbiAgKHsgQHNwZWVkPTEgfT17fSkgLT5cbiAgICBAzrggICAgID0gMFxuICAgIEBzdGFnZSA9IDBcbiAgICBAbW9kZSAgPSBNT0RFX0lETEVcbiAgICBAY29jay1kaXJlY3Rpb24gPSAwXG4gICAgQHJldmVyc2UtdHJpZ2dlciA9IDBcbiAgICBAaWdub3JlZC10cmlnZ2VyID0gMFxuXG4gICAgQHRyaWdnZXItc3RhdGUgPVxuICAgICAgZmxpcDpcbiAgICAgICAgaW5nb3JlOiBub1xuICAgICAgZmxvcDpcbiAgICAgICAgaW5nb3JlOiBub1xuXG4gIHJvdGF0aW9uOn4gLT5cbiAgICBub3JtYWxpc2Utcm90YXRpb24gQM64XG5cbiAgc3RhdGljLXRvLXN0YWdlOiAoZCwgcCkgLT5cbiAgICBpZiBAcmV2ZXJzZS10cmlnZ2VyIGlzIGRcbiAgICAgIGlmIHAgaXMgMFxuICAgICAgICBAcmV2ZXJzZS10cmlnZ2VyID0gMFxuICAgICAgICBAY29jay1kaXJlY3Rpb24gPSAwXG4gICAgICAgIGxvZyBcXHJldmVydC1yZWxlYXNlOiBkLXN5bSBkXG4gICAgICBlbHNlIGxvZyBcXHJldmVydDogZC1zeW0gZFxuICAgICAgcmV0dXJuXG5cbiAgICBpZiBAaWdub3JlZC10cmlnZ2VyIGlzIGRcbiAgICAgIGlmIHAgaXMgMFxuICAgICAgICBAaWdub3JlZC10cmlnZ2VyID0gMFxuICAgICAgICBAY29jay1kaXJlY3Rpb24gPSAwXG4gICAgICAgIGxvZyBcXGlnbm9yZS1yZWxlYXNlOiBkLXN5bSBkXG4gICAgICBlbHNlIGxvZyBcXGlnbm9yZTogZC1zeW0gZFxuICAgICAgcmV0dXJuXG5cbiAgICBzd2l0Y2ggQG1vZGVcbiAgICB8IE1PREVfSURMRSA9PlxuICAgICAgQG1vZGUgPSBNT0RFX0NPQ0tJTkdcbiAgICAgIEBjb2NrLWRpcmVjdGlvbiA9IGRcbiAgICAgIEBjb2NrIC4uLlxuXG4gICAgfCBNT0RFX0NPQ0tJTkcgPT5cbiAgICAgIGlmIEBjb2NrLWRpcmVjdGlvbiBpcyBkXG4gICAgICAgIEBjb2NrIC4uLlxuICAgICAgZWxzZVxuICAgICAgICBAY29jay1kaXJlY3Rpb24gPSBkXG4gICAgICAgIEBpZ25vcmVkLXRyaWdnZXIgPSBkICogLTFcbiAgICAgICAgQGNvY2sgLi4uXG5cbiAgICB8IE1PREVfQ09DS0VEID0+XG4gICAgICBpZiBAY29jay1kaXJlY3Rpb24gaXMgZFxuICAgICAgICBAbW9kZSA9IE1PREVfVU5DT0NLSU5HXG4gICAgICAgIEB1bmNvY2sgLi4uXG4gICAgICBlbHNlXG4gICAgICAgIEBtb2RlID0gTU9ERV9SRVZFUlNJTkdcbiAgICAgICAgQGlnbm9yZWQtdHJpZ2dlciA9IGQgKiAtMVxuICAgICAgICBAcmV2ZXJzZSAuLi5cblxuICAgIHwgTU9ERV9VTkNPQ0tJTkcgPT5cbiAgICAgIGlmIEBjb2NrLWRpcmVjdGlvbiBpcyBkXG4gICAgICAgIEB1bmNvY2sgLi4uXG4gICAgICBlbHNlXG4gICAgICAgIEBtb2RlID0gTU9ERV9SRVZFUlNJTkdcbiAgICAgICAgQGlnbm9yZWQtdHJpZ2dlciA9IGQgKiAtMVxuICAgICAgICBAcmV2ZXJzZSAuLi5cblxuICAgIHwgTU9ERV9SRVZFUlNJTkcgPT5cbiAgICAgIEByZXZlcnNlIC4uLlxuXG4gIGlkbGU6IChkKSAtPlxuICAgIEBzdGFnZSA9IG5vcm1hbGlzZS1zdGFnZSBAc3RhZ2UgKyBkXG4gICAgQM64ICAgICA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZVxuICAgIEBtb2RlICA9IE1PREVfSURMRVxuICAgIEBjb2NrLWRpcmVjdGlvbiA9IDBcbiAgICBAaWdub3JlZC10cmlnZ2VyID0gMFxuXG4gIGNvY2s6IChkLCBwKSAtPlxuICAgIHRhcmdldC1yb3RhdGlvbiAgPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2UgKyBkXG4gICAgY3VycmVudC1yb3RhdGlvbiA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZVxuXG4gICAgQM64ID0gbGVycCAoRWFzZS5Qb3dlck91dDMgcCkvMiwgY3VycmVudC1yb3RhdGlvbiwgdGFyZ2V0LXJvdGF0aW9uXG4gICAgaWYgcCBpcyAxIHRoZW4gQG1vZGUgPSBNT0RFX0NPQ0tFRFxuICAgIGlmIHAgaXMgMCB0aGVuIEBpZGxlIDBcblxuICB1bmNvY2s6IChkLCBwKSAtPlxuICAgIHRhcmdldC1yb3RhdGlvbiAgPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2UgKyBkXG4gICAgY3VycmVudC1yb3RhdGlvbiA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZVxuXG4gICAgaWYgcCBpcyAwXG4gICAgICBAaWRsZSBkXG4gICAgZWxzZVxuICAgICAgQM64ID0gbGVycCAwLjUgKyAoMSAtIChFYXNlLlBvd2VyMyBwKSkvMiwgY3VycmVudC1yb3RhdGlvbiwgdGFyZ2V0LXJvdGF0aW9uXG5cbiAgcmV2ZXJzZTogKGQsIHApIC0+XG4gICAgdGFyZ2V0LXJvdGF0aW9uICA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZVxuICAgIGN1cnJlbnQtcm90YXRpb24gPSBzdGFnZS10by1yb3RhdGlvbiBAc3RhZ2UgLSBkLzJcbiAgICBAzrggPSBsZXJwIHAsIGN1cnJlbnQtcm90YXRpb24sIHRhcmdldC1yb3RhdGlvblxuXG4gICAgaWYgcCBpcyAxXG4gICAgICBAaWRsZSAwXG4gICAgICBAcmV2ZXJzZS10cmlnZ2VyID0gZFxuICAgICAgQGNvY2stZGlyZWN0aW9uID0gMFxuXG5cblxuZXhwb3J0IGNsYXNzIEVhc3lGbGlwRmxvcHBlclxuXG4gIHRocmVzaG9sZCAgICAgICAgICA9IHRhdS82MFxuICByZXR1cm4tdGhyZXNob2xkICAgPSAwLjFcbiAgc3RhZ2Utc3RlcCAgICAgICAgID0gdGF1LzNcbiAgc3RhZ2UtdG8tcm90YXRpb24gID0gKCogc3RhZ2Utc3RlcClcbiAgdHJpZ2dlci1uYW1lICAgICAgID0gKGQpIC0+IGlmIGQgaXMgLTEgdGhlbiBUUklHR0VSX0ZMSVAgZWxzZSBUUklHR0VSX0ZMT1BcbiAgbm9ybWFsaXNlLXN0YWdlICAgID0gKHMpIC0+IGlmIHMgPCAwIHRoZW4gMyAtICgtcyAlIDMpIGVsc2UgcyAlIDNcbiAgbm9ybWFsaXNlLXJvdGF0aW9uID0gKM64KSAtPiBpZiDOuCA8IDAgdGhlbiB0YXUgLSAoLc64ICUgdGF1KSBlbHNlIM64ICUgdGF1XG5cbiAgTU9ERV9JRExFID0gU3ltYm9sIFxcaWRsZVxuICBNT0RFX0ZMSVAgPSBTeW1ib2wgXFxmbGlwXG4gIE1PREVfRkxPUCA9IFN5bWJvbCBcXGZsb3BcblxuICBUUklHR0VSX0ZMSVAgPSBcXGZsaXBcbiAgVFJJR0dFUl9GTE9QID0gXFxmbG9wXG5cbiAgY3VzdG9tLWVhc2UgPSBFYXNlLlBvd2VyMiAjbWl4LWVhc2UgUG93ZXIyLCBQb3dlck91dDRcblxuICAoeyBAc3BlZWQ9MSB9PXt9KSAtPlxuICAgIEDOuCAgICAgPSAwXG4gICAgQHN0YWdlID0gMFxuICAgIEBtb2RlICA9IE1PREVfSURMRVxuICAgIEBkaXJlY3Rpb24gPSAwXG5cbiAgICBAdHJpZ2dlci1zdGF0ZSA9XG4gICAgICBcIiNUUklHR0VSX0ZMSVBcIjogaWdub3JlOiBub1xuICAgICAgXCIjVFJJR0dFUl9GTE9QXCI6IGlnbm9yZTogbm9cblxuICByb3RhdGlvbjp+IC0+XG4gICAgbm9ybWFsaXNlLXJvdGF0aW9uIEDOuFxuXG4gIHN0YXRpYy10by1zdGFnZTogKGQsIHApIC0+XG4gICAgdHJpZ2dlciA9IHRyaWdnZXItbmFtZSBkXG5cbiAgICBpZiBAdHJpZ2dlci1zdGF0ZVt0cmlnZ2VyXS5pZ25vcmVcbiAgICAgIGlmIHAgPCByZXR1cm4tdGhyZXNob2xkXG4gICAgICAgIEB0cmlnZ2VyLXN0YXRlW3RyaWdnZXJdLmlnbm9yZSA9IG5vXG5cbiAgICBlbHNlXG4gICAgICB0YXJnZXQgID0gc3RhZ2UtdG8tcm90YXRpb24gQHN0YWdlICsgZFxuICAgICAgY3VycmVudCA9IHN0YWdlLXRvLXJvdGF0aW9uIEBzdGFnZVxuXG4gICAgICBAzrggPSBsZXJwIChjdXN0b20tZWFzZSBwKSwgY3VycmVudCwgdGFyZ2V0XG5cbiAgICAgIGlmIChhYnMgQM64IC0gdGFyZ2V0KSA8IHRocmVzaG9sZFxuICAgICAgICBAzrggPSB0YXJnZXRcbiAgICAgICAgQHN0YWdlICs9IGRcbiAgICAgICAgQHRyaWdnZXItc3RhdGVbdHJpZ2dlcl0uaWdub3JlID0geWVzXG5cbiAgcm90YXRpb246fiAtPlxuICAgIG5vcm1hbGlzZS1yb3RhdGlvbiBAzrhcblxuXG5cbmV4cG9ydCBGbGlwRmxvcHBlciA9IEVhc3lGbGlwRmxvcHBlclxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHJhZiwgZmxvb3IsIGRlbGF5IH0gPSByZXF1aXJlIFxcc3RkXG5cblxuI1xuIyBGcmFtZSBEcml2ZXJcbiNcbiMgU21hbGwgZW5naW5lIHRoYXQgY3JlYXRlcyBhIGZyYW1lIGxvb3BcbiNcblxuZXhwb3J0IGNsYXNzIEZyYW1lRHJpdmVyXG5cbiAgdHBzLWhpc3Rvcnktd2luZG93ID0gMjBcbiAgZnBzLWhpc3Rvcnktd2luZG93ID0gMjBcblxuICBTSE9XX1JFQURPVVQgPSB5ZXNcbiAgUkVOREVSX09OX1RJQ0sgPSBub1xuXG4gIC0+XG4gICAgbG9nIFwiRnJhbWVEcml2ZXI6Om5ld1wiXG5cbiAgICBAc3RhdGUgPVxuICAgICAgemVybzogMFxuICAgICAgbGFzdC10aWNrLXRpbWU6IDBcbiAgICAgIGxhc3QtZnJhbWUtdGltZTogMFxuICAgICAgZnJhbWU6IDBcbiAgICAgIHJ1bm5pbmc6IG5vXG5cbiAgICBAY2FsbGJhY2tzID1cbiAgICAgIHRpY2s6IGlkXG4gICAgICBmcmFtZTogaWRcblxuICAgIEB0cHMgPVxuICAgICAgdmFsdWU6IDBcbiAgICAgIGhpc3Rvcnk6IFsgMCBdICogdHBzLWhpc3Rvcnktd2luZG93XG5cbiAgICBAZnBzID1cbiAgICAgIHZhbHVlOiAwXG4gICAgICBoaXN0b3J5OiBbIDAgXSAqIGZwcy1oaXN0b3J5LXdpbmRvd1xuXG4gICAgaWYgU0hPV19SRUFET1VUXG4gICAgICBAcmVhZG91dCA9IGRvY3VtZW50LmNyZWF0ZS1lbGVtZW50IFxccHJlXG4gICAgICBAcmVhZG91dC5zdHlsZSA8PDwgeyBwb3NpdGlvbjogXFxhYnNvbHV0ZSwgdG9wOiAwLCByaWdodDogMCB9XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZC1jaGlsZCBAcmVhZG91dFxuXG5cbiAgZnJhbWU6IH4+XG4gICAgaWYgQHN0YXRlLnJ1bm5pbmcgdGhlbiByYWYgQGZyYW1lXG5cbiAgICBub3cgPSBEYXRlLm5vdyEgLSBAc3RhdGUuemVyb1xuICAgIM6UdCAgPSBub3cgLSBAc3RhdGUubGFzdC1mcmFtZS10aW1lXG5cbiAgICBAcHVzaC1mcmFtZS10aW1lIM6UdFxuXG4gICAgQHN0YXRlLmxhc3QtZnJhbWUtdGltZSA9IG5vd1xuICAgIEBzdGF0ZS5mcmFtZSArPSAxXG4gICAgQGNhbGxiYWNrcy5mcmFtZSDOlHQvMTAwMCwgQHN0YXRlLmxhc3QtdGljay10aW1lLzEwMDAsIEBzdGF0ZS5mcmFtZSwgQGZwc1xuXG4gIHRpY2s6IH4+XG4gICAgaWYgQHN0YXRlLnJ1bm5pbmcgdGhlbiBkZWxheSAwLCBAdGlja1xuXG4gICAgbm93ID0gRGF0ZS5ub3chIC0gQHN0YXRlLnplcm9cbiAgICDOlHQgID0gbm93IC0gQHN0YXRlLmxhc3QtdGljay10aW1lXG5cbiAgICBpZiBTSE9XX1JFQURPVVRcbiAgICAgIEByZWFkb3V0LnRleHQtY29udGVudCA9IEBmcHMudmFsdWUgKyBcIiB8IFwiICsgQHRwcy52YWx1ZVxuXG4gICAgQHB1c2gtdGljay10aW1lIM6UdFxuICAgIEBzdGF0ZS5sYXN0LXRpY2stdGltZSA9IG5vd1xuICAgIEBjYWxsYmFja3MudGljayDOlHQvMTAwMCwgQHN0YXRlLmxhc3QtdGljay10aW1lLzEwMDAsIEBzdGF0ZS5mcmFtZSwgQGZwc1xuXG4gICAgaWYgUkVOREVSX09OX1RJQ0tcbiAgICAgIEBwdXNoLWZyYW1lLXRpbWUgzpR0XG4gICAgICBAc3RhdGUuZnJhbWUgKz0gMVxuICAgICAgQGNhbGxiYWNrcy5mcmFtZSBAc3RhdGUuZnJhbWVcblxuICBzdGFydDogLT5cbiAgICBpZiBAc3RhdGUucnVubmluZyBpcyB5ZXMgdGhlbiByZXR1cm5cbiAgICBsb2cgXCJGcmFtZURyaXZlcjo6U3RhcnQgLSBzdGFydGluZ1wiXG4gICAgQHN0YXRlLnplcm8gPSBEYXRlLm5vdyFcbiAgICBAc3RhdGUubGFzdC10aWNrLXRpbWUgPSAwXG4gICAgQHN0YXRlLmxhc3QtZnJhbWUtdGltZSA9IDBcbiAgICBAc3RhdGUucnVubmluZyA9IHllc1xuICAgIEB0aWNrIVxuICAgIEBmcmFtZSEgdW5sZXNzIFJFTkRFUl9PTl9USUNLXG5cbiAgc3RvcDogLT5cbiAgICBpZiBAc3RhdGUucnVubmluZyBpcyBubyB0aGVuIHJldHVyblxuICAgIGxvZyBcIkZyYW1lRHJpdmVyOjpTdG9wIC0gc3RvcHBpbmdcIlxuICAgIEBzdGF0ZS5ydW5uaW5nID0gbm9cblxuICB0b2dnbGU6IC0+XG4gICAgaWYgQHN0YXRlLnJ1bm5pbmdcbiAgICAgIEBzdG9wIVxuICAgIGVsc2VcbiAgICAgIEBzdGFydCFcblxuICBwdXNoLXRpY2stdGltZTogKM6UdCkgLT5cbiAgICBAdHBzLmhpc3RvcnkucHVzaCDOlHRcbiAgICBAdHBzLmhpc3Rvcnkuc2hpZnQhXG4gICAgQHRwcy52YWx1ZSA9IGZsb29yIDEwMDAgKiB0cHMtaGlzdG9yeS13aW5kb3cgLyBAdHBzLmhpc3RvcnkucmVkdWNlICgrKSwgMFxuXG4gIHB1c2gtZnJhbWUtdGltZTogKM6UdCkgLT5cbiAgICBAZnBzLmhpc3RvcnkucHVzaCDOlHRcbiAgICBAZnBzLmhpc3Rvcnkuc2hpZnQhXG4gICAgQGZwcy52YWx1ZSA9IGZsb29yIDEwMDAgKiBmcHMtaGlzdG9yeS13aW5kb3cgLyBAZnBzLmhpc3RvcnkucmVkdWNlICgrKSwgMFxuXG4gIG9uLXRpY2s6ICjOuykgLT5cbiAgICBAY2FsbGJhY2tzLnRpY2sgPSDOu1xuXG4gIG9uLWZyYW1lOiAozrspIC0+XG4gICAgQGNhbGxiYWNrcy5mcmFtZSA9IM67XG5cbiIsIlxuI1xuIyBHbG9iYWwgQ29uc3RhbnRzXG4jXG5cbiMgUmVuZGVyaW5nIG1vZGVzXG5nbG9iYWwuTU9ERV9DT0xPUiAgPSBTeW1ib2wgXFxjb2xvclxuZ2xvYmFsLk1PREVfTk9STUFMID0gU3ltYm9sIFxcbm9ybWFsXG5nbG9iYWwuTU9ERV9BREQgICAgPSBTeW1ib2wgXFxhZGRcblxuIyBDb2xvciB3aGVlbCBzZWdtZW50c1xuZ2xvYmFsLmNvbG9ycyA9XG4gIFsxIDAgMF0gWzEgMSAwXSBbMCAxIDBdXG4gIFswIDEgMF0gWzAgMSAxXSBbMCAwIDFdXG4gIFswIDAgMV0gWzEgMCAxXSBbMSAwIDBdXG5cbiMgR2FtZSBzdGF0ZXNcbmdsb2JhbC5GSVJFX01PREVfQUxURVJOQVRFID0gU3ltYm9sIFxcYWx0ZXJuYXRlXG5nbG9iYWwuRklSRV9NT0RFX0JMRU5EICAgICA9IFN5bWJvbCBcXGJsZW5kXG5cbiMgQ29udHJvbGxlciBpbnB1dCBzaWduYWxzXG5nbG9iYWwuSU5QVVRfRklSRSAgICAgICA9IFN5bWJvbCBcXGlucHV0LWZpcmVcbmdsb2JhbC5JTlBVVF9SRUQgICAgICAgID0gU3ltYm9sIFxcaW5wdXQtcmVkXG5nbG9iYWwuSU5QVVRfR1JFRU4gICAgICA9IFN5bWJvbCBcXGlucHV0LWdyZWVuXG5nbG9iYWwuSU5QVVRfQkxVRSAgICAgICA9IFN5bWJvbCBcXGlucHV0LWJsdWVcbmdsb2JhbC5JTlBVVF9CT01CICAgICAgID0gU3ltYm9sIFxcaW5wdXQtYm9tYlxuZ2xvYmFsLklOUFVUX0ZMSVAgICAgICAgPSBTeW1ib2wgXFxpbnB1dC1mbGlwXG5nbG9iYWwuSU5QVVRfRkxPUCAgICAgICA9IFN5bWJvbCBcXGlucHV0LWZpcmVcbmdsb2JhbC5JTlBVVF9TVVBFUiAgICAgID0gU3ltYm9sIFxcaW5wdXQtc3VwZXJcbmdsb2JhbC5JTlBVVF9TUEVDSUFMICAgID0gU3ltYm9sIFxcaW5wdXQtc3BlY2lhbFxuZ2xvYmFsLklOUFVUX1BBVVNFICAgICAgPSBTeW1ib2wgXFxpbnB1dC1wYXVzZVxuZ2xvYmFsLklOUFVUX1JPTExfTEVGVCAgPSBTeW1ib2wgXFxpbnB1dC1yb2xsLWxlZnRcbmdsb2JhbC5JTlBVVF9ST0xMX1JJR0hUID0gU3ltYm9sIFxcaW5wdXQtcm9sbC1yaWdodFxuZ2xvYmFsLklOUFVUX1ggICAgICAgICAgPSBTeW1ib2wgXFxpbnB1dC1tb3ZlLXhcbmdsb2JhbC5JTlBVVF9ZICAgICAgICAgID0gU3ltYm9sIFxcaW5wdXQtbW92ZS15XG5nbG9iYWwuSU5QVVRfUkFXX1ggICAgICA9IFN5bWJvbCBcXGlucHV0LXJhdy14XG5nbG9iYWwuSU5QVVRfUkFXX1kgICAgICA9IFN5bWJvbCBcXGlucHV0LXJhdy15XG5cbiMgQXNzZXQgbG9hZCBzdGF0dXNcblxuZ2xvYmFsLkFTU0VUX0xPQURfQ09NUExFVEUgPSBTeW1ib2wgXFxsb2FkLWNvbXBsZXRlXG5nbG9iYWwuQVNTRVRfTE9BRF9GQUlMRUQgICA9IFN5bWJvbCBcXGxvYWQtZmFpbGVkXG5cblxuI1xuIyBFeHBlcmltZW50YWwgZmVhdHVyZSBzd2l0Y2hlc1xuI1xuXG4jIEZsaXBmbG9wIG9yIGRvZGdlP1xuZ2xvYmFsLkVYUF9UUklHR0VSX0FDVElPTl9GTElQRkxPUCA9IG9uXG5nbG9iYWwuRVhQX1RSSUdHRVJfQUNUSU9OX0RPREdFICAgID0gbm90IEVYUF9UUklHR0VSX0FDVElPTl9GTElQRkxPUFxuXG4jIElrYXJ1Z2Egb3IgUmFkaWFudCBTaWx2ZXJndW4/XG5nbG9iYWwuRVhQX0ZJUkVfTU9ERV9JS0FSVUdBID0gb2ZmXG5nbG9iYWwuRVhQX0ZJUkVfTU9ERV9SQURJQU5UID0gbm90IEVYUF9GSVJFX01PREVfSUtBUlVHQVxuXG4jIFN0cmljdCB0aW1lIGJpbmRpbmc/XG5nbG9iYWwuRVhQX1NUUklDVF9USU1FX0JJTkRJTkcgPSBvblxuXG4jIERpcmVjdGlvbiBzdXBlcmxhc2VyIG9yIG9uZSBsYXNlciBvbmUgbWFnZW50P1xuZ2xvYmFsLkVYUF9NQUdORVRfQU5EX0xBU0VSID0gb25cbmdsb2JhbC5FWFBfRElSRUNUSU9OQUxfTEFTRVJTID0gbm90IEVYUF9NQUdORVRfQU5EX0xBU0VSXG5cbiMgTW92aW5nIGJhY2t3YXJkcyByZXdpbmRzIHRpbWU/XG5nbG9iYWwuRVhQX0JBQ0tXQVJEU19USU1FX1JFV0lORCA9IG9uXG5nbG9iYWwuRVhQX0JBQ0tXQVJEU19USU1FX1NLSVBQSU5HID0gbm90IEVYUF9CQUNLV0FSRFNfVElNRV9SRVdJTkRcblxuXG4jXG4jIEdsb2JhbCBvcHRpb25zXG4jXG5cbmdsb2JhbC5HQU1FUEFEX0FYSVNfREVBRFpPTkUgPSAwLjJcbmdsb2JhbC5ERUJVR19TSE9XX0VBU0lOR19URVNUUyA9IG5vXG5nbG9iYWwuTEVSUF9DQU1FUkFfWCA9IG9uXG5nbG9iYWwuREVCVUdfRElTQUJMRV9BVURJTyA9IG5vXG5nbG9iYWwuREVCVUdfU0lNVUxBVEVfTEFURU5DWSA9IG5vXG5cbiIsIlxuI1xuIyBSZXF1aXJlXG4jXG5cbnsgaWQsIGxvZywgZmxvb3IsIGFicywgdGF1LCBzaW4sIGNvcywgZGl2LCB2MiB9ID0gcmVxdWlyZSBcXHN0ZFxueyBkZWxheSwgd3JhcCwgcmdiLCBsZXJwLCBybmQsIHJhbmRvbS1yYW5nZSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5yZXF1aXJlIFxcLi9nbG9iYWxcblxueyBGcmFtZURyaXZlciB9ID0gcmVxdWlyZSBcXC4vZnJhbWUtZHJpdmVyXG57IEZsaXBGbG9wcGVyIH0gPSByZXF1aXJlIFxcLi9mbGlwZmxvcHBlclxueyBEZWJ1Z1ZpcyB9ICAgID0gcmVxdWlyZSBcXC4vZGVidWdcbnsgQXVkaW9PdXRwdXQgfSA9IHJlcXVpcmUgXFwuL2F1ZGlvLW91dHB1dFxueyBCbGl0dGVyIH0gICAgID0gcmVxdWlyZSBcXC4vYmxpdHRlclxueyBTcHJpdGUgfSAgICAgID0gcmVxdWlyZSBcXC4vc3ByaXRlXG57IElucHV0IH0gICAgICAgPSByZXF1aXJlIFxcLi9pbnB1dFxueyBUd2VlbiB9ICAgICAgID0gcmVxdWlyZSBcXC4vdHdlZW5cbnsgQnVsbGV0LCBCbGVuZEJ1bGxldCwgU3VwZXJCdWxsZXQgfSA9IHJlcXVpcmUgXFwuL2J1bGxldFxueyBUYXJnZXQxLCBUYXJnZXQyLCBUYXJnZXQzIH0gPSByZXF1aXJlIFxcLi90YXJnZXRcbnsgUmFuZG9tU3RyZWFtIH0gPSByZXF1aXJlIFxcLi9yYW5kb20tc3RyZWFtXG57IFNvdW5kIH0gICAgICAgID0gcmVxdWlyZSBcXC4vc291bmRcblxuRWFzZSAgID0gcmVxdWlyZSBcXC4vZWFzZVxuVGltZXIgID0gcmVxdWlyZSBcXC4vdGltZXJcblxueyBsZXJwLWNvbG9yLCBkaWFtb25kLCByb3RhdGlvbi10by1jb2xvciwgcm90YXRpb24tdG8tc3ByaXRlLWluZGV4IH0gPSByZXF1aXJlIFxcLi9jb21tb25cblxuXG4jXG4jIENvbmZpZ1xuI1xuXG5hdXRvLXRyYXZlbC1zcGVlZCAgICAgID0gMTAwMFxubWF4LXNwZWVkICAgICAgICAgICAgICA9IDEwMDBcbmF1dG8tZmlyZS1zcGVlZCAgICAgICAgPSAwLjA0XG5kdWFsLWZpcmUtc2VwYXJhdGlvbiAgID0gMzVcbmNhbWVyYS1kcmlmdC1saW1pdCAgICAgPSAyMDAgICAjIFRPRE86IE1ha2UgY2FtZXJhIHNlZWsgY2VudGVyIGdyYWR1YWxseVxuZmxpcC1mbG9wLXRpbWUgICAgICAgICA9IDAuMlxucm90YXRpb24taGlzdG9yeS1saW1pdCA9IDIwMFxuaGl0LXJhZGl1cyAgICAgICAgICAgICA9IDI1XG5cblxuI1xuIyBJTklUXG4jXG5cbm1haW4tYXVkaW8gICAgPSBuZXcgQXVkaW9PdXRwdXRcbm1haW4tY2FudmFzICAgPSBuZXcgQmxpdHRlclxuaW5wdXQgICAgICAgICA9IG5ldyBJbnB1dFxuZmxpcGZsb3BwZXIgICA9IG5ldyBGbGlwRmxvcHBlciBzcGVlZDogMC4yXG5kZWJ1Zy12aXMgICAgID0gbmV3IERlYnVnVmlzIGZsaXBmbG9wcGVyXG50aHJ1c3QtbGVuZ3RoID0gbmV3IFJhbmRvbVN0cmVhbSBtaW46IDUsIG1heDogNTAsIHNwZWVkOiAwLjAxXG5cblxuXG4jIE1pc2MgZnVuY3Rpb25zXG5cbnNob290LWJ5LXJvdGF0aW9uID0gLT5cbiAgbWFpbi1hdWRpby5wbGF5IHNob3Qtc291bmRcblxuICBpZiBnYW1lLXN0YXRlLmZpcmUtbW9kZSBpcyBGSVJFX01PREVfQkxFTkRcbiAgICBtaWQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgWzAgMTcwXVxuICAgIGdhbWUtc3RhdGUucGxheWVyLWJ1bGxldHMucHVzaCBuZXcgQmxlbmRCdWxsZXQgbWlkLCBjb2xvcnNbZ2FtZS1zdGF0ZS5wbGF5ZXIuY29sb3IgKyAwXVxuXG4gIGVsc2VcbiAgICBpZiBnYW1lLXN0YXRlLnNob290LWFsdGVybmF0ZVxuICAgICAgbGVmdCA9IGdhbWUtc3RhdGUucGxheWVyLnBvcyBgdjIuYWRkYCBbZHVhbC1maXJlLXNlcGFyYXRpb24vLTIgNTBdXG4gICAgICBnYW1lLXN0YXRlLnBsYXllci1idWxsZXRzLnB1c2ggbmV3IEJ1bGxldCBsZWZ0LCBjb2xvcnNbZ2FtZS1zdGF0ZS5wbGF5ZXIuY29sb3JdXG4gICAgZWxzZVxuICAgICAgcmlnaHQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLysyIDUwXVxuICAgICAgZ2FtZS1zdGF0ZS5wbGF5ZXItYnVsbGV0cy5wdXNoIG5ldyBCdWxsZXQgcmlnaHQsIGNvbG9yc1tnYW1lLXN0YXRlLnBsYXllci5jb2xvcl1cbiAgICBnYW1lLXN0YXRlLnNob290LWFsdGVybmF0ZSA9IG5vdCBnYW1lLXN0YXRlLnNob290LWFsdGVybmF0ZVxuXG5zaG9vdC1ieS1pbnB1dCA9IC0+XG4gIG1haW4tYXVkaW8ucGxheSBzaG90LXNvdW5kXG5cbiAgY29sb3IgPSBbXG4gICAgaWYgZ2FtZS1zdGF0ZS5pbnB1dC1zdGF0ZS5yZWQgICB0aGVuIDEgZWxzZSAwXG4gICAgaWYgZ2FtZS1zdGF0ZS5pbnB1dC1zdGF0ZS5ncmVlbiB0aGVuIDEgZWxzZSAwXG4gICAgaWYgZ2FtZS1zdGF0ZS5pbnB1dC1zdGF0ZS5ibHVlICB0aGVuIDEgZWxzZSAwXG4gIF1cblxuICBpZiBnYW1lLXN0YXRlLnNob290LWFsdGVybmF0ZVxuICAgIGxlZnQgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MgYHYyLmFkZGAgW2R1YWwtZmlyZS1zZXBhcmF0aW9uLy0yIDUwXVxuICAgIGdhbWUtc3RhdGUucGxheWVyLWJ1bGxldHMucHVzaCBuZXcgQnVsbGV0IGxlZnQsIGNvbG9yXG4gIGVsc2VcbiAgICByaWdodCA9IGdhbWUtc3RhdGUucGxheWVyLnBvcyBgdjIuYWRkYCBbZHVhbC1maXJlLXNlcGFyYXRpb24vKzIgNTBdXG4gICAgZ2FtZS1zdGF0ZS5wbGF5ZXItYnVsbGV0cy5wdXNoIG5ldyBCdWxsZXQgcmlnaHQsIGNvbG9yXG4gIGdhbWUtc3RhdGUuc2hvb3QtYWx0ZXJuYXRlID0gbm90IGdhbWUtc3RhdGUuc2hvb3QtYWx0ZXJuYXRlXG5cblxuZ2V0LWZpcmUtdHlwZS1mcm9tLXNpZ25hbCA9IC0+XG4gIHN3aXRjaCBpdFxuICB8IElOUFVUX1JFRCAgID0+IFxccmVkXG4gIHwgSU5QVVRfR1JFRU4gPT4gXFxncmVlblxuICB8IElOUFVUX0JMVUUgID0+IFxcYmx1ZVxuICB8IG90aGVyd2lzZSA9PiBsb2cgXCJDYW4ndCByZWNvZ25pc2UgUmFkaWFudCBmaXJlIG1vZGU6XCIsIGl0XG5cbnN1cGVyLXNob290ID0gLT5cbiAgbWFpbi1hdWRpby5wbGF5IHNob3Qtc291bmRcbiAgbWlkID0gZ2FtZS1zdGF0ZS5wbGF5ZXIucG9zIGB2Mi5hZGRgIFswIDE3MF1cbiAgZ2FtZS1zdGF0ZS5wbGF5ZXItYnVsbGV0cy5wdXNoIG5ldyBTdXBlckJ1bGxldCBtaWQsIFsxIDEgMV1cblxuc3Bhd24gPSAtPlxuICB0YXJnZXRzID0gZ2FtZS1zdGF0ZS50YXJnZXRzXG4gIHkgPSBnYW1lLXN0YXRlLnBsYXllci5wb3MuMVxuXG4gIHN3aXRjaCBmbG9vciBybmQgM1xuICB8IDAgPT5cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWy0zMDAgeSArIDYwMF0sIFsxIDAgMF1cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDIgWy0xNTAgeSArIDU1MF0sIFsxIDEgMF1cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzAgICAgeSArIDUwMF0sIFswIDEgMF1cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDIgWzE1MCAgeSArIDU1MF0sIFswIDEgMV1cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzMwMCAgeSArIDYwMF0sIFswIDAgMV1cbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDIgWzAgICAgeSArIDc1MF0sIFsxIDAgMV1cblxuICB8IDEgPT5cbiAgICBjb2xvciA9IFtbMSAwIDBdLFswIDEgMF0sWzAgMCAxXV1bZmxvb3Igcm5kIDNdXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQxIFstMzAwIHkgKyA2MDBdLCBjb2xvclxuICAgIHRhcmdldHMucHVzaCBuZXcgVGFyZ2V0MSBbLTE1MCB5ICsgNTUwXSwgY29sb3JcbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzAgICAgeSArIDUwMF0sIGNvbG9yXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQxIFsxNTAgIHkgKyA1NTBdLCBjb2xvclxuICAgIHRhcmdldHMucHVzaCBuZXcgVGFyZ2V0MSBbMzAwICB5ICsgNjAwXSwgY29sb3JcbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzAgICAgeSArIDc1MF0sIGNvbG9yXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQxIFstMzAwIHkgKyA3NTBdLCBjb2xvclxuICAgIHRhcmdldHMucHVzaCBuZXcgVGFyZ2V0MSBbLTE1MCB5ICsgNzAwXSwgY29sb3JcbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzAgICAgeSArIDY1MF0sIGNvbG9yXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQxIFsxNTAgIHkgKyA3MDBdLCBjb2xvclxuICAgIHRhcmdldHMucHVzaCBuZXcgVGFyZ2V0MSBbMzAwICB5ICsgNzUwXSwgY29sb3JcbiAgICB0YXJnZXRzLnB1c2ggbmV3IFRhcmdldDEgWzAgICAgeSArIDkwMF0sIGNvbG9yXG5cbiAgfCAyID0+XG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQyIFstMzAwIHkgKyA2MDBdLCBbMSAxIDBdXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQyIFstMTUwIHkgKyA1NTBdLCBbMCAxIDFdXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQyIFswICAgIHkgKyA1MDBdLCBbMSAwIDFdXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQyIFsxNTAgIHkgKyA1NTBdLCBbMCAxIDFdXG4gICAgdGFyZ2V0cy5wdXNoIG5ldyBUYXJnZXQyIFszMDAgIHkgKyA2MDBdLCBbMSAxIDBdXG5cblxuIyBTaGFyZWQgR2FtZXN0YXRlXG5cbmdsb2JhbC5nYW1lLXN0YXRlID1cblxuICB3b3JsZC10aW1lOiAwXG4gIM6UdDogMFxuXG4gIGNhbWVyYS16b29tOiAwLjdcbiAgY2FtZXJhLXBvczogWzAgMF1cblxuICB0aW1lLWZhY3RvcjogMC4xXG5cbiAgcGxheWVyOlxuICAgIHBvczogWzAgMF1cbiAgICB2ZWw6IFswIDBdXG4gICAgZmxpcHBpbmc6IG5vXG4gICAgZmxvcHBpbmc6IG5vXG4gICAgY29sb3I6IDBcbiAgICByb3RhdGlvbjogMFxuXG4gIHRpbWVyczpcbiAgICBhdXRvLWZpcmUtdGltZXI6IFRpbWVyLmNyZWF0ZSBhdXRvLWZpcmUtc3BlZWRcbiAgICBmbGlwLWZsb3AtdGltZXI6IFRpbWVyLmNyZWF0ZSBmbGlwLWZsb3AtdGltZSwgZGlzYWJsZWQ6IHRydWVcblxuICBmaXJlLW1vZGU6IEZJUkVfTU9ERV9BTFRFUk5BVEVcbiAgc2hvb3QtYWx0ZXJuYXRlOiBub1xuICBmaXJlLXJlbmRlci1hbHRlcm5hdGU6IG5vXG4gIHBsYXllci1idWxsZXRzOiBbXVxuXG4gIGlucHV0LXN0YXRlOlxuICAgIHVwOiAgICBvZmYgICAgIyBCVVRUT05TXG4gICAgZG93bjogIG9mZlxuICAgIGxlZnQ6ICBvZmZcbiAgICByaWdodDogb2ZmXG4gICAgZmlyZTogIG9mZlxuICAgIHJlZDogICBvZmZcbiAgICBncmVlbjogb2ZmXG4gICAgYmx1ZTogIG9mZlxuICAgIHBhdXNlOiBvZmZcbiAgICBmbGlwOiAwICAgICAgICMgVFJJR0dFUlNcbiAgICBmbG9wOiAwXG4gICAgeDogMCAgICAgICAgICAjIEpPWVNUSUNLU1xuICAgIHk6IDBcbiAgICByYXcteDogMCAgICAgICMgSk9ZU1RJQ0sgREVCVUdcbiAgICByYXcteTogMFxuICAgIG1vdXNlLXg6IDAgICAgIyBQT0lOVEVSU1xuICAgIG1vdXNlLXk6IDBcblxuICB0YXJnZXRzOiBbXVxuXG5cbiNcbiMgUkVOREVSXG4jXG5cbnBsYXllci1zcHJpdGUgPSBuZXcgU3ByaXRlIFxcL2Fzc2V0cy9wbGF5ZXItc3ByaXRlLnBuZywgWyAxMDAsIDEyMCBdLCAyNFxuc2hvdC1zb3VuZCAgICA9IG5ldyBTb3VuZCAgXFwvYXNzZXRzL3Nob3QubXAzLCBtYWluLWF1ZGlvLmdldC1jb250ZXh0IVxuXG5wbGF5ZXItc3ByaXRlLXNpemUgPSBbIDcwIDgwIF1cblxuXG5yZW5kZXIgPSAozpR0LCB0KSAtPlxuICBwID0gVGltZXIuZ2V0LXByb2dyZXNzIEB0aW1lcnMuZmxpcC1mbG9wLXRpbWVyXG5cbiAgcGxheWVyLWNvbG9yID0gcmdiIGRvXG4gICAgaWYgQHBsYXllci5mbGlwcGluZ1xuICAgICAgbGVycC1jb2xvciBwLCBjb2xvcnNbQHBsYXllci5jb2xvcl0sIGNvbG9yc1t3cmFwIDAsIGNvbG9ycy5sZW5ndGggLSAxLCBAcGxheWVyLmNvbG9yICsgMV1cbiAgICBlbHNlIGlmIEBwbGF5ZXIuZmxvcHBpbmdcbiAgICAgIGxlcnAtY29sb3IgcCwgY29sb3JzW0BwbGF5ZXIuY29sb3JdLCBjb2xvcnNbd3JhcCAwLCBjb2xvcnMubGVuZ3RoIC0gMSwgQHBsYXllci5jb2xvciAtIDFdXG4gICAgZWxzZVxuICAgICAgY29sb3JzW0BwbGF5ZXIuY29sb3JdXG5cbiAgbWFpbi1jYW52YXMuY2xlYXIgdFxuICBtYWluLWNhbnZhcy5kcmF3LW9yaWdpbiFcbiAgbWFpbi1jYW52YXMuZHJhdy1sb2NhbC1ncmlkIVxuXG4gIGZvciB0YXJnZXQgaW4gQHRhcmdldHNcbiAgICB0YXJnZXQuZHJhdyBtYWluLWNhbnZhc1xuXG4gIGxlbiA9IHRocnVzdC1sZW5ndGguZ2V0LXZhbHVlISAjIHJhbmRvbS1yYW5nZSA1LCA1MFxuXG4gIG1haW4tY2FudmFzLnJlY3QgIEBwbGF5ZXIucG9zIGB2Mi5hZGRgIFswIC01MDBdLCBbIDMsIDEwMDAgXSwgY29sb3I6IHBsYXllci1jb2xvclxuICBtYWluLWNhbnZhcy5zcHJpdGUgcGxheWVyLXNwcml0ZSwgQHBsYXllci5wb3MsIHBsYXllci1zcHJpdGUtc2l6ZVxuICBtYWluLWNhbnZhcy5kbnRyaSBAcGxheWVyLnBvcyBgdjIuYWRkYCBbMCAtMjggLSBsZW4vMl0sIFsyMCBsZW5dLCBjb2xvcjogcGxheWVyLWNvbG9yXG5cbiAgZm9yIGJ1bGxldCBpbiBAcGxheWVyLWJ1bGxldHNcbiAgICBidWxsZXQuZHJhdyBtYWluLWNhbnZhc1xuICAgICNtYWluLWNhbnZhcy5jaXJjbGUgYnVsbGV0LnBvcywgaGl0LXJhZGl1cywgY29sb3I6IHJnYiBjb2xvcnNbQHBsYXllci5jb2xvcl1cbiAgICBtYWluLWNhbnZhcy5zdHJva2UtY2lyY2xlIGJ1bGxldC5wb3MsIGJ1bGxldC5yYWRpdXMsIGNvbG9yOiBcXHdoaXRlXG5cbiAgIyBEZWJ1ZyByZW5kZXJpbmdcbiAgZGVidWctdmlzLmNsZWFyIVxuICBkZWJ1Zy12aXMucmVuZGVyIGdhbWUtc3RhdGUsIGZsaXBmbG9wcGVyLCDOlHQsIHRcblxuXG4jXG4jIFVQREFURVxuI1xuXG51cGRhdGUgPSAozpR0LCB0KSAtPlxuXG4gICMgVXBkYXRlIHRpbWVcblxuICBAzpR0ID0gzpR0ICogaWYgRVhQX1NUUklDVF9USU1FX0JJTkRJTkcgdGhlbiBAdGltZS1mYWN0b3IgZWxzZSAxXG4gIEB3b3JsZC10aW1lICs9IEDOlHRcbiAgQHN5c3RlbS10aW1lICs9IM6UdFxuXG5cbiAgIyBVcGRhdGUgdGltZXJzXG5cbiAgVHdlZW4udXBkYXRlLWFsbCBAzpR0XG4gIFRpbWVyLnVwZGF0ZS1hbmQtY2FycnkgQHRpbWVycy5hdXRvLWZpcmUtdGltZXIsIEDOlHRcbiAgaW5wdXQudXBkYXRlIEDOlHQsIEB3b3JsZC10aW1lICAjIERlYnVnIG9ubHkgLSByZWFsIGlucHV0IGNvbnRyb2xsZXIgZG9lc24ndCBuZWVkIHRpbWVyc1xuXG4gIHRocnVzdC1sZW5ndGgudXBkYXRlIEDOlHRcblxuXG4gICMgQ29uc3VtZSBpbnB1dCBldmVudHNcblxuICB3aGlsZSBldmVudCA9IGlucHV0LnBlbmRpbmctZXZlbnRzLnNoaWZ0IVxuICAgIFsgdHlwZSwgdmFsdWUgXSA9IGV2ZW50XG5cbiAgICBzd2l0Y2ggdHlwZVxuICAgIHwgSU5QVVRfRklSRSAgPT5cbiAgICAgIGlmIEBpbnB1dC1zdGF0ZS5maXJlIGlzbnQgdmFsdWVcbiAgICAgICAgQGlucHV0LXN0YXRlLmZpcmUgPSB2YWx1ZVxuICAgICAgICBpZiB2YWx1ZVxuICAgICAgICAgIHNob290LWJ5LXJvdGF0aW9uIVxuICAgICAgICAgIGlmIEBmaXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURVxuICAgICAgICAgICAgVGltZXIucmVzZXQgQHRpbWVycy5hdXRvLWZpcmUtdGltZXIsIGF1dG8tZmlyZS1zcGVlZCAqIGlmIEBmaXJlLW1vZGUgaXMgRklSRV9NT0RFX0FMVEVSTkFURSB0aGVuIDEgZWxzZSAyXG5cbiAgICB8IElOUFVUX1JFRCwgSU5QVVRfQkxVRSwgSU5QVVRfR1JFRU4gPT5cbiAgICAgIGNvbG9yID0gZ2V0LWZpcmUtdHlwZS1mcm9tLXNpZ25hbCB0eXBlXG4gICAgICBpZiBAaW5wdXQtc3RhdGVbY29sb3JdIGlzbnQgdmFsdWVcbiAgICAgICAgQGlucHV0LXN0YXRlW2NvbG9yXSA9IHZhbHVlXG4gICAgICAgIGlmIHZhbHVlXG4gICAgICAgICAgc2hvb3QtYnktaW5wdXQhXG4gICAgICAgICAgaWYgQGZpcmUtbW9kZSBpcyBGSVJFX01PREVfQUxURVJOQVRFXG4gICAgICAgICAgICBUaW1lci5yZXNldCBAdGltZXJzLmF1dG8tZmlyZS10aW1lciwgYXV0by1maXJlLXNwZWVkICogaWYgQGZpcmUtbW9kZSBpcyBGSVJFX01PREVfQUxURVJOQVRFIHRoZW4gMSBlbHNlIDJcblxuICAgICN8IElOUFVUX1ggPT4gQGlucHV0LXN0YXRlLnggPSB2YWx1ZVxuICAgICN8IElOUFVUX1kgPT4gQGlucHV0LXN0YXRlLnkgPSB2YWx1ZVxuXG4gICAgfCBJTlBVVF9SQVdfWCA9PiBAaW5wdXQtc3RhdGUucmF3LXggPSB2YWx1ZVxuICAgIHwgSU5QVVRfUkFXX1kgPT4gQGlucHV0LXN0YXRlLnJhdy15ID0gdmFsdWVcblxuICAgIHwgSU5QVVRfUEFVU0UgPT5cbiAgICAgIGlmIHZhbHVlXG4gICAgICAgIGZyYW1lLWRyaXZlci50b2dnbGUhXG5cbiAgICB8IElOUFVUX1NVUEVSID0+XG4gICAgICBpZiB2YWx1ZVxuICAgICAgICBzdXBlci1zaG9vdCFcblxuICAgIHwgSU5QVVRfRkxJUCA9PlxuICAgICAgaWYgQGlucHV0LXN0YXRlLmZsaXAgPCB2YWx1ZVxuICAgICAgICBmbGlwZmxvcHBlci5zdGF0aWMtdG8tc3RhZ2UgLTEsIHZhbHVlXG4gICAgICBlbHNlIGlmIEBpbnB1dC1zdGF0ZS5mbGlwID4gdmFsdWVcbiAgICAgICAgZmxpcGZsb3BwZXIuc3RhdGljLXRvLXN0YWdlIC0xLCB2YWx1ZVxuICAgICAgQGlucHV0LXN0YXRlLmZsaXAgID0gdmFsdWVcblxuICAgIHwgSU5QVVRfRkxPUCA9PlxuICAgICAgaWYgQGlucHV0LXN0YXRlLmZsb3AgPCB2YWx1ZVxuICAgICAgICBmbGlwZmxvcHBlci5zdGF0aWMtdG8tc3RhZ2UgMSwgdmFsdWVcbiAgICAgIGVsc2UgaWYgQGlucHV0LXN0YXRlLmZsb3AgPiB2YWx1ZVxuICAgICAgICBmbGlwZmxvcHBlci5zdGF0aWMtdG8tc3RhZ2UgMSwgdmFsdWVcbiAgICAgIEBpbnB1dC1zdGF0ZS5mbG9wICA9IHZhbHVlXG5cblxuICAjIE5vcm1hbGlzZSBYL1kgaW5wdXRcblxuICBpbnB1dC12ZWMgPSBbIEBpbnB1dC1zdGF0ZS5yYXcteCwgQGlucHV0LXN0YXRlLnJhdy15IF1cblxuICBub3JtYWwtdmVjID1cbiAgICBpZiBpbnB1dC12ZWMuMSA+IDBcbiAgICAgIHYyLm5vcm0gaW5wdXQtdmVjXG4gICAgZWxzZVxuICAgICAgzrggPSBNYXRoLmF0YW4yIC1AaW5wdXQtc3RhdGUucmF3LXksIE1hdGguYWJzIEBpbnB1dC1zdGF0ZS5yYXcteFxuICAgICAgzrEgPSB0YXUvMiAtIHRhdS84XG4gICAgICBtYWcgPSBzaW4ozrEpIC8gc2luKM6xIC0gzrgpXG4gICAgICAodjIubm9ybSBpbnB1dC12ZWMpIGB2Mi5zY2FsZWAgbWFnXG5cbiAgQGlucHV0LXN0YXRlLnggPSBub3JtYWwtdmVjLjBcbiAgQGlucHV0LXN0YXRlLnkgPSBub3JtYWwtdmVjLjFcblxuICBwbGF5ZXItdmVsID0gbm9ybWFsLXZlYyBgdjIuc2NhbGVgIG1heC1zcGVlZFxuXG4gIEBwbGF5ZXIucG9zLjAgKz0gcGxheWVyLXZlbC4wICogQM6UdFxuXG4gIGlmIG5vdCBFWFBfU1RSSUNUX1RJTUVfQklORElOR1xuICAgIEBwbGF5ZXIucG9zLjEgKz0gcGxheWVyLXZlbC4xICogQM6UdFxuXG5cbiAgIyBUcmF2ZWwgZm9yd2FyZCBpbmV4b3JhYmx5XG5cbiAgaWYgRVhQX1NUUklDVF9USU1FX0JJTkRJTkdcbiAgICBAdGltZS1mYWN0b3IgPSAwLjUgKyBub3JtYWwtdmVjLjEgLyAyXG5cbiAgQHBsYXllci5wb3MuMSArPSBhdXRvLXRyYXZlbC1zcGVlZCAqIEDOlHRcblxuICBmb3IgdGFyZ2V0IGluIEB0YXJnZXRzXG4gICAgdGFyZ2V0LnBvcy4xICs9IGF1dG8tdHJhdmVsLXNwZWVkICogQM6UdFxuXG5cbiAgI1xuICAjIEZsaXBmbG9wcGluZ1xuICAjXG5cbiAgQHBsYXllci5yb3RhdGlvbiA9IGZsaXBmbG9wcGVyLnJvdGF0aW9uXG4gIEBwbGF5ZXIuY29sb3IgPSByb3RhdGlvbi10by1jb2xvciBAcGxheWVyLnJvdGF0aW9uXG4gIHBsYXllci1zcHJpdGUuaW5kZXggPSByb3RhdGlvbi10by1zcHJpdGUtaW5kZXggQHBsYXllci5yb3RhdGlvbiwgcGxheWVyLXNwcml0ZS5mcmFtZXNcblxuICBkZWJ1Zy12aXMucHVzaC1yb3RhdGlvbi1oaXN0b3J5IEBwbGF5ZXIucm90YXRpb25cblxuXG4gICNcbiAgIyBGaXJpbmdcbiAgI1xuXG4gIGlmIEVYUF9GSVJFX01PREVfSUtBUlVHQVxuICAgIGlmIGdhbWUtc3RhdGUucGxheWVyLmNvbG9yICUgMyBpcyAxXG4gICAgICBuZXctZmlyZS1tb2RlID0gRklSRV9NT0RFX0JMRU5EXG4gICAgICBmaXJlLXRpbWVyLWZhY3RvciA9IDJcbiAgICBlbHNlXG4gICAgICBuZXctZmlyZS1tb2RlID0gRklSRV9NT0RFX0FMVEVSTkFURVxuICAgICAgZmlyZS10aW1lci1mYWN0b3IgPSAxXG5cbiAgICBpZiBAZmlyZS1tb2RlIGlzbnQgbmV3LWZpcmUtbW9kZVxuICAgICAgaWYgbmV3LWZpcmUtbW9kZSBpcyBGSVJFX01PREVfQUxURVJOQVRFXG4gICAgICAgIFRpbWVyLnJlc2V0IEB0aW1lcnMuYXV0by1maXJlLXRpbWVyXG5cbiAgICBAdGltZXJzLmF1dG8tZmlyZS10aW1lci50YXJnZXQgPSBhdXRvLWZpcmUtc3BlZWQgKiBmaXJlLXRpbWVyLWZhY3RvclxuICAgIEBmaXJlLW1vZGUgPSBuZXctZmlyZS1tb2RlXG5cbiAgICBpZiBuZXctZmlyZS1tb2RlIGlzIEZJUkVfTU9ERV9BTFRFUk5BVEVcbiAgICAgIGlmIEB0aW1lcnMuYXV0by1maXJlLXRpbWVyLmVsYXBzZWQgYW5kIEBpbnB1dC1zdGF0ZS5maXJlXG4gICAgICAgICAgc2hvb3QtYnktcm90YXRpb24hXG5cbiAgaWYgRVhQX0ZJUkVfTU9ERV9SQURJQU5UXG4gICAgaWYgQGZpcmUtbW9kZSBpcyBGSVJFX01PREVfQUxURVJOQVRFXG4gICAgICBpZiBAdGltZXJzLmF1dG8tZmlyZS10aW1lci5lbGFwc2VkIGFuZCAoQGlucHV0LXN0YXRlLnJlZCBvciBAaW5wdXQtc3RhdGUuYmx1ZSBvciBAaW5wdXQtc3RhdGUuZ3JlZW4pXG4gICAgICAgIHNob290LWJ5LWlucHV0IVxuXG5cbiAgI1xuICAjIE1vdmUgYnVsbGV0c1xuICAjXG5cbiAgQHBsYXllci1idWxsZXRzIC49IGZpbHRlciAoLnVwZGF0ZSBAzpR0KS5iaW5kIHRoaXNcblxuICAjIENoZWNrIGNvbGxpc2lvbnNcbiAgY29sb3Itc3VtID0gKGNvbG9yKSAtPlxuICAgIGNvbG9yLjAgKyBjb2xvci4xICsgY29sb3IuMlxuXG4gIEB0YXJnZXRzIC49IGZpbHRlciAodGFyZ2V0LCBpKSB+PlxuICAgIHRhcmdldC51cGRhdGUgQM6UdFxuXG4gICAgZm9yIGJ1bGxldCBpbiBAcGxheWVyLWJ1bGxldHNcbiAgICAgIGRpc3QgPSAodGFyZ2V0LnBvcyBgdjIuZGlzdGAgYnVsbGV0LnBvcylcblxuICAgICAgaWYgZGlzdCA8PSAodGFyZ2V0LnJhZGl1cyArIGJ1bGxldC5yYWRpdXMpXG4gICAgICAgIHRhcmdldC12YWx1ZSA9IGNvbG9yLXN1bSB0YXJnZXQuY29sb3JcbiAgICAgICAgYnVsbGV0LXZhbHVlID0gY29sb3Itc3VtIGJ1bGxldC5jb2xvclxuXG4gICAgICAgIGFkZGl0aXZlLWJvbnVzID0gY29sb3Itc3VtIFtcbiAgICAgICAgICB0YXJnZXQuY29sb3IuMCAqIGJ1bGxldC5jb2xvci4wLFxuICAgICAgICAgIHRhcmdldC5jb2xvci4xICogYnVsbGV0LmNvbG9yLjEsXG4gICAgICAgICAgdGFyZ2V0LmNvbG9yLjIgKiBidWxsZXQuY29sb3IuMlxuICAgICAgICBdXG5cbiAgICAgICAgZGFtYWdlLWJvbnVzID0gYWRkaXRpdmUtYm9udXMvdGFyZ2V0LXZhbHVlICogYnVsbGV0LXZhbHVlXG4gICAgICAgIGRhbWFnZSA9ICgxICsgZGFtYWdlLWJvbnVzKSAqIGJ1bGxldC5wb3dlclxuXG4gICAgICAgIHRhcmdldC5kYW1hZ2UgZGFtYWdlXG4gICAgICAgIGJ1bGxldC5wb3dlciAtPSBkYW1hZ2VcblxuICAgICAgICBpZiBidWxsZXQucG93ZXIgPD0gMFxuICAgICAgICAgIGJ1bGxldC5saWZlID0gMFxuXG4gICAgdGFyZ2V0LmhlYWx0aCA+PSAwXG5cblxuICAjXG4gICMgQ2FtZXJhIHRyYWNraW5nXG4gICNcblxuICBAY2FtZXJhLXBvcy4xID0gQHBsYXllci5wb3MuMSArIDIwMFxuXG4gIGlmIExFUlBfQ0FNRVJBX1hcbiAgICBAY2FtZXJhLXBvcy4wID0gbGVycCAyMCAqIEDOlHQsIEBjYW1lcmEtcG9zLjAsIEBwbGF5ZXIucG9zLjBcblxuICBlbHNlXG4gICAgaWYgQGNhbWVyYS1wb3MuMCAtIEBwbGF5ZXIucG9zLjAgPiBjYW1lcmEtZHJpZnQtbGltaXRcbiAgICAgIEBjYW1lcmEtcG9zLjAgLT0gKEBjYW1lcmEtcG9zLjAgLSBAcGxheWVyLnBvcy4wIC0gY2FtZXJhLWRyaWZ0LWxpbWl0KVxuXG4gICAgaWYgQHBsYXllci5wb3MuMCAtIEBjYW1lcmEtcG9zLjAgPiBjYW1lcmEtZHJpZnQtbGltaXRcbiAgICAgIEBjYW1lcmEtcG9zLjAgKz0gKEBwbGF5ZXIucG9zLjAgLSBAY2FtZXJhLXBvcy4wIC0gY2FtZXJhLWRyaWZ0LWxpbWl0KVxuXG5cbiAgI1xuICAjIFNwYXduIGVuZW1pZXMgaWYgbmVjZXNzYXJ5XG4gICNcblxuICBpZiBAdGFyZ2V0cy5sZW5ndGggaXMgMFxuICAgIHNwYXduIVxuXG5cblxuI1xuIyBJTklUXG4jXG5cbmdsb2JhbC5mcmFtZS1kcml2ZXIgPSBuZXcgRnJhbWVEcml2ZXJcbmZyYW1lLWRyaXZlci5vbi1mcmFtZSByZW5kZXIuYmluZCBnYW1lLXN0YXRlXG5mcmFtZS1kcml2ZXIub24tdGljayB1cGRhdGUuYmluZCBnYW1lLXN0YXRlXG5mcmFtZS1kcml2ZXIuc3RhcnQhXG5cblxuIyBJbml0IC0gYXNzaWduXG5cbm1haW4tY2FudmFzLmluc3RhbGwgIGRvY3VtZW50LmJvZHlcbmRlYnVnLXZpcy5pbnN0YWxsIGRvY3VtZW50LmJvZHlcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nLCBtaW4sIG1heCwgc2luLCBjb3MsIHRhdSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiNcbiMgR2FtZXBhZCBDb250cm9sbGVyXG4jXG5cbmV4cG9ydCBjbGFzcyBBdXRvbWF0ZWRDb250cm9sbGVyXG5cbiAgcmFkaXVzID0gMS41XG4gIGxpbWl0ID0gLT4gbWF4IC0xLjUsIG1pbiAxLjUsIGl0XG5cbiAgKEBjYWxsYmFjayA9IGlkKSAtPlxuICAgIEBzdGF0ZSA9XG4gICAgICBidXR0b25zOiBbIDAgXSAqIDE2XG4gICAgICBheGVzOiAgICBbIDAgXSAqIDRcblxuICBwcm94eS1ldmVudDogKGJpbmRpbmcsIHZhbHVlKSAtPlxuICAgIEBjYWxsYmFjayBiaW5kaW5nLCB2YWx1ZVxuXG4gIHVwZGF0ZTogKM6UdCwgdCkgLT5cbiAgICB0ID0gMip0XG4gICAgQHByb3h5LWV2ZW50IElOUFVUX1gsIGxpbWl0IHNpbiB0XG4gICAgQHByb3h5LWV2ZW50IElOUFVUX1ksIGxpbWl0IGNvcyB0XG4gICAgQHByb3h5LWV2ZW50IElOUFVUX1JBV19YLCBsaW1pdCAoc2luIHQpICogcmFkaXVzXG4gICAgQHByb3h5LWV2ZW50IElOUFVUX1JBV19ZLCBsaW1pdCAoY29zIHQpICogcmFkaXVzXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5jb25zdCBOT19CSU5ESU5HID0gU3ltYm9sIFxcbm8tYmluZGluZ1xuXG5cbiMgSW5wdXQgY29kZXMgKHhib3gpXG5cbmNvbnN0IEJVVFRPTl9BICAgICAgICAgID0gMFxuY29uc3QgQlVUVE9OX0IgICAgICAgICAgPSAxXG5jb25zdCBCVVRUT05fWCAgICAgICAgICA9IDJcbmNvbnN0IEJVVFRPTl9ZICAgICAgICAgID0gM1xuY29uc3QgTEVGVF9UUklHR0VSICAgICAgPSA2XG5jb25zdCBSSUdIVF9UUklHR0VSICAgICA9IDdcbmNvbnN0IExFRlRfQlVNUEVSICAgICAgID0gNFxuY29uc3QgUklHSFRfQlVNUEVSICAgICAgPSA1XG5jb25zdCBCVVRUT05fU0VMRUNUICAgICA9IDhcbmNvbnN0IEJVVFRPTl9TVEFSVCAgICAgID0gOVxuY29uc3QgTEVGVF9TVElDS19DTElDSyAgPSAxMFxuY29uc3QgUklHSFRfU1RJQ0tfQ0xJQ0sgPSAxMVxuY29uc3QgRFBBRF9UT1AgICAgICAgICAgPSAxMlxuY29uc3QgRFBBRF9CT1RUT00gICAgICAgPSAxM1xuY29uc3QgRFBBRF9MRUZUICAgICAgICAgPSAxNFxuY29uc3QgRFBBRF9SSUdIVCAgICAgICAgPSAxNVxuXG5jb25zdCBMRUZUX1NUSUNLX1ggICAgICA9IDBcbmNvbnN0IExFRlRfU1RJQ0tfWSAgICAgID0gMVxuY29uc3QgUklHSFRfU1RJQ0tfWCAgICAgPSAyXG5jb25zdCBSSUdIVF9TVElDS19ZICAgICA9IDNcblxuXG4jIEtleSBsYXlvdXQgKHhib3gpXG5cbmZsaXBmbG9wLWJpbmRpbmcgPSBuZXcgTWFwXG4gIC4uc2V0IEJVVFRPTl9BLCAgICAgIElOUFVUX0ZJUkVcbiAgLi5zZXQgQlVUVE9OX1ksICAgICAgSU5QVVRfU1VQRVJcbiAgLi5zZXQgQlVUVE9OX0IsICAgICAgSU5QVVRfU1BFQ0lBTFxuICAuLnNldCBMRUZUX1RSSUdHRVIsICBJTlBVVF9GTElQXG4gIC4uc2V0IFJJR0hUX1RSSUdHRVIsIElOUFVUX0ZMT1BcbiAgLi5zZXQgQlVUVE9OX1NUQVJULCAgSU5QVVRfUEFVU0VcblxucmFkaWFudC1iaW5kaW5nID0gbmV3IE1hcFxuICAuLnNldCBCVVRUT05fQSwgICAgICBJTlBVVF9HUkVFTlxuICAuLnNldCBCVVRUT05fWCwgICAgICBJTlBVVF9CTFVFXG4gIC4uc2V0IEJVVFRPTl9CLCAgICAgIElOUFVUX1JFRFxuICAuLnNldCBMRUZUX1RSSUdHRVIsICBJTlBVVF9ST0xMX0xFRlRcbiAgLi5zZXQgUklHSFRfVFJJR0dFUiwgSU5QVVRfUk9MTF9SSUdIVFxuICAuLnNldCBCVVRUT05fU1RBUlQsICBJTlBVVF9QQVVTRVxuXG5heGlzLWJpbmRpbmdzID0gbmV3IE1hcFxuICAuLnNldCBMRUZUX1NUSUNLX1gsICBJTlBVVF9SQVdfWFxuICAuLnNldCBMRUZUX1NUSUNLX1ksICBJTlBVVF9SQVdfWVxuXG5rZXktYmluZGluZ3MgPVxuICBpZiBFWFBfRklSRV9NT0RFX1JBRElBTlRcbiAgICByYWRpYW50LWJpbmRpbmdcbiAgZWxzZVxuICAgIGZsaXBmbG9wLWJpbmRpbmdcblxuXG4jXG4jIEdhbWVwYWQgQ29udHJvbGxlclxuI1xuXG5leHBvcnQgY2xhc3MgR2FtZXBhZENvbnRyb2xsZXJcblxuICAoQGNhbGxiYWNrID0gaWQpIC0+XG4gICAgQHN0YXRlID1cbiAgICAgIGJ1dHRvbnM6IFsgMCBdICogMTZcbiAgICAgIGF4ZXM6ICAgIFsgMCBdICogNFxuXG4gIHByb3h5LWV2ZW50OiAodmFsdWUsIGJpbmRpbmcpIC0+XG4gICAgQGNhbGxiYWNrIGJpbmRpbmcsIHZhbHVlXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIGdhbWVwYWQgPSBuYXZpZ2F0b3IuZ2V0LWdhbWVwYWRzITBcblxuICAgIGlmIGdhbWVwYWRcbiAgICAgIGZvciBidXR0b24sIHdoaWNoIGluIGdhbWVwYWQuYnV0dG9uc1xuICAgICAgICBpZiBidXR0b24udmFsdWUgaXNudCBAc3RhdGUuYnV0dG9uc1t3aGljaF1cbiAgICAgICAgICBsb2cgJ0dhbWVwYWQ6Jywgd2hpY2gsIGtleS1iaW5kaW5ncy5nZXQgd2hpY2hcbiAgICAgICAgICBAcHJveHktZXZlbnQgYnV0dG9uLnZhbHVlLCBrZXktYmluZGluZ3MuZ2V0IHdoaWNoXG4gICAgICAgICAgQHN0YXRlLmJ1dHRvbnNbd2hpY2hdID0gYnV0dG9uLnZhbHVlXG5cbiAgICAgIGZvciByYXcsIHdoaWNoIGluIGdhbWVwYWQuYXhlc1xuICAgICAgICBkZWFkICA9IC1HQU1FUEFEX0FYSVNfREVBRFpPTkUgPCByYXcgPCBHQU1FUEFEX0FYSVNfREVBRFpPTkVcbiAgICAgICAgdmFsdWUgPSBpZiBkZWFkIHRoZW4gMCBlbHNlIHJhd1xuICAgICAgICB2YWx1ZSA9IGlmIHdoaWNoIGlzIExFRlRfU1RJQ0tfWSB0aGVuIC12YWx1ZSBlbHNlIHZhbHVlXG5cbiAgICAgICAgaWYgdmFsdWUgaXNudCBAc3RhdGUuYXhlc1t3aGljaF1cbiAgICAgICAgICBAcHJveHktZXZlbnQgdmFsdWUsIGF4aXMtYmluZGluZ3MuZ2V0IHdoaWNoXG4gICAgICAgICAgQHN0YXRlLmF4ZXNbd2hpY2hdID0gdmFsdWVcblxuIiwiXG4jIFJlcXVpcmVcblxueyBpZCwgbG9nIH0gPSByZXF1aXJlIFxcc3RkXG5cblRpbWVyID0gcmVxdWlyZSBcXC4uL3RpbWVyXG5cbnsgR2FtZXBhZENvbnRyb2xsZXIgfSAgID0gcmVxdWlyZSBcXC4vZ2FtZXBhZFxueyBLZXlib2FyZENvbnRyb2xsZXIgfSAgPSByZXF1aXJlIFxcLi9rZXlib2FyZFxueyBBdXRvbWF0ZWRDb250cm9sbGVyIH0gPSByZXF1aXJlIFxcLi9hdXRvbWF0ZWRcblxuXG4jXG4jIElucHV0IE1hbmFnZXJcbiNcblxuZXhwb3J0IGNsYXNzIElucHV0XG5cbiAgLT5cbiAgICBAcGVuZGluZy1ldmVudHMgPSBbIF1cblxuICAgIEBrZXlib2FyZCA9IG5ldyBLZXlib2FyZENvbnRyb2xsZXIgIEBwdXNoLWV2ZW50XG4gICAgQGdhbWVwYWQgID0gbmV3IEdhbWVwYWRDb250cm9sbGVyICAgQHB1c2gtZXZlbnRcbiAgICBAYXV0byAgICAgPSBuZXcgQXV0b21hdGVkQ29udHJvbGxlciBAcHVzaC1ldmVudFxuXG4gIHVwZGF0ZTogKM6UdCwgdCkgLT5cbiAgICAjQGF1dG8udXBkYXRlICAgICDOlHQsIHRcbiAgICBAa2V5Ym9hcmQudXBkYXRlIM6UdCwgdFxuICAgIEBnYW1lcGFkLnVwZGF0ZSAgzpR0LCB0XG5cbiAgcHVzaC1ldmVudDogKHR5cGUsIHZhbHVlKSB+PlxuICAgIEBwZW5kaW5nLWV2ZW50cy5wdXNoIFsgdHlwZSwgdmFsdWUgXVxuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuVGltZXIgPSByZXF1aXJlIFxcLi4vdGltZXJcblxuXG4jIFJlZmVyZW5jZSBDb25zdGFudHNcblxuY29uc3QgRU5URVIgID0gMTNcbmNvbnN0IFNQQUNFICA9IDMyXG5jb25zdCBFU0NBUEUgPSAyN1xuY29uc3QgS0VZX0EgID0gNjVcbmNvbnN0IEtFWV9DICA9IDY3XG5jb25zdCBLRVlfRCAgPSA2OFxuY29uc3QgS0VZX0UgID0gNjlcbmNvbnN0IEtFWV9RICA9IDgxXG5jb25zdCBLRVlfUyAgPSA4M1xuY29uc3QgS0VZX1cgID0gODdcbmNvbnN0IEtFWV9YICA9IDg4XG5jb25zdCBLRVlfWiAgPSA5MFxuY29uc3QgTEVGVCAgID0gMzdcbmNvbnN0IFJJR0hUICA9IDM5XG5jb25zdCBVUCAgICAgPSAzOFxuY29uc3QgRE9XTiAgID0gNDBcblxuY29uc3QgVFJJR0dFUl9ESVJfU1RBQkxFICA9IFN5bWJvbCBcXHRyaWdnZXItZGlyZWN0aW9uLXN0YWJsZVxuY29uc3QgVFJJR0dFUl9ESVJfUFJFU1MgICA9IFN5bWJvbCBcXHRyaWdnZXItZGlyZWN0aW9uLXByZXNzXG5jb25zdCBUUklHR0VSX0RJUl9SRUxFQVNFID0gU3ltYm9sIFxcdHJpZ2dlci1kaXJlY3Rpb24tcmVsZWFzZVxuXG5cbiNcbiMgS2V5Ym9hcmQgQ29udHJvbGxlclxuI1xuXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmRDb250cm9sbGVyXG5cbiAgc2ltdWxhdGVkLXRyYXZlbC10aW1lID0gMC4wNSAqIDJcblxuICAoQGNhbGxiYWNrID0gaWQpIC0+XG5cbiAgICBAc2ltLXRyaWdnZXJzID1cbiAgICAgICogdHlwZTogSU5QVVRfRkxJUFxuICAgICAgICBkaXI6ICBUUklHR0VSX0RJUl9TVEFCTEVcbiAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgdGltZXI6IFRpbWVyLmNyZWF0ZSBzaW11bGF0ZWQtdHJhdmVsLXRpbWUsIGRpc2FibGVkOiB5ZXNcblxuICAgICAgKiB0eXBlOiBJTlBVVF9GTE9QXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICAgIGRpcjogIFRSSUdHRVJfRElSX1NUQUJMRVxuICAgICAgICB0aW1lcjogVGltZXIuY3JlYXRlIHNpbXVsYXRlZC10cmF2ZWwtdGltZSwgZGlzYWJsZWQ6IHllc1xuXG4gICAgQGN1cnNvci1zdGF0ZSA9XG4gICAgICB1cDogICAgb2ZmXG4gICAgICBkb3duOiAgb2ZmXG4gICAgICBsZWZ0OiAgb2ZmXG4gICAgICByaWdodDogb2ZmXG5cbiAgICBkb2N1bWVudC5hZGQtZXZlbnQtbGlzdGVuZXIgXFxrZXlkb3duLCBAaGFuZGxlLWtleSBvblxuICAgIGRvY3VtZW50LmFkZC1ldmVudC1saXN0ZW5lciBcXGtleXVwLCAgIEBoYW5kbGUta2V5IG9mZlxuXG4gIHByb3h5LWV2ZW50OiAodHlwZSwgdmFsdWUpIC0+XG4gICAgQGNhbGxiYWNrIHR5cGUsIHZhbHVlXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIGZvciB0cmlnZ2VyIGluIEBzaW0tdHJpZ2dlcnNcbiAgICAgIFRpbWVyLnVwZGF0ZS1hbmQtc3RvcCB0cmlnZ2VyLnRpbWVyLCDOlHRcbiAgICAgIHAgPSB0cmlnZ2VyLnRpbWVyLmN1cnJlbnQgLyBzaW11bGF0ZWQtdHJhdmVsLXRpbWVcblxuICAgICAgaWYgdHJpZ2dlci52YWx1ZSBpc250IHBcbiAgICAgICAgaWYgdHJpZ2dlci5kaXIgaXMgVFJJR0dFUl9ESVJfUkVMRUFTRVxuICAgICAgICAgIEBwcm94eS1ldmVudCB0cmlnZ2VyLnR5cGUsIHRyaWdnZXIudGltZXIudGFyZ2V0L3NpbXVsYXRlZC10cmF2ZWwtdGltZSAtIHBcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEBwcm94eS1ldmVudCB0cmlnZ2VyLnR5cGUsIHBcblxuICAgICAgaWYgdHJpZ2dlci5lbGFwc2VkIGFuZCB0cmlnZ2VyLmRpciBpcyBUUklHR0VSX0RJUl9SRUxFQVNFXG4gICAgICAgIHRyaWdnZXIuZGlyID0gVFJJR0dFUl9ESVJFQ1RJT05fU1RBQkxFXG5cbiAgICAgIHRyaWdnZXIudmFsdWUgPSBwXG5cbiAgaGFuZGxlLWtleTogKGRpcikgLT4gKHsgd2hpY2ggfTpldmVudCkgfj5cbiAgICBpZiBldmVudC5zaGlmdC1rZXkgdGhlbiBsb2cgd2hpY2hcbiAgICBpZiBub3QgQGRpc3BhdGNoLWtleS1yZXNwb25zZSBkaXIsIHdoaWNoXG4gICAgICByZXR1cm4gZXZlbnRcbiAgICBldmVudC5wcmV2ZW50LWRlZmF1bHQhXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgZGlzcGF0Y2gta2V5LXJlc3BvbnNlOiAoZGlyLCB3aGljaCkgLT5cbiAgICBzd2l0Y2ggd2hpY2hcbiAgICB8IEtFWV9aICA9PiBAc2ltdWxhdGUtdHJpZ2dlciAgMCwgZGlyLCAxXG4gICAgfCBLRVlfQyAgPT4gQHNpbXVsYXRlLXRyaWdnZXIgIDEsIGRpciwgMVxuICAgIHwgS0VZX0EgID0+IEBzaW11bGF0ZS10cmlnZ2VyICAwLCBkaXIsIDAuNVxuICAgIHwgS0VZX0QgID0+IEBzaW11bGF0ZS10cmlnZ2VyICAxLCBkaXIsIDAuNVxuICAgIHwgS0VZX1MgID0+IEBwcm94eS1ldmVudCBJTlBVVF9GSVJFLCAgZGlyXG4gICAgfCBLRVlfWCAgPT4gQHByb3h5LWV2ZW50IElOUFVUX0ZJUkUsICBkaXJcbiAgICB8IEtFWV9XICA9PiBAcHJveHktZXZlbnQgSU5QVVRfU1VQRVIsIGRpclxuICAgIHwgVVAgICAgID0+IEBjdXJzb3ItdmVsb2NpdHkteSBcXHVwLCAgICBkaXJcbiAgICB8IERPV04gICA9PiBAY3Vyc29yLXZlbG9jaXR5LXkgXFxkb3duLCAgZGlyXG4gICAgfCBMRUZUICAgPT4gQGN1cnNvci12ZWxvY2l0eS14IFxcbGVmdCwgIGRpclxuICAgIHwgUklHSFQgID0+IEBjdXJzb3ItdmVsb2NpdHkteCBcXHJpZ2h0LCBkaXJcbiAgICB8IEVTQ0FQRSA9PiBAcHJveHktZXZlbnQgSU5QVVRfUEFVU0UsIChpZiBkaXIgdGhlbiBmcmFtZS1kcml2ZXIudG9nZ2xlISlcblxuICBjdXJzb3ItdmVsb2NpdHkteDogKGtleSwgZGlyKSAtPlxuICAgIEBjdXJzb3Itc3RhdGVba2V5XSA9IGRpclxuICAgIHZhbHVlID0gQGN1cnNvci1zdGF0ZS5yaWdodCAtIEBjdXJzb3Itc3RhdGUubGVmdFxuICAgIEBwcm94eS1ldmVudCBJTlBVVF9SQVdfWCwgdmFsdWVcbiAgICBAcHJveHktZXZlbnQgSU5QVVRfWCwgdmFsdWVcblxuICBjdXJzb3ItdmVsb2NpdHkteTogKGtleSwgZGlyKSAtPlxuICAgIEBjdXJzb3Itc3RhdGVba2V5XSA9IGRpclxuICAgIHZhbHVlID0gQGN1cnNvci1zdGF0ZS51cCAtIEBjdXJzb3Itc3RhdGUuZG93blxuICAgIEBwcm94eS1ldmVudCBJTlBVVF9SQVdfWSwgdmFsdWVcbiAgICBAcHJveHktZXZlbnQgSU5QVVRfWSwgdmFsdWVcblxuICBzaW11bGF0ZTogKHRyaWdnZXIsIHRhcmdldCwgZGlyKSAtPlxuICAgIGRpcmVjdGlvbiA9IGlmIGRpciB0aGVuIFRSSUdHRVJfRElSX1BSRVNTIGVsc2UgVFJJR0dFUl9ESVJfUkVMRUFTRVxuICAgIHRyaWdnZXIudGltZXIudGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICBpZiAoZGlyZWN0aW9uIGlzbnQgdHJpZ2dlci5kaXIpXG4gICAgICBpZiB0cmlnZ2VyLnRpbWVyLmFjdGl2ZVxuICAgICAgICB0cmlnZ2VyLnRpbWVyLmN1cnJlbnQgPSB0cmlnZ2VyLnRpbWVyLnRhcmdldCAtIHRyaWdnZXIudGltZXIuY3VycmVudFxuICAgICAgZWxzZVxuICAgICAgICBUaW1lci5yZXNldCB0cmlnZ2VyLnRpbWVyXG4gICAgICB0cmlnZ2VyLmRpciA9IGRpcmVjdGlvblxuXG4gIHNpbXVsYXRlLXRyaWdnZXI6IChzaWRlLCBkaXIsIG11bHQgPSAyKSAtPlxuICAgIEBzaW11bGF0ZSBAc2ltLXRyaWdnZXJzW3NpZGVdLCBzaW11bGF0ZWQtdHJhdmVsLXRpbWUgKiBtdWx0LCBkaXJcblxuIiwiXG5leHBvcnQgY2xhc3MgTGltaXRlZEFycmF5XG5cbiAgKEBsaW1pdCkgLT5cbiAgICBAYnVmZmVyID0gW11cblxuICBwdXNoOiAobikgLT5cbiAgICBAYnVmZmVyLnB1c2ggblxuICAgIGlmIEBidWZmZXIubGVuZ3RoID4gQGxpbWl0XG4gICAgICBAYnVmZmVyLnNoaWZ0IVxuXG4gIHVuc2hpZnQ6IChuKSAtPlxuICAgIEBidWZmZXIudW5zaGlmdCBuXG4gICAgaWYgQGJ1ZmZlci5sZW5ndGggPiBAbGltaXRcbiAgICAgIEBidWZmZXIucG9wIVxuXG4gIHBvcDogLT4gQGJ1ZmZlci5wb3AhXG5cbiAgc2hpZnQ6IC0+IEBidWZmZXIuc2hpZnQhXG5cbiAgaXRlbXM6fiAtPiBAYnVmZmVyXG5cbiAgbGVuZ3RoOn4gLT4gQGJ1ZmZlci5sZW5ndGhcblxuICBzcGFjZS1hdmFpbGFibGU6fiAtPiBAYnVmZmVyLmxlbmd0aCA8IEBsaW1pdFxuXG4iLCJcbnsgaWQsIGxvZywgbGVycCwgZmxvb3IsIHJhbmRvbS1yYW5nZSB9ID0gcmVxdWlyZSBcXHN0ZFxuXG57IExpbWl0ZWRBcnJheSB9ID0gcmVxdWlyZSBcXC4vbGltaXRlZC1hcnJheVxuXG5cbmV4cG9ydCBjbGFzcyBSYW5kb21TdHJlYW1cblxuICAoeyBAbWluLCBAbWF4LCBAYnVmZmVyLXNpemUgPSAxMCwgQHNwZWVkID0gMSB9KSAtPlxuICAgIEBidWZmZXIgPSBuZXcgTGltaXRlZEFycmF5IEBidWZmZXItc2l6ZVxuICAgIEB0aW1lLXRvLW5leHQtdmFsdWUgPSAwXG5cbiAgZ2V0LXZhbHVlOiAtPlxuICAgIGxlcnAgQHRpbWUtdG8tbmV4dC12YWx1ZS9Ac3BlZWQsIEBidWZmZXIuaXRlbXNbMF0sIEBidWZmZXIuaXRlbXNbMV1cblxuICB1cGRhdGU6ICjOlHQpIC0+XG4gICAgQHRpbWUtdG8tbmV4dC12YWx1ZSArPSDOlHRcblxuICAgIGlmIEB0aW1lLXRvLW5leHQtdmFsdWUgPj0gQHNwZWVkXG4gICAgICBAdGltZS10by1uZXh0LXZhbHVlICU9IEBzcGVlZFxuICAgICAgQGJ1ZmZlci5zaGlmdCFcblxuICAgIGlmIEBidWZmZXIuc3BhY2UtYXZhaWxhYmxlXG4gICAgICBAYnVmZmVyLnB1c2ggcmFuZG9tLXJhbmdlIEBtaW4sIEBtYXhcblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuXG4jXG4jIEEgc291bmQgZWZmZWN0IGxvYWRlZCBmcm9tIGEgVVJMXG4jXG5cbmV4cG9ydCBjbGFzcyBTb3VuZFxuXG4gIGxvYWQtYXVkaW8gPSAoY29udGV4dCwgdXJsLCDOuykgLT5cblxuICAgIGlmIERFQlVHX0RJU0FCTEVfQVVESU8gdGhlbiByZXR1cm4gzrsgbnVsbCwgQVNTRVRfTE9BRF9DT01QTEVURVxuXG4gICAgb24tZGVjb2RlLWF1ZGlvID0gKGJ1ZmZlcikgLT5cbiAgICAgIGlmICFidWZmZXJcbiAgICAgICAgd2FybiBcIlNPTUVUSElORyBXUk9ORyAtIGNhbid0IGxvYWQgI3VybFwiXG4gICAgICAgIM67IGJ1ZmZlciwgQVNTRVRfTE9BRF9GQUlMRURcbiAgICAgIGVsc2VcbiAgICAgICAgzrsgYnVmZmVyLCBBU1NFVF9MT0FEX0NPTVBMRVRFXG5cbiAgICBvbi1kZWNvZGUtZmFpbGVkID0gLT5cbiAgICAgIGxvZyBcIkVSUk9SIERFQ09ESU5HICN1cmxcIlxuICAgICAgzrsgdm9pZCwgQVNTRVRfTE9BRF9GQUlMRURcblxuICAgIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdFxuICAgIHJlcS5vcGVuIFxcR0VULCB1cmwsIHRydWVcbiAgICByZXEucmVzcG9uc2UtdHlwZSA9IFxcYXJyYXlidWZmZXJcbiAgICByZXEub25sb2FkID0gLT5cbiAgICAgIGxvZyByZXEucmVzcG9uc2VcbiAgICAgIGNvbnRleHQuZGVjb2RlLWF1ZGlvLWRhdGEgcmVxLnJlc3BvbnNlLCBvbi1kZWNvZGUtYXVkaW8sIG9uLWRlY29kZS1mYWlsZWRcbiAgICByZXEub25lcnJvciA9IC0+IM67IGJ1ZmZlciwgQVNTRVRfTE9BRF9GQUlMRURcbiAgICByZXEuc2VuZCFcblxuXG4gIChAdXJsLCBAY3R4KSAtPlxuXG4gICAgbG9nIEBidWZmZXIgPSBAY3R4LmNyZWF0ZS1idWZmZXIgMiwgMiwgNDQxMDBcblxuICAgIGxvYWQtYXVkaW8gQGN0eCwgQHVybCwgKGJ1ZmZlciwgc3RhdHVzKSB+PlxuICAgICAgaWYgc3RhdHVzIGlzIEFTU0VUX0xPQURfQ09NUExFVEVcbiAgICAgICAgQGJ1ZmZlciA9IGJ1ZmZlclxuXG4gIGxvYWQ6ICh1cmwpIC0+XG5cblxuIiwiXG57IGlkLCBsb2cgfSA9IHJlcXVpcmUgXFxzdGRcblxuXG4jXG4jIFNwcml0ZVxuI1xuXG5leHBvcnQgY2xhc3MgU3ByaXRlXG5cbiAgKHNyYywgWyB3aWR0aCwgaGVpZ2h0IF0sIGZyYW1lcykgLT5cblxuICAgIGltYWdlID0gbmV3IEltYWdlXG4gICAgaW1hZ2Uud2lkdGggID0gd2lkdGggKiBmcmFtZXNcbiAgICBpbWFnZS5oZWlnaHQgPSBoZWlnaHRcbiAgICBpbWFnZS5zcmMgICAgPSBzcmNcblxuICAgIEBpbmRleCAgPSAwXG4gICAgQHdpZHRoICA9IHdpZHRoXG4gICAgQGhlaWdodCA9IGhlaWdodFxuICAgIEBpbWFnZSAgPSBpbWFnZVxuICAgIEBmcmFtZXMgPSBmcmFtZXNcblxuICBibGl0LXRvOiAoY3R4KSAtPlxuXG5cblxuIiwiXG5leHBvcnQgaWQgPSAtPiBpdFxuXG5leHBvcnQgbG9nID0gLT4gY29uc29sZS5sb2cuYXBwbHkgY29uc29sZSwgJjsgJjBcblxuZXhwb3J0IHJhZiA9IHdpbmRvdy5yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZVxuXG5leHBvcnQgbGVycCA9IChhLCB0LCBiKSAtPiBhICsgdCAqIChiIC0gYSlcblxuZXhwb3J0IGZsb29yID0gTWF0aC5mbG9vclxuXG5leHBvcnQgc3FydCA9IE1hdGguc3FydFxuXG5leHBvcnQgYWJzID0gTWF0aC5hYnNcblxuZXhwb3J0IG1pbiA9IE1hdGgubWluXG5cbmV4cG9ydCBzaW4gPSBNYXRoLnNpblxuXG5leHBvcnQgY29zID0gTWF0aC5jb3NcblxuZXhwb3J0IG1heCA9IE1hdGgubWF4XG5cbmV4cG9ydCBhc2luID0gTWF0aC5hc2luXG5cbmV4cG9ydCB2MiA9XG4gIGh5cCAgIDogKHYpIC0+IHNxcnQgKHYuMCAqIHYuMCArIHYuMSAqIHYuMSlcbiAgbm9ybSAgOiAodikgLT4gZCA9IHYyLmh5cCB2OyBpZiBkIGlzIDAgdGhlbiBbMCAwXSBlbHNlIFsgdi4wL2QsIHYuMS9kIF1cbiAgYWRkICAgOiAoYSwgYikgLT4gWyBhLjAgKyBiLjAsIGEuMSArIGIuMSBdXG4gIHN1YiAgIDogKGEsIGIpIC0+IFsgYS4wIC0gYi4wLCBhLjEgLSBiLjEgXVxuICBzY2FsZSA6ICh2LCBmKSAtPiBbIHYuMCAqIGYsIHYuMSAqIGYgXVxuICBkaXN0ICA6IChhLCBiKSAtPiBzcXJ0IHYyLmRpc3QyIGEsIGJcbiAgZGlzdDIgOiAoYSwgYikgLT4geCA9IFtiLjAgLSBhLjBdOyB5ID0gW2IuMSAtIGEuMV07IHgqeCt5KnlcblxuZXhwb3J0IGJveCA9IChuKSAtPiBbIG4sIG4gXVxuXG5leHBvcnQgcm5kID0gKG4pIC0+IG4gKiBNYXRoLnJhbmRvbSFcblxuZXhwb3J0IGRpdiA9IChhLCBiKSAtPiBmbG9vciBhIC8gYlxuXG5leHBvcnQgcGkgPSBNYXRoLlBJXG5cbmV4cG9ydCB0YXUgPSBwaSAqIDJcblxuZXhwb3J0IGZsaXAgPSAozrspIC0+IChhLCBiKSAtPiDOuyBiLCBhXG5cbmV4cG9ydCBkZWxheSA9IGZsaXAgc2V0LXRpbWVvdXRcblxuZXhwb3J0IGxpbWl0ID0gKG1pbiwgbWF4LCBuKSAtLT4gaWYgbiA8IG1pbiB0aGVuIG1pbiBlbHNlIGlmIG4gPiBtYXggdGhlbiBtYXggZWxzZSBuXG5cbmV4cG9ydCB3cmFwID0gKG1pbiwgbWF4LCBuKSAtLT4gaWYgbiA8IG1pbiB0aGVuIG1heCBlbHNlIGlmIG4gPiBtYXggdGhlbiBtaW4gZWxzZSBuXG5cbmV4cG9ydCByYW5kb20tZnJvbSA9ICh4cykgLT4geHNbIGZsb29yIE1hdGgucmFuZG9tISAqIHhzLmxlbmd0aCBdXG5cbmV4cG9ydCByYW5kb20tcmFuZ2UgPSAoYSwgYikgLT4gYSArIChybmQgYiAtIGEpXG5cbmV4cG9ydCBpZHMgPSAtPiBpZiBpdCBpcyAwIHRoZW4gMCBlbHNlIDEgLyBpdCppdFxuXG5leHBvcnQgaWRkID0gLT4gaWYgaXQgaXMgMCB0aGVuIDAgZWxzZSAxIC8gaXRcblxuZXhwb3J0IGJhc2U2NCA9IChidWZmZXIsIG91dHB1dCA9IFwiXCIpIC0+XG4gIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoIGJ1ZmZlciApXG4gIGZvciBpIGZyb20gMCB0byBieXRlcy5ieXRlTGVuZ3RoID0+IG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlIGJ5dGVzW2ldXG4gIHdpbmRvdy5idG9hIG91dHB1dFxuXG5leHBvcnQgcGFkLXR3byA9IChzdHIpIC0+IGlmIHN0ci5sZW5ndGggPCAyIHRoZW4gXCIwI3N0clwiIGVsc2Ugc3RyXG5cbmV4cG9ydCBoZXggPSAoZGVjaW1hbCkgLT4gcGFkLXR3byAoZmxvb3IgZGVjaW1hbCkudG8tc3RyaW5nIDE2XG5cbmV4cG9ydCByZ2IgPSAoW3IsZyxiXSkgLT4gXCIjI3toZXggcioyNTV9I3toZXggZyoyNTV9I3toZXggYioyNTV9XCJcblxuZXhwb3J0IGxlcnAgPSAodCwgYSwgYikgLT4gYSArIHQgKiAoYiAtIGEpXG5cbmV4cG9ydCBlYXNlID0gKHQsIGEsIGIsIM67KSAtPiBhICsgKM67IHQpICogKGIgLSBhKVxuXG5cbiMgUGh5c2ljcyBwcm9jZXNzb3JzXG5cbmV4cG9ydCBwaHlzaWNzID0gKG8sIM6UdCkgLT5cbiAgZiA9IGlmIG8uZnJpY3Rpb24gdGhlbiB0aGF0IGVsc2UgMVxuICBvLnZlbCA9ICgoby5hY2MgYHYyLnNjYWxlYCDOlHQpIGB2Mi5hZGRgIG8udmVsKSBgdjIuc2NhbGVgIGZcbiAgby5wb3MgPSAoby52ZWwgYHYyLnNjYWxlYCDOlHQpIGB2Mi5hZGRgIG8ucG9zIGB2Mi5hZGRgIChvLmFjYyBgdjIuc2NhbGVgICgwLjUgKiDOlHQgKiDOlHQpKVxuXG5leHBvcnQgZGFtcGVuID0gKG8sIGRhbXAsIM6UdCkgLT5cbiAgby52ZWwgPSAoby52ZWwgYHYyLnNjYWxlYCBkYW1wKVxuICBvLnBvcyA9IChvLnZlbCBgdjIuc2NhbGVgIM6UdCkgYHYyLmFkZGAgby5wb3NcblxuXG4jIFNwZWNpYWwgbG9nZ2luZ1xuXG5jb2xvci1sb2cgPSAoY29sKSAtPiAodGV4dCwgLi4ucmVzdCkgLT5cbiAgbG9nIFxcJWMgKyB0ZXh0LCBcImNvbG9yOiAjY29sXCIsIC4uLnJlc3RcblxucmVkLWxvZyAgID0gY29sb3ItbG9nICcjZTQyJ1xuZ3JlZW4tbG9nID0gY29sb3ItbG9nICcjMWQzJ1xuXG5leHBvcnQgc2Z4ID0gY29sb3ItbG9nICcjMjhlJ1xuXG4iLCJcbiMgUmVxdWlyZVxuXG57IGlkLCBsb2csIHJnYiB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiNcbiMgVGFyZ2V0XG4jXG4jIEEgZHVtYiB0YXJnZXQgdGhhdCBoYXMgYSBjb2xvciBhbmQgY29sbGlzaW9uIHJhZGl1cyBidXQgZG9lc24ndCBzaG9vdCBiYWNrXG4jXG5cbmV4cG9ydCBjbGFzcyBUYXJnZXQxXG4gIChwb3MsIGNvbG9yKSAtPlxuICAgIEBwb3MgICAgPSBbIHBvcy4wLCBwb3MuMSBdXG4gICAgQHZlbCAgICA9IFswIC0xMDBdXG4gICAgQHNpemUgICA9IFs5MCA5MF1cbiAgICBAaGVhbHRoID0gNTBcbiAgICBAYWxpdmUgID0geWVzXG4gICAgQGNvbG9yICA9IGNvbG9yXG4gICAgQHJhZGl1cyA9IDMwXG5cbiAgZGFtYWdlOiAoYW1vdW50KSAtPlxuICAgIEBoZWFsdGggLT0gYW1vdW50XG4gICAgQGFsaXZlID0gQGhlYWx0aCA8PSAwXG5cbiAgZHJhdzogKGNhbnZhcykgLT5cbiAgICBjYW52YXMuZG50cmkgQHBvcywgQHNpemUsIGNvbG9yOiByZ2IgQGNvbG9yXG4gICAgY2FudmFzLnN0cm9rZS1jaXJjbGUgQHBvcywgQHJhZGl1cywgY29sb3I6IFxcd2hpdGVcblxuICB1cGRhdGU6ICjOlHQpIC0+XG4gICAgQHBvcy4xICs9IEB2ZWwuMSAqIM6UdFxuICAgIHJldHVybiBAYWxpdmVcblxuI1xuIyBCaWdnZXJcbiNcblxuZXhwb3J0IGNsYXNzIFRhcmdldDIgZXh0ZW5kcyBUYXJnZXQxXG4gIChwb3MsIGNvbG9yKSAtPlxuICAgIHN1cGVyIC4uLlxuICAgIEBzaXplICAgPSBbMTUwIDE1MF1cbiAgICBAaGVhbHRoID0gMTAwXG4gICAgQHJhZGl1cyA9IDUwXG5cblxuI1xuIyBCaWdnZXN0XG4jXG5cbmV4cG9ydCBjbGFzcyBUYXJnZXQzIGV4dGVuZHMgVGFyZ2V0MVxuICAocG9zLCBjb2xvcikgLT5cbiAgICBzdXBlciAuLi5cbiAgICBAc2l6ZSAgID0gWzMwMCAzMDBdXG4gICAgQGhlYWx0aCA9IDIwMFxuICAgIEByYWRpdXMgPSA5MFxuXG4iLCJcbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG4jXG4jIE5vcm1hbCBUaW1lclxuI1xuIyBCZWNvbWVzIGluYWN0aXZlIG9uY2UgY29tcGxldGVkIGJ1dCByZXNldHMgd2hlbmV2ZXIgeW91IHdhbnRcbiNcblxuZXhwb3J0IGNyZWF0ZSA9ICh0YXJnZXQsIHsgZGlzYWJsZWQ9bm8gfT17fSkgLT5cbiAgdGFyZ2V0OiB0YXJnZXRcbiAgY3VycmVudDogMFxuICBlbGFwc2VkOiBub1xuICBhY3RpdmU6IG5vdCBkaXNhYmxlZFxuXG5leHBvcnQgdXBkYXRlLWFuZC1zdG9wID0gKHRpbWVyLCDOlHQpIC0+XG4gIGlmIHRpbWVyLmFjdGl2ZVxuICAgIGlmIHRpbWVyLmN1cnJlbnQgKyDOlHQgPj0gdGltZXIudGFyZ2V0XG4gICAgICB0aW1lci5jdXJyZW50ID0gdGltZXIudGFyZ2V0XG4gICAgICB0aW1lci5lbGFwc2VkID0geWVzXG4gICAgICB0aW1lci5hY3RpdmUgPSBub1xuICAgIGVsc2VcbiAgICAgIHRpbWVyLmN1cnJlbnQgKz0gzpR0XG4gICAgICB0aW1lci5lbGFwc2VkID0gbm9cbiAgZWxzZVxuICAgIHRpbWVyLmVsYXBzZWQgPSBub1xuXG5leHBvcnQgdXBkYXRlLWFuZC1jYXJyeSA9ICh0aW1lciwgzpR0KSAtPlxuICBpZiB0aW1lci5hY3RpdmVcbiAgICBpZiB0aW1lci5jdXJyZW50ICsgzpR0ID49IHRpbWVyLnRhcmdldFxuICAgICAgdGltZXIuZWxhcHNlZCA9IHllc1xuICAgICAgdGltZXIuY3VycmVudCA9ICh0aW1lci5jdXJyZW50ICsgzpR0KSAlIHRpbWVyLnRhcmdldFxuICAgIGVsc2VcbiAgICAgIHRpbWVyLmN1cnJlbnQgKz0gzpR0XG4gICAgICB0aW1lci5lbGFwc2VkID0gbm9cblxuZXhwb3J0IGdldC1wcm9ncmVzcyA9ICh0aW1lcikgLT5cbiAgdGltZXIuY3VycmVudCAvIHRpbWVyLnRhcmdldFxuXG5leHBvcnQgcmVzZXQgPSAodGltZXIsIHRhcmdldCA9IDApIC0+XG4gIGlmIHRhcmdldCB0aGVuIHRpbWVyLnRhcmdldCA9IHRhcmdldFxuICB0aW1lci5jdXJyZW50ID0gMFxuICB0aW1lci5lbGFwc2VkID0gbm9cbiAgdGltZXIuYWN0aXZlID0geWVzXG5cbiIsIlxuIyBSZXF1aXJlXG5cbnsgaWQsIGxvZyB9ID0gcmVxdWlyZSBcXHN0ZFxuXG5cbiNcbiMgVHdlZW5cbiNcblxuZXhwb3J0IGNsYXNzIFR3ZWVuXG5cbiAgYWxsLXR3ZWVucyA9IFtdXG5cbiAgKHsgQGZyb20gPSAwLCBAdG8gPSAxLCBAaW4gPSAxLCBAd2l0aCA9IEVhc2UuTGluZWFyIH0pIC0+XG4gICAgIyBsb2cgJ25ldyBUd2VlbjonLCBAZnJvbSwgQHRvXG4gICAgQHRpbWUgPSAwXG4gICAgQHJhbmdlID0gQHRvIC0gQGZyb21cbiAgICBAZWxhcHNlZCA9IG5vXG4gICAgQGFjdGl2ZSA9IHllc1xuICAgIGFsbC10d2VlbnMucHVzaCB0aGlzXG5cbiAgdXBkYXRlOiAozpR0KSAtPlxuICAgIEB0aW1lICs9IM6UdFxuICAgIGlmIEB0aW1lID49IEBpblxuICAgICAgQHRpbWUgPSBAaW5cbiAgICAgIEBlbGFwc2VkID0geWVzXG4gICAgICBAYWN0aXZlID0gbm9cbiAgICBAdmFsdWUgPSBAZnJvbSArIEByYW5nZSAqIEB3aXRoIEB0aW1lL0BpblxuICAgIHJldHVybiBub3QgQGVsYXBzZWRcblxuICBAdXBkYXRlLWFsbCA9ICjOlHQpIC0+XG4gICAgYWxsLXR3ZWVucyA6PSBhbGwtdHdlZW5zLmZpbHRlciAoLnVwZGF0ZSDOlHQpXG5cbiAgQE51bGwgPVxuICAgIGVsYXBzZWQ6IG5vXG4gICAgYWN0aXZlOiBub1xuICAgIHZhbHVlOiAwXG5cbiJdfQ==
